
simple-dc-inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08006874  08006874  00016874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006888  08006888  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006888  08006888  00016888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006890  08006890  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006890  08006890  00016890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006894  08006894  00016894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          0000071c  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007ac  200007ac  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000128e1  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002da8  00000000  00000000  000329a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a78  00000000  00000000  00035750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000940  00000000  00000000  000361c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000222e6  00000000  00000000  00036b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f13f  00000000  00000000  00058dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c534c  00000000  00000000  00067f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012d279  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b38  00000000  00000000  0012d2cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800685c 	.word	0x0800685c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800685c 	.word	0x0800685c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 f9e4 	bl	8000890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f812 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f87a 	bl	80005c4 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 80004d0:	f005 fdb2 	bl	8006038 <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80004d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004d8:	4804      	ldr	r0, [pc, #16]	; (80004ec <main+0x2c>)
 80004da:	f000 fd36 	bl	8000f4a <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80004de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004e2:	f000 fa47 	bl	8000974 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004e6:	f005 fdcd 	bl	8006084 <MX_USB_HOST_Process>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80004ea:	e7f3      	b.n	80004d4 <main+0x14>
 80004ec:	40020c00 	.word	0x40020c00

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b094      	sub	sp, #80	; 0x50
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0320 	add.w	r3, r7, #32
 80004fa:	2230      	movs	r2, #48	; 0x30
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f006 f8dc 	bl	80066bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	4b28      	ldr	r3, [pc, #160]	; (80005bc <SystemClock_Config+0xcc>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051c:	4a27      	ldr	r2, [pc, #156]	; (80005bc <SystemClock_Config+0xcc>)
 800051e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000522:	6413      	str	r3, [r2, #64]	; 0x40
 8000524:	4b25      	ldr	r3, [pc, #148]	; (80005bc <SystemClock_Config+0xcc>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	4b22      	ldr	r3, [pc, #136]	; (80005c0 <SystemClock_Config+0xd0>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a21      	ldr	r2, [pc, #132]	; (80005c0 <SystemClock_Config+0xd0>)
 800053a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <SystemClock_Config+0xd0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800054c:	2301      	movs	r3, #1
 800054e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000550:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000554:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000556:	2302      	movs	r3, #2
 8000558:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800055e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000560:	2308      	movs	r3, #8
 8000562:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000564:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000568:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800056a:	2302      	movs	r3, #2
 800056c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800056e:	2307      	movs	r3, #7
 8000570:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	4618      	mov	r0, r3
 8000578:	f002 fa72 	bl	8002a60 <HAL_RCC_OscConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000582:	f000 f8b1 	bl	80006e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000586:	230f      	movs	r3, #15
 8000588:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058a:	2302      	movs	r3, #2
 800058c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000592:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000596:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	2105      	movs	r1, #5
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 fcd3 	bl	8002f50 <HAL_RCC_ClockConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005b0:	f000 f89a 	bl	80006e8 <Error_Handler>
  }
}
 80005b4:	bf00      	nop
 80005b6:	3750      	adds	r7, #80	; 0x50
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40007000 	.word	0x40007000

080005c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
 80005de:	4b3e      	ldr	r3, [pc, #248]	; (80006d8 <MX_GPIO_Init+0x114>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a3d      	ldr	r2, [pc, #244]	; (80006d8 <MX_GPIO_Init+0x114>)
 80005e4:	f043 0304 	orr.w	r3, r3, #4
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b3b      	ldr	r3, [pc, #236]	; (80006d8 <MX_GPIO_Init+0x114>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0304 	and.w	r3, r3, #4
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	4b37      	ldr	r3, [pc, #220]	; (80006d8 <MX_GPIO_Init+0x114>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a36      	ldr	r2, [pc, #216]	; (80006d8 <MX_GPIO_Init+0x114>)
 8000600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b34      	ldr	r3, [pc, #208]	; (80006d8 <MX_GPIO_Init+0x114>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	4b30      	ldr	r3, [pc, #192]	; (80006d8 <MX_GPIO_Init+0x114>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a2f      	ldr	r2, [pc, #188]	; (80006d8 <MX_GPIO_Init+0x114>)
 800061c:	f043 0302 	orr.w	r3, r3, #2
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <MX_GPIO_Init+0x114>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <MX_GPIO_Init+0x114>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a28      	ldr	r2, [pc, #160]	; (80006d8 <MX_GPIO_Init+0x114>)
 8000638:	f043 0308 	orr.w	r3, r3, #8
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <MX_GPIO_Init+0x114>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0308 	and.w	r3, r3, #8
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <MX_GPIO_Init+0x114>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <MX_GPIO_Init+0x114>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MX_GPIO_Init+0x114>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000666:	2201      	movs	r2, #1
 8000668:	2101      	movs	r1, #1
 800066a:	481c      	ldr	r0, [pc, #112]	; (80006dc <MX_GPIO_Init+0x118>)
 800066c:	f000 fc54 	bl	8000f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000676:	481a      	ldr	r0, [pc, #104]	; (80006e0 <MX_GPIO_Init+0x11c>)
 8000678:	f000 fc4e 	bl	8000f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800067c:	2301      	movs	r3, #1
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4619      	mov	r1, r3
 8000692:	4812      	ldr	r0, [pc, #72]	; (80006dc <MX_GPIO_Init+0x118>)
 8000694:	f000 faa4 	bl	8000be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000698:	2304      	movs	r3, #4
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4619      	mov	r1, r3
 80006aa:	480e      	ldr	r0, [pc, #56]	; (80006e4 <MX_GPIO_Init+0x120>)
 80006ac:	f000 fa98 	bl	8000be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80006b0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	2301      	movs	r3, #1
 80006b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	2300      	movs	r3, #0
 80006c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_GPIO_Init+0x11c>)
 80006ca:	f000 fa89 	bl	8000be0 <HAL_GPIO_Init>

}
 80006ce:	bf00      	nop
 80006d0:	3728      	adds	r7, #40	; 0x28
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40020800 	.word	0x40020800
 80006e0:	40020c00 	.word	0x40020c00
 80006e4:	40020400 	.word	0x40020400

080006e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ec:	b672      	cpsid	i
}
 80006ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <Error_Handler+0x8>
	...

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <HAL_MspInit+0x4c>)
 8000700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000702:	4a0f      	ldr	r2, [pc, #60]	; (8000740 <HAL_MspInit+0x4c>)
 8000704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000708:	6453      	str	r3, [r2, #68]	; 0x44
 800070a:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <HAL_MspInit+0x4c>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <HAL_MspInit+0x4c>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	4a08      	ldr	r2, [pc, #32]	; (8000740 <HAL_MspInit+0x4c>)
 8000720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000724:	6413      	str	r3, [r2, #64]	; 0x40
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_MspInit+0x4c>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000732:	2007      	movs	r0, #7
 8000734:	f000 fa12 	bl	8000b5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40023800 	.word	0x40023800

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <NMI_Handler+0x4>

0800074a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <HardFault_Handler+0x4>

08000750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <MemManage_Handler+0x4>

08000756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <BusFault_Handler+0x4>

0800075c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <UsageFault_Handler+0x4>

08000762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000790:	f000 f8d0 	bl	8000934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800079c:	4802      	ldr	r0, [pc, #8]	; (80007a8 <OTG_FS_IRQHandler+0x10>)
 800079e:	f000 fe59 	bl	8001454 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000498 	.word	0x20000498

080007ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007b4:	4a14      	ldr	r2, [pc, #80]	; (8000808 <_sbrk+0x5c>)
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <_sbrk+0x60>)
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <_sbrk+0x64>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d102      	bne.n	80007ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <_sbrk+0x64>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	; (8000814 <_sbrk+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <_sbrk+0x64>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	693a      	ldr	r2, [r7, #16]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d207      	bcs.n	80007ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007dc:	f005 ff34 	bl	8006648 <__errno>
 80007e0:	4603      	mov	r3, r0
 80007e2:	220c      	movs	r2, #12
 80007e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ea:	e009      	b.n	8000800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <_sbrk+0x64>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007f2:	4b07      	ldr	r3, [pc, #28]	; (8000810 <_sbrk+0x64>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	4a05      	ldr	r2, [pc, #20]	; (8000810 <_sbrk+0x64>)
 80007fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007fe:	68fb      	ldr	r3, [r7, #12]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3718      	adds	r7, #24
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20020000 	.word	0x20020000
 800080c:	00000400 	.word	0x00000400
 8000810:	200000ac 	.word	0x200000ac
 8000814:	200007b0 	.word	0x200007b0

08000818 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <SystemInit+0x20>)
 800081e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000822:	4a05      	ldr	r2, [pc, #20]	; (8000838 <SystemInit+0x20>)
 8000824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800083c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000874 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000840:	480d      	ldr	r0, [pc, #52]	; (8000878 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000842:	490e      	ldr	r1, [pc, #56]	; (800087c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000844:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000848:	e002      	b.n	8000850 <LoopCopyDataInit>

0800084a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800084c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084e:	3304      	adds	r3, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000854:	d3f9      	bcc.n	800084a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000856:	4a0b      	ldr	r2, [pc, #44]	; (8000884 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000858:	4c0b      	ldr	r4, [pc, #44]	; (8000888 <LoopFillZerobss+0x26>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800085c:	e001      	b.n	8000862 <LoopFillZerobss>

0800085e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000860:	3204      	adds	r2, #4

08000862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000864:	d3fb      	bcc.n	800085e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000866:	f7ff ffd7 	bl	8000818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800086a:	f005 fef3 	bl	8006654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800086e:	f7ff fe27 	bl	80004c0 <main>
  bx  lr    
 8000872:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000874:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800087c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000880:	08006898 	.word	0x08006898
  ldr r2, =_sbss
 8000884:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000888:	200007ac 	.word	0x200007ac

0800088c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800088c:	e7fe      	b.n	800088c <ADC_IRQHandler>
	...

08000890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_Init+0x40>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a0d      	ldr	r2, [pc, #52]	; (80008d0 <HAL_Init+0x40>)
 800089a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800089e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <HAL_Init+0x40>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <HAL_Init+0x40>)
 80008a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <HAL_Init+0x40>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <HAL_Init+0x40>)
 80008b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b8:	2003      	movs	r0, #3
 80008ba:	f000 f94f 	bl	8000b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008be:	2000      	movs	r0, #0
 80008c0:	f000 f808 	bl	80008d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c4:	f7ff ff16 	bl	80006f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023c00 	.word	0x40023c00

080008d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_InitTick+0x54>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_InitTick+0x58>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f967 	bl	8000bc6 <HAL_SYSTICK_Config>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e00e      	b.n	8000920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b0f      	cmp	r3, #15
 8000906:	d80a      	bhi.n	800091e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000908:	2200      	movs	r2, #0
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	f04f 30ff 	mov.w	r0, #4294967295
 8000910:	f000 f92f 	bl	8000b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000914:	4a06      	ldr	r2, [pc, #24]	; (8000930 <HAL_InitTick+0x5c>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800091a:	2300      	movs	r3, #0
 800091c:	e000      	b.n	8000920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000000 	.word	0x20000000
 800092c:	20000008 	.word	0x20000008
 8000930:	20000004 	.word	0x20000004

08000934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_IncTick+0x20>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_IncTick+0x24>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4413      	add	r3, r2
 8000944:	4a04      	ldr	r2, [pc, #16]	; (8000958 <HAL_IncTick+0x24>)
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000008 	.word	0x20000008
 8000958:	200000bc 	.word	0x200000bc

0800095c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return uwTick;
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <HAL_GetTick+0x14>)
 8000962:	681b      	ldr	r3, [r3, #0]
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	200000bc 	.word	0x200000bc

08000974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800097c:	f7ff ffee 	bl	800095c <HAL_GetTick>
 8000980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800098c:	d005      	beq.n	800099a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_Delay+0x44>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800099a:	bf00      	nop
 800099c:	f7ff ffde 	bl	800095c <HAL_GetTick>
 80009a0:	4602      	mov	r2, r0
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d8f7      	bhi.n	800099c <HAL_Delay+0x28>
  {
  }
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000008 	.word	0x20000008

080009bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d8:	4013      	ands	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ee:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	60d3      	str	r3, [r2, #12]
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <__NVIC_GetPriorityGrouping+0x18>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	f003 0307 	and.w	r3, r3, #7
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	db0b      	blt.n	8000a4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	f003 021f 	and.w	r2, r3, #31
 8000a38:	4907      	ldr	r1, [pc, #28]	; (8000a58 <__NVIC_EnableIRQ+0x38>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	095b      	lsrs	r3, r3, #5
 8000a40:	2001      	movs	r0, #1
 8000a42:	fa00 f202 	lsl.w	r2, r0, r2
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000e100 	.word	0xe000e100

08000a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	db0a      	blt.n	8000a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	490c      	ldr	r1, [pc, #48]	; (8000aa8 <__NVIC_SetPriority+0x4c>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	0112      	lsls	r2, r2, #4
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	440b      	add	r3, r1
 8000a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a84:	e00a      	b.n	8000a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4908      	ldr	r1, [pc, #32]	; (8000aac <__NVIC_SetPriority+0x50>)
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	f003 030f 	and.w	r3, r3, #15
 8000a92:	3b04      	subs	r3, #4
 8000a94:	0112      	lsls	r2, r2, #4
 8000a96:	b2d2      	uxtb	r2, r2
 8000a98:	440b      	add	r3, r1
 8000a9a:	761a      	strb	r2, [r3, #24]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000e100 	.word	0xe000e100
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b089      	sub	sp, #36	; 0x24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	f1c3 0307 	rsb	r3, r3, #7
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	bf28      	it	cs
 8000ace:	2304      	movcs	r3, #4
 8000ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	2b06      	cmp	r3, #6
 8000ad8:	d902      	bls.n	8000ae0 <NVIC_EncodePriority+0x30>
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3b03      	subs	r3, #3
 8000ade:	e000      	b.n	8000ae2 <NVIC_EncodePriority+0x32>
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43da      	mvns	r2, r3
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	401a      	ands	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af8:	f04f 31ff 	mov.w	r1, #4294967295
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	43d9      	mvns	r1, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	4313      	orrs	r3, r2
         );
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3724      	adds	r7, #36	; 0x24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b28:	d301      	bcc.n	8000b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00f      	b.n	8000b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <SysTick_Config+0x40>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b36:	210f      	movs	r1, #15
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	f7ff ff8e 	bl	8000a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <SysTick_Config+0x40>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <SysTick_Config+0x40>)
 8000b48:	2207      	movs	r2, #7
 8000b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	e000e010 	.word	0xe000e010

08000b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff ff29 	bl	80009bc <__NVIC_SetPriorityGrouping>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b086      	sub	sp, #24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	4603      	mov	r3, r0
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b84:	f7ff ff3e 	bl	8000a04 <__NVIC_GetPriorityGrouping>
 8000b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	6978      	ldr	r0, [r7, #20]
 8000b90:	f7ff ff8e 	bl	8000ab0 <NVIC_EncodePriority>
 8000b94:	4602      	mov	r2, r0
 8000b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff5d 	bl	8000a5c <__NVIC_SetPriority>
}
 8000ba2:	bf00      	nop
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff31 	bl	8000a20 <__NVIC_EnableIRQ>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ffa2 	bl	8000b18 <SysTick_Config>
 8000bd4:	4603      	mov	r3, r0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
 8000bfa:	e16b      	b.n	8000ed4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	f040 815a 	bne.w	8000ece <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 0303 	and.w	r3, r3, #3
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d005      	beq.n	8000c32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d130      	bne.n	8000c94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	4013      	ands	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	68da      	ldr	r2, [r3, #12]
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c68:	2201      	movs	r2, #1
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4013      	ands	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	091b      	lsrs	r3, r3, #4
 8000c7e:	f003 0201 	and.w	r2, r3, #1
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 0303 	and.w	r3, r3, #3
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d017      	beq.n	8000cd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	2203      	movs	r2, #3
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d123      	bne.n	8000d24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	08da      	lsrs	r2, r3, #3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3208      	adds	r2, #8
 8000ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	f003 0307 	and.w	r3, r3, #7
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	220f      	movs	r2, #15
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	691a      	ldr	r2, [r3, #16]
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	08da      	lsrs	r2, r3, #3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3208      	adds	r2, #8
 8000d1e:	69b9      	ldr	r1, [r7, #24]
 8000d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 0203 	and.w	r2, r3, #3
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f000 80b4 	beq.w	8000ece <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b60      	ldr	r3, [pc, #384]	; (8000eec <HAL_GPIO_Init+0x30c>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	4a5f      	ldr	r2, [pc, #380]	; (8000eec <HAL_GPIO_Init+0x30c>)
 8000d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d74:	6453      	str	r3, [r2, #68]	; 0x44
 8000d76:	4b5d      	ldr	r3, [pc, #372]	; (8000eec <HAL_GPIO_Init+0x30c>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d82:	4a5b      	ldr	r2, [pc, #364]	; (8000ef0 <HAL_GPIO_Init+0x310>)
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	089b      	lsrs	r3, r3, #2
 8000d88:	3302      	adds	r3, #2
 8000d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	220f      	movs	r2, #15
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4013      	ands	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a52      	ldr	r2, [pc, #328]	; (8000ef4 <HAL_GPIO_Init+0x314>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d02b      	beq.n	8000e06 <HAL_GPIO_Init+0x226>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a51      	ldr	r2, [pc, #324]	; (8000ef8 <HAL_GPIO_Init+0x318>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d025      	beq.n	8000e02 <HAL_GPIO_Init+0x222>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a50      	ldr	r2, [pc, #320]	; (8000efc <HAL_GPIO_Init+0x31c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d01f      	beq.n	8000dfe <HAL_GPIO_Init+0x21e>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a4f      	ldr	r2, [pc, #316]	; (8000f00 <HAL_GPIO_Init+0x320>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d019      	beq.n	8000dfa <HAL_GPIO_Init+0x21a>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a4e      	ldr	r2, [pc, #312]	; (8000f04 <HAL_GPIO_Init+0x324>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d013      	beq.n	8000df6 <HAL_GPIO_Init+0x216>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a4d      	ldr	r2, [pc, #308]	; (8000f08 <HAL_GPIO_Init+0x328>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d00d      	beq.n	8000df2 <HAL_GPIO_Init+0x212>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a4c      	ldr	r2, [pc, #304]	; (8000f0c <HAL_GPIO_Init+0x32c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d007      	beq.n	8000dee <HAL_GPIO_Init+0x20e>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a4b      	ldr	r2, [pc, #300]	; (8000f10 <HAL_GPIO_Init+0x330>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d101      	bne.n	8000dea <HAL_GPIO_Init+0x20a>
 8000de6:	2307      	movs	r3, #7
 8000de8:	e00e      	b.n	8000e08 <HAL_GPIO_Init+0x228>
 8000dea:	2308      	movs	r3, #8
 8000dec:	e00c      	b.n	8000e08 <HAL_GPIO_Init+0x228>
 8000dee:	2306      	movs	r3, #6
 8000df0:	e00a      	b.n	8000e08 <HAL_GPIO_Init+0x228>
 8000df2:	2305      	movs	r3, #5
 8000df4:	e008      	b.n	8000e08 <HAL_GPIO_Init+0x228>
 8000df6:	2304      	movs	r3, #4
 8000df8:	e006      	b.n	8000e08 <HAL_GPIO_Init+0x228>
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e004      	b.n	8000e08 <HAL_GPIO_Init+0x228>
 8000dfe:	2302      	movs	r3, #2
 8000e00:	e002      	b.n	8000e08 <HAL_GPIO_Init+0x228>
 8000e02:	2301      	movs	r3, #1
 8000e04:	e000      	b.n	8000e08 <HAL_GPIO_Init+0x228>
 8000e06:	2300      	movs	r3, #0
 8000e08:	69fa      	ldr	r2, [r7, #28]
 8000e0a:	f002 0203 	and.w	r2, r2, #3
 8000e0e:	0092      	lsls	r2, r2, #2
 8000e10:	4093      	lsls	r3, r2
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e18:	4935      	ldr	r1, [pc, #212]	; (8000ef0 <HAL_GPIO_Init+0x310>)
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	089b      	lsrs	r3, r3, #2
 8000e1e:	3302      	adds	r3, #2
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e26:	4b3b      	ldr	r3, [pc, #236]	; (8000f14 <HAL_GPIO_Init+0x334>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4013      	ands	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e4a:	4a32      	ldr	r2, [pc, #200]	; (8000f14 <HAL_GPIO_Init+0x334>)
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e50:	4b30      	ldr	r3, [pc, #192]	; (8000f14 <HAL_GPIO_Init+0x334>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e74:	4a27      	ldr	r2, [pc, #156]	; (8000f14 <HAL_GPIO_Init+0x334>)
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e7a:	4b26      	ldr	r3, [pc, #152]	; (8000f14 <HAL_GPIO_Init+0x334>)
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	43db      	mvns	r3, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4013      	ands	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e9e:	4a1d      	ldr	r2, [pc, #116]	; (8000f14 <HAL_GPIO_Init+0x334>)
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <HAL_GPIO_Init+0x334>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d003      	beq.n	8000ec8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ec8:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <HAL_GPIO_Init+0x334>)
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	61fb      	str	r3, [r7, #28]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	2b0f      	cmp	r3, #15
 8000ed8:	f67f ae90 	bls.w	8000bfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	3724      	adds	r7, #36	; 0x24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40013800 	.word	0x40013800
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	40020800 	.word	0x40020800
 8000f00:	40020c00 	.word	0x40020c00
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40021400 	.word	0x40021400
 8000f0c:	40021800 	.word	0x40021800
 8000f10:	40021c00 	.word	0x40021c00
 8000f14:	40013c00 	.word	0x40013c00

08000f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	807b      	strh	r3, [r7, #2]
 8000f24:	4613      	mov	r3, r2
 8000f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f28:	787b      	ldrb	r3, [r7, #1]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f2e:	887a      	ldrh	r2, [r7, #2]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f34:	e003      	b.n	8000f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f36:	887b      	ldrh	r3, [r7, #2]
 8000f38:	041a      	lsls	r2, r3, #16
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	619a      	str	r2, [r3, #24]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b085      	sub	sp, #20
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	460b      	mov	r3, r1
 8000f54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f5c:	887a      	ldrh	r2, [r7, #2]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4013      	ands	r3, r2
 8000f62:	041a      	lsls	r2, r3, #16
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	887b      	ldrh	r3, [r7, #2]
 8000f6a:	400b      	ands	r3, r1
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	619a      	str	r2, [r3, #24]
}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000f7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f80:	b08f      	sub	sp, #60	; 0x3c
 8000f82:	af0a      	add	r7, sp, #40	; 0x28
 8000f84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d101      	bne.n	8000f90 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e054      	b.n	800103a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d106      	bne.n	8000fb0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f005 f8a2 	bl	80060f4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d102      	bne.n	8000fca <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f002 f9f8 	bl	80033c4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	687e      	ldr	r6, [r7, #4]
 8000fdc:	466d      	mov	r5, sp
 8000fde:	f106 0410 	add.w	r4, r6, #16
 8000fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fee:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ff2:	1d33      	adds	r3, r6, #4
 8000ff4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ff6:	6838      	ldr	r0, [r7, #0]
 8000ff8:	f002 f972 	bl	80032e0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2101      	movs	r1, #1
 8001002:	4618      	mov	r0, r3
 8001004:	f002 f9ef 	bl	80033e6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	603b      	str	r3, [r7, #0]
 800100e:	687e      	ldr	r6, [r7, #4]
 8001010:	466d      	mov	r5, sp
 8001012:	f106 0410 	add.w	r4, r6, #16
 8001016:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001018:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800101a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800101c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800101e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001022:	e885 0003 	stmia.w	r5, {r0, r1}
 8001026:	1d33      	adds	r3, r6, #4
 8001028:	cb0e      	ldmia	r3, {r1, r2, r3}
 800102a:	6838      	ldr	r0, [r7, #0]
 800102c:	f002 fb56 	bl	80036dc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2201      	movs	r2, #1
 8001034:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001042 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001042:	b590      	push	{r4, r7, lr}
 8001044:	b089      	sub	sp, #36	; 0x24
 8001046:	af04      	add	r7, sp, #16
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	4608      	mov	r0, r1
 800104c:	4611      	mov	r1, r2
 800104e:	461a      	mov	r2, r3
 8001050:	4603      	mov	r3, r0
 8001052:	70fb      	strb	r3, [r7, #3]
 8001054:	460b      	mov	r3, r1
 8001056:	70bb      	strb	r3, [r7, #2]
 8001058:	4613      	mov	r3, r2
 800105a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001062:	2b01      	cmp	r3, #1
 8001064:	d101      	bne.n	800106a <HAL_HCD_HC_Init+0x28>
 8001066:	2302      	movs	r3, #2
 8001068:	e076      	b.n	8001158 <HAL_HCD_HC_Init+0x116>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2201      	movs	r2, #1
 800106e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001072:	78fb      	ldrb	r3, [r7, #3]
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	212c      	movs	r1, #44	; 0x2c
 8001078:	fb01 f303 	mul.w	r3, r1, r3
 800107c:	4413      	add	r3, r2
 800107e:	333d      	adds	r3, #61	; 0x3d
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	212c      	movs	r1, #44	; 0x2c
 800108a:	fb01 f303 	mul.w	r3, r1, r3
 800108e:	4413      	add	r3, r2
 8001090:	3338      	adds	r3, #56	; 0x38
 8001092:	787a      	ldrb	r2, [r7, #1]
 8001094:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001096:	78fb      	ldrb	r3, [r7, #3]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	212c      	movs	r1, #44	; 0x2c
 800109c:	fb01 f303 	mul.w	r3, r1, r3
 80010a0:	4413      	add	r3, r2
 80010a2:	3340      	adds	r3, #64	; 0x40
 80010a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80010a6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	212c      	movs	r1, #44	; 0x2c
 80010ae:	fb01 f303 	mul.w	r3, r1, r3
 80010b2:	4413      	add	r3, r2
 80010b4:	3339      	adds	r3, #57	; 0x39
 80010b6:	78fa      	ldrb	r2, [r7, #3]
 80010b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80010ba:	78fb      	ldrb	r3, [r7, #3]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	212c      	movs	r1, #44	; 0x2c
 80010c0:	fb01 f303 	mul.w	r3, r1, r3
 80010c4:	4413      	add	r3, r2
 80010c6:	333f      	adds	r3, #63	; 0x3f
 80010c8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80010cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80010ce:	78fb      	ldrb	r3, [r7, #3]
 80010d0:	78ba      	ldrb	r2, [r7, #2]
 80010d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010d6:	b2d0      	uxtb	r0, r2
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	212c      	movs	r1, #44	; 0x2c
 80010dc:	fb01 f303 	mul.w	r3, r1, r3
 80010e0:	4413      	add	r3, r2
 80010e2:	333a      	adds	r3, #58	; 0x3a
 80010e4:	4602      	mov	r2, r0
 80010e6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80010e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	da09      	bge.n	8001104 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	212c      	movs	r1, #44	; 0x2c
 80010f6:	fb01 f303 	mul.w	r3, r1, r3
 80010fa:	4413      	add	r3, r2
 80010fc:	333b      	adds	r3, #59	; 0x3b
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
 8001102:	e008      	b.n	8001116 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	212c      	movs	r1, #44	; 0x2c
 800110a:	fb01 f303 	mul.w	r3, r1, r3
 800110e:	4413      	add	r3, r2
 8001110:	333b      	adds	r3, #59	; 0x3b
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001116:	78fb      	ldrb	r3, [r7, #3]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	212c      	movs	r1, #44	; 0x2c
 800111c:	fb01 f303 	mul.w	r3, r1, r3
 8001120:	4413      	add	r3, r2
 8001122:	333c      	adds	r3, #60	; 0x3c
 8001124:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001128:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6818      	ldr	r0, [r3, #0]
 800112e:	787c      	ldrb	r4, [r7, #1]
 8001130:	78ba      	ldrb	r2, [r7, #2]
 8001132:	78f9      	ldrb	r1, [r7, #3]
 8001134:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	4623      	mov	r3, r4
 8001146:	f002 fc43 	bl	80039d0 <USB_HC_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001156:	7bfb      	ldrb	r3, [r7, #15]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	bd90      	pop	{r4, r7, pc}

08001160 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001176:	2b01      	cmp	r3, #1
 8001178:	d101      	bne.n	800117e <HAL_HCD_HC_Halt+0x1e>
 800117a:	2302      	movs	r3, #2
 800117c:	e00f      	b.n	800119e <HAL_HCD_HC_Halt+0x3e>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	78fa      	ldrb	r2, [r7, #3]
 800118c:	4611      	mov	r1, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f002 fe7f 	bl	8003e92 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800119c:	7bfb      	ldrb	r3, [r7, #15]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	4608      	mov	r0, r1
 80011b2:	4611      	mov	r1, r2
 80011b4:	461a      	mov	r2, r3
 80011b6:	4603      	mov	r3, r0
 80011b8:	70fb      	strb	r3, [r7, #3]
 80011ba:	460b      	mov	r3, r1
 80011bc:	70bb      	strb	r3, [r7, #2]
 80011be:	4613      	mov	r3, r2
 80011c0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80011c2:	78fb      	ldrb	r3, [r7, #3]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	212c      	movs	r1, #44	; 0x2c
 80011c8:	fb01 f303 	mul.w	r3, r1, r3
 80011cc:	4413      	add	r3, r2
 80011ce:	333b      	adds	r3, #59	; 0x3b
 80011d0:	78ba      	ldrb	r2, [r7, #2]
 80011d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80011d4:	78fb      	ldrb	r3, [r7, #3]
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	212c      	movs	r1, #44	; 0x2c
 80011da:	fb01 f303 	mul.w	r3, r1, r3
 80011de:	4413      	add	r3, r2
 80011e0:	333f      	adds	r3, #63	; 0x3f
 80011e2:	787a      	ldrb	r2, [r7, #1]
 80011e4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80011e6:	7c3b      	ldrb	r3, [r7, #16]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d112      	bne.n	8001212 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	212c      	movs	r1, #44	; 0x2c
 80011f2:	fb01 f303 	mul.w	r3, r1, r3
 80011f6:	4413      	add	r3, r2
 80011f8:	3342      	adds	r3, #66	; 0x42
 80011fa:	2203      	movs	r2, #3
 80011fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	212c      	movs	r1, #44	; 0x2c
 8001204:	fb01 f303 	mul.w	r3, r1, r3
 8001208:	4413      	add	r3, r2
 800120a:	333d      	adds	r3, #61	; 0x3d
 800120c:	7f3a      	ldrb	r2, [r7, #28]
 800120e:	701a      	strb	r2, [r3, #0]
 8001210:	e008      	b.n	8001224 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001212:	78fb      	ldrb	r3, [r7, #3]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	212c      	movs	r1, #44	; 0x2c
 8001218:	fb01 f303 	mul.w	r3, r1, r3
 800121c:	4413      	add	r3, r2
 800121e:	3342      	adds	r3, #66	; 0x42
 8001220:	2202      	movs	r2, #2
 8001222:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001224:	787b      	ldrb	r3, [r7, #1]
 8001226:	2b03      	cmp	r3, #3
 8001228:	f200 80c6 	bhi.w	80013b8 <HAL_HCD_HC_SubmitRequest+0x210>
 800122c:	a201      	add	r2, pc, #4	; (adr r2, 8001234 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800122e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001232:	bf00      	nop
 8001234:	08001245 	.word	0x08001245
 8001238:	080013a5 	.word	0x080013a5
 800123c:	080012a9 	.word	0x080012a9
 8001240:	08001327 	.word	0x08001327
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001244:	7c3b      	ldrb	r3, [r7, #16]
 8001246:	2b01      	cmp	r3, #1
 8001248:	f040 80b8 	bne.w	80013bc <HAL_HCD_HC_SubmitRequest+0x214>
 800124c:	78bb      	ldrb	r3, [r7, #2]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f040 80b4 	bne.w	80013bc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001254:	8b3b      	ldrh	r3, [r7, #24]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d108      	bne.n	800126c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800125a:	78fb      	ldrb	r3, [r7, #3]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	212c      	movs	r1, #44	; 0x2c
 8001260:	fb01 f303 	mul.w	r3, r1, r3
 8001264:	4413      	add	r3, r2
 8001266:	3355      	adds	r3, #85	; 0x55
 8001268:	2201      	movs	r2, #1
 800126a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800126c:	78fb      	ldrb	r3, [r7, #3]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	212c      	movs	r1, #44	; 0x2c
 8001272:	fb01 f303 	mul.w	r3, r1, r3
 8001276:	4413      	add	r3, r2
 8001278:	3355      	adds	r3, #85	; 0x55
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d109      	bne.n	8001294 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001280:	78fb      	ldrb	r3, [r7, #3]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	212c      	movs	r1, #44	; 0x2c
 8001286:	fb01 f303 	mul.w	r3, r1, r3
 800128a:	4413      	add	r3, r2
 800128c:	3342      	adds	r3, #66	; 0x42
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001292:	e093      	b.n	80013bc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	212c      	movs	r1, #44	; 0x2c
 800129a:	fb01 f303 	mul.w	r3, r1, r3
 800129e:	4413      	add	r3, r2
 80012a0:	3342      	adds	r3, #66	; 0x42
 80012a2:	2202      	movs	r2, #2
 80012a4:	701a      	strb	r2, [r3, #0]
      break;
 80012a6:	e089      	b.n	80013bc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80012a8:	78bb      	ldrb	r3, [r7, #2]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d11d      	bne.n	80012ea <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80012ae:	78fb      	ldrb	r3, [r7, #3]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	212c      	movs	r1, #44	; 0x2c
 80012b4:	fb01 f303 	mul.w	r3, r1, r3
 80012b8:	4413      	add	r3, r2
 80012ba:	3355      	adds	r3, #85	; 0x55
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d109      	bne.n	80012d6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	212c      	movs	r1, #44	; 0x2c
 80012c8:	fb01 f303 	mul.w	r3, r1, r3
 80012cc:	4413      	add	r3, r2
 80012ce:	3342      	adds	r3, #66	; 0x42
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80012d4:	e073      	b.n	80013be <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	212c      	movs	r1, #44	; 0x2c
 80012dc:	fb01 f303 	mul.w	r3, r1, r3
 80012e0:	4413      	add	r3, r2
 80012e2:	3342      	adds	r3, #66	; 0x42
 80012e4:	2202      	movs	r2, #2
 80012e6:	701a      	strb	r2, [r3, #0]
      break;
 80012e8:	e069      	b.n	80013be <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80012ea:	78fb      	ldrb	r3, [r7, #3]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	212c      	movs	r1, #44	; 0x2c
 80012f0:	fb01 f303 	mul.w	r3, r1, r3
 80012f4:	4413      	add	r3, r2
 80012f6:	3354      	adds	r3, #84	; 0x54
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d109      	bne.n	8001312 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80012fe:	78fb      	ldrb	r3, [r7, #3]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	212c      	movs	r1, #44	; 0x2c
 8001304:	fb01 f303 	mul.w	r3, r1, r3
 8001308:	4413      	add	r3, r2
 800130a:	3342      	adds	r3, #66	; 0x42
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
      break;
 8001310:	e055      	b.n	80013be <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	212c      	movs	r1, #44	; 0x2c
 8001318:	fb01 f303 	mul.w	r3, r1, r3
 800131c:	4413      	add	r3, r2
 800131e:	3342      	adds	r3, #66	; 0x42
 8001320:	2202      	movs	r2, #2
 8001322:	701a      	strb	r2, [r3, #0]
      break;
 8001324:	e04b      	b.n	80013be <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001326:	78bb      	ldrb	r3, [r7, #2]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d11d      	bne.n	8001368 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	212c      	movs	r1, #44	; 0x2c
 8001332:	fb01 f303 	mul.w	r3, r1, r3
 8001336:	4413      	add	r3, r2
 8001338:	3355      	adds	r3, #85	; 0x55
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d109      	bne.n	8001354 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	212c      	movs	r1, #44	; 0x2c
 8001346:	fb01 f303 	mul.w	r3, r1, r3
 800134a:	4413      	add	r3, r2
 800134c:	3342      	adds	r3, #66	; 0x42
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001352:	e034      	b.n	80013be <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001354:	78fb      	ldrb	r3, [r7, #3]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	212c      	movs	r1, #44	; 0x2c
 800135a:	fb01 f303 	mul.w	r3, r1, r3
 800135e:	4413      	add	r3, r2
 8001360:	3342      	adds	r3, #66	; 0x42
 8001362:	2202      	movs	r2, #2
 8001364:	701a      	strb	r2, [r3, #0]
      break;
 8001366:	e02a      	b.n	80013be <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001368:	78fb      	ldrb	r3, [r7, #3]
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	212c      	movs	r1, #44	; 0x2c
 800136e:	fb01 f303 	mul.w	r3, r1, r3
 8001372:	4413      	add	r3, r2
 8001374:	3354      	adds	r3, #84	; 0x54
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d109      	bne.n	8001390 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	212c      	movs	r1, #44	; 0x2c
 8001382:	fb01 f303 	mul.w	r3, r1, r3
 8001386:	4413      	add	r3, r2
 8001388:	3342      	adds	r3, #66	; 0x42
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
      break;
 800138e:	e016      	b.n	80013be <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001390:	78fb      	ldrb	r3, [r7, #3]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	212c      	movs	r1, #44	; 0x2c
 8001396:	fb01 f303 	mul.w	r3, r1, r3
 800139a:	4413      	add	r3, r2
 800139c:	3342      	adds	r3, #66	; 0x42
 800139e:	2202      	movs	r2, #2
 80013a0:	701a      	strb	r2, [r3, #0]
      break;
 80013a2:	e00c      	b.n	80013be <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	212c      	movs	r1, #44	; 0x2c
 80013aa:	fb01 f303 	mul.w	r3, r1, r3
 80013ae:	4413      	add	r3, r2
 80013b0:	3342      	adds	r3, #66	; 0x42
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
      break;
 80013b6:	e002      	b.n	80013be <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80013b8:	bf00      	nop
 80013ba:	e000      	b.n	80013be <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80013bc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	212c      	movs	r1, #44	; 0x2c
 80013c4:	fb01 f303 	mul.w	r3, r1, r3
 80013c8:	4413      	add	r3, r2
 80013ca:	3344      	adds	r3, #68	; 0x44
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	8b3a      	ldrh	r2, [r7, #24]
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	202c      	movs	r0, #44	; 0x2c
 80013d8:	fb00 f303 	mul.w	r3, r0, r3
 80013dc:	440b      	add	r3, r1
 80013de:	334c      	adds	r3, #76	; 0x4c
 80013e0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80013e2:	78fb      	ldrb	r3, [r7, #3]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	212c      	movs	r1, #44	; 0x2c
 80013e8:	fb01 f303 	mul.w	r3, r1, r3
 80013ec:	4413      	add	r3, r2
 80013ee:	3360      	adds	r3, #96	; 0x60
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	212c      	movs	r1, #44	; 0x2c
 80013fa:	fb01 f303 	mul.w	r3, r1, r3
 80013fe:	4413      	add	r3, r2
 8001400:	3350      	adds	r3, #80	; 0x50
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001406:	78fb      	ldrb	r3, [r7, #3]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	212c      	movs	r1, #44	; 0x2c
 800140c:	fb01 f303 	mul.w	r3, r1, r3
 8001410:	4413      	add	r3, r2
 8001412:	3339      	adds	r3, #57	; 0x39
 8001414:	78fa      	ldrb	r2, [r7, #3]
 8001416:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001418:	78fb      	ldrb	r3, [r7, #3]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	212c      	movs	r1, #44	; 0x2c
 800141e:	fb01 f303 	mul.w	r3, r1, r3
 8001422:	4413      	add	r3, r2
 8001424:	3361      	adds	r3, #97	; 0x61
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6818      	ldr	r0, [r3, #0]
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	222c      	movs	r2, #44	; 0x2c
 8001432:	fb02 f303 	mul.w	r3, r2, r3
 8001436:	3338      	adds	r3, #56	; 0x38
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	18d1      	adds	r1, r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	461a      	mov	r2, r3
 8001444:	f002 fbd2 	bl	8003bec <USB_HC_StartXfer>
 8001448:	4603      	mov	r3, r0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop

08001454 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f002 f8f5 	bl	800365a <USB_GetMode>
 8001470:	4603      	mov	r3, r0
 8001472:	2b01      	cmp	r3, #1
 8001474:	f040 80f6 	bne.w	8001664 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f002 f8d9 	bl	8003634 <USB_ReadInterrupts>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80ec 	beq.w	8001662 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f002 f8d0 	bl	8003634 <USB_ReadInterrupts>
 8001494:	4603      	mov	r3, r0
 8001496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800149a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800149e:	d104      	bne.n	80014aa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f002 f8c0 	bl	8003634 <USB_ReadInterrupts>
 80014b4:	4603      	mov	r3, r0
 80014b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014be:	d104      	bne.n	80014ca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 f8b0 	bl	8003634 <USB_ReadInterrupts>
 80014d4:	4603      	mov	r3, r0
 80014d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80014de:	d104      	bne.n	80014ea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 f8a0 	bl	8003634 <USB_ReadInterrupts>
 80014f4:	4603      	mov	r3, r0
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d103      	bne.n	8001506 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2202      	movs	r2, #2
 8001504:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f002 f892 	bl	8003634 <USB_ReadInterrupts>
 8001510:	4603      	mov	r3, r0
 8001512:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001516:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800151a:	d11c      	bne.n	8001556 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001524:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10f      	bne.n	8001556 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001536:	2110      	movs	r1, #16
 8001538:	6938      	ldr	r0, [r7, #16]
 800153a:	f001 ffa1 	bl	8003480 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800153e:	6938      	ldr	r0, [r7, #16]
 8001540:	f001 ffc2 	bl	80034c8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2101      	movs	r1, #1
 800154a:	4618      	mov	r0, r3
 800154c:	f002 f97a 	bl	8003844 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f004 fe4d 	bl	80061f0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f002 f86a 	bl	8003634 <USB_ReadInterrupts>
 8001560:	4603      	mov	r3, r0
 8001562:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001566:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800156a:	d102      	bne.n	8001572 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f001 fa03 	bl	8002978 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f002 f85c 	bl	8003634 <USB_ReadInterrupts>
 800157c:	4603      	mov	r3, r0
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	2b08      	cmp	r3, #8
 8001584:	d106      	bne.n	8001594 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f004 fe16 	bl	80061b8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2208      	movs	r2, #8
 8001592:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f002 f84b 	bl	8003634 <USB_ReadInterrupts>
 800159e:	4603      	mov	r3, r0
 80015a0:	f003 0310 	and.w	r3, r3, #16
 80015a4:	2b10      	cmp	r3, #16
 80015a6:	d101      	bne.n	80015ac <HAL_HCD_IRQHandler+0x158>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <HAL_HCD_IRQHandler+0x15a>
 80015ac:	2300      	movs	r3, #0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d012      	beq.n	80015d8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	699a      	ldr	r2, [r3, #24]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0210 	bic.w	r2, r2, #16
 80015c0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f001 f906 	bl	80027d4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	699a      	ldr	r2, [r3, #24]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0210 	orr.w	r2, r2, #16
 80015d6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f002 f829 	bl	8003634 <USB_ReadInterrupts>
 80015e2:	4603      	mov	r3, r0
 80015e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015ec:	d13a      	bne.n	8001664 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f002 fc3c 	bl	8003e70 <USB_HC_ReadInterrupt>
 80015f8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	e025      	b.n	800164c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	fa22 f303 	lsr.w	r3, r2, r3
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b00      	cmp	r3, #0
 8001612:	d018      	beq.n	8001646 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	015a      	lsls	r2, r3, #5
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4413      	add	r3, r2
 800161c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800162a:	d106      	bne.n	800163a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	4619      	mov	r1, r3
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f8ab 	bl	800178e <HCD_HC_IN_IRQHandler>
 8001638:	e005      	b.n	8001646 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	4619      	mov	r1, r3
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 fcc6 	bl	8001fd2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	429a      	cmp	r2, r3
 8001654:	d3d4      	bcc.n	8001600 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800165e:	615a      	str	r2, [r3, #20]
 8001660:	e000      	b.n	8001664 <HAL_HCD_IRQHandler+0x210>
      return;
 8001662:	bf00      	nop
    }
  }
}
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001678:	2b01      	cmp	r3, #1
 800167a:	d101      	bne.n	8001680 <HAL_HCD_Start+0x16>
 800167c:	2302      	movs	r3, #2
 800167e:	e013      	b.n	80016a8 <HAL_HCD_Start+0x3e>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2101      	movs	r1, #1
 800168e:	4618      	mov	r0, r3
 8001690:	f002 f93c 	bl	800390c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f001 fe82 	bl	80033a2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_HCD_Stop+0x16>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e00d      	b.n	80016e2 <HAL_HCD_Stop+0x32>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f002 fd36 	bl	8004144 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f002 f8de 	bl	80038b8 <USB_ResetPort>
 80016fc:	4603      	mov	r3, r0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	460b      	mov	r3, r1
 8001710:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001712:	78fb      	ldrb	r3, [r7, #3]
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	212c      	movs	r1, #44	; 0x2c
 8001718:	fb01 f303 	mul.w	r3, r1, r3
 800171c:	4413      	add	r3, r2
 800171e:	3360      	adds	r3, #96	; 0x60
 8001720:	781b      	ldrb	r3, [r3, #0]
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	460b      	mov	r3, r1
 8001738:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800173a:	78fb      	ldrb	r3, [r7, #3]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	212c      	movs	r1, #44	; 0x2c
 8001740:	fb01 f303 	mul.w	r3, r1, r3
 8001744:	4413      	add	r3, r2
 8001746:	3350      	adds	r3, #80	; 0x50
 8001748:	681b      	ldr	r3, [r3, #0]
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f002 f922 	bl	80039ac <USB_GetCurrentFrame>
 8001768:	4603      	mov	r3, r0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f002 f8fd 	bl	800397e <USB_GetHostSpeed>
 8001784:	4603      	mov	r3, r0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b086      	sub	sp, #24
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	015a      	lsls	r2, r3, #5
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4413      	add	r3, r2
 80017b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d119      	bne.n	80017f2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	015a      	lsls	r2, r3, #5
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4413      	add	r3, r2
 80017c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017ca:	461a      	mov	r2, r3
 80017cc:	2304      	movs	r3, #4
 80017ce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	015a      	lsls	r2, r3, #5
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	4413      	add	r3, r2
 80017d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	0151      	lsls	r1, r2, #5
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	440a      	add	r2, r1
 80017e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017ea:	f043 0302 	orr.w	r3, r3, #2
 80017ee:	60d3      	str	r3, [r2, #12]
 80017f0:	e101      	b.n	80019f6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	015a      	lsls	r2, r3, #5
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4413      	add	r3, r2
 80017fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001808:	d12b      	bne.n	8001862 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	015a      	lsls	r2, r3, #5
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4413      	add	r3, r2
 8001812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001816:	461a      	mov	r2, r3
 8001818:	f44f 7380 	mov.w	r3, #256	; 0x100
 800181c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	212c      	movs	r1, #44	; 0x2c
 8001824:	fb01 f303 	mul.w	r3, r1, r3
 8001828:	4413      	add	r3, r2
 800182a:	3361      	adds	r3, #97	; 0x61
 800182c:	2207      	movs	r2, #7
 800182e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	015a      	lsls	r2, r3, #5
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4413      	add	r3, r2
 8001838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	0151      	lsls	r1, r2, #5
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	440a      	add	r2, r1
 8001846:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800184a:	f043 0302 	orr.w	r3, r3, #2
 800184e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	4611      	mov	r1, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f002 fb19 	bl	8003e92 <USB_HC_Halt>
 8001860:	e0c9      	b.n	80019f6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	015a      	lsls	r2, r3, #5
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4413      	add	r3, r2
 800186a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 0320 	and.w	r3, r3, #32
 8001874:	2b20      	cmp	r3, #32
 8001876:	d109      	bne.n	800188c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	015a      	lsls	r2, r3, #5
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	4413      	add	r3, r2
 8001880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001884:	461a      	mov	r2, r3
 8001886:	2320      	movs	r3, #32
 8001888:	6093      	str	r3, [r2, #8]
 800188a:	e0b4      	b.n	80019f6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	015a      	lsls	r2, r3, #5
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4413      	add	r3, r2
 8001894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d133      	bne.n	800190a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	015a      	lsls	r2, r3, #5
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	4413      	add	r3, r2
 80018aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	0151      	lsls	r1, r2, #5
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	440a      	add	r2, r1
 80018b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	212c      	movs	r1, #44	; 0x2c
 80018c8:	fb01 f303 	mul.w	r3, r1, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	3361      	adds	r3, #97	; 0x61
 80018d0:	2205      	movs	r2, #5
 80018d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	015a      	lsls	r2, r3, #5
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4413      	add	r3, r2
 80018dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018e0:	461a      	mov	r2, r3
 80018e2:	2310      	movs	r3, #16
 80018e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	015a      	lsls	r2, r3, #5
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4413      	add	r3, r2
 80018ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018f2:	461a      	mov	r2, r3
 80018f4:	2308      	movs	r3, #8
 80018f6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	4611      	mov	r1, r2
 8001902:	4618      	mov	r0, r3
 8001904:	f002 fac5 	bl	8003e92 <USB_HC_Halt>
 8001908:	e075      	b.n	80019f6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	015a      	lsls	r2, r3, #5
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4413      	add	r3, r2
 8001912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001920:	d134      	bne.n	800198c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	015a      	lsls	r2, r3, #5
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4413      	add	r3, r2
 800192a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	0151      	lsls	r1, r2, #5
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	440a      	add	r2, r1
 8001938:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	212c      	movs	r1, #44	; 0x2c
 8001948:	fb01 f303 	mul.w	r3, r1, r3
 800194c:	4413      	add	r3, r2
 800194e:	3361      	adds	r3, #97	; 0x61
 8001950:	2208      	movs	r2, #8
 8001952:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	015a      	lsls	r2, r3, #5
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4413      	add	r3, r2
 800195c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001960:	461a      	mov	r2, r3
 8001962:	2310      	movs	r3, #16
 8001964:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	015a      	lsls	r2, r3, #5
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4413      	add	r3, r2
 800196e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001972:	461a      	mov	r2, r3
 8001974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001978:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f002 fa84 	bl	8003e92 <USB_HC_Halt>
 800198a:	e034      	b.n	80019f6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	015a      	lsls	r2, r3, #5
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4413      	add	r3, r2
 8001994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199e:	2b80      	cmp	r3, #128	; 0x80
 80019a0:	d129      	bne.n	80019f6 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	015a      	lsls	r2, r3, #5
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4413      	add	r3, r2
 80019aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	0151      	lsls	r1, r2, #5
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	440a      	add	r2, r1
 80019b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	212c      	movs	r1, #44	; 0x2c
 80019c8:	fb01 f303 	mul.w	r3, r1, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	3361      	adds	r3, #97	; 0x61
 80019d0:	2206      	movs	r2, #6
 80019d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	4611      	mov	r1, r2
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 fa57 	bl	8003e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	015a      	lsls	r2, r3, #5
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4413      	add	r3, r2
 80019ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019f0:	461a      	mov	r2, r3
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	015a      	lsls	r2, r3, #5
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4413      	add	r3, r2
 80019fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a0c:	d122      	bne.n	8001a54 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	015a      	lsls	r2, r3, #5
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	4413      	add	r3, r2
 8001a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	0151      	lsls	r1, r2, #5
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	440a      	add	r2, r1
 8001a24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a28:	f043 0302 	orr.w	r3, r3, #2
 8001a2c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	4611      	mov	r1, r2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f002 fa2a 	bl	8003e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	015a      	lsls	r2, r3, #5
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4413      	add	r3, r2
 8001a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a50:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001a52:	e2ba      	b.n	8001fca <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	015a      	lsls	r2, r3, #5
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	f040 811b 	bne.w	8001ca2 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d019      	beq.n	8001aa8 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	212c      	movs	r1, #44	; 0x2c
 8001a7a:	fb01 f303 	mul.w	r3, r1, r3
 8001a7e:	4413      	add	r3, r2
 8001a80:	3348      	adds	r3, #72	; 0x48
 8001a82:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	0159      	lsls	r1, r3, #5
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001a96:	1ad2      	subs	r2, r2, r3
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	202c      	movs	r0, #44	; 0x2c
 8001a9e:	fb00 f303 	mul.w	r3, r0, r3
 8001aa2:	440b      	add	r3, r1
 8001aa4:	3350      	adds	r3, #80	; 0x50
 8001aa6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	212c      	movs	r1, #44	; 0x2c
 8001aae:	fb01 f303 	mul.w	r3, r1, r3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3361      	adds	r3, #97	; 0x61
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	212c      	movs	r1, #44	; 0x2c
 8001ac0:	fb01 f303 	mul.w	r3, r1, r3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	335c      	adds	r3, #92	; 0x5c
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	015a      	lsls	r2, r3, #5
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ad8:	461a      	mov	r2, r3
 8001ada:	2301      	movs	r3, #1
 8001adc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	212c      	movs	r1, #44	; 0x2c
 8001ae4:	fb01 f303 	mul.w	r3, r1, r3
 8001ae8:	4413      	add	r3, r2
 8001aea:	333f      	adds	r3, #63	; 0x3f
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d009      	beq.n	8001b06 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	212c      	movs	r1, #44	; 0x2c
 8001af8:	fb01 f303 	mul.w	r3, r1, r3
 8001afc:	4413      	add	r3, r2
 8001afe:	333f      	adds	r3, #63	; 0x3f
 8001b00:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d121      	bne.n	8001b4a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	015a      	lsls	r2, r3, #5
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	0151      	lsls	r1, r2, #5
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	440a      	add	r2, r1
 8001b1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f002 f9ae 	bl	8003e92 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	015a      	lsls	r2, r3, #5
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b42:	461a      	mov	r2, r3
 8001b44:	2310      	movs	r3, #16
 8001b46:	6093      	str	r3, [r2, #8]
 8001b48:	e066      	b.n	8001c18 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	212c      	movs	r1, #44	; 0x2c
 8001b50:	fb01 f303 	mul.w	r3, r1, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	333f      	adds	r3, #63	; 0x3f
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d127      	bne.n	8001bae <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	015a      	lsls	r2, r3, #5
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4413      	add	r3, r2
 8001b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	0151      	lsls	r1, r2, #5
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	440a      	add	r2, r1
 8001b74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b7c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	212c      	movs	r1, #44	; 0x2c
 8001b84:	fb01 f303 	mul.w	r3, r1, r3
 8001b88:	4413      	add	r3, r2
 8001b8a:	3360      	adds	r3, #96	; 0x60
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	b2d9      	uxtb	r1, r3
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	202c      	movs	r0, #44	; 0x2c
 8001b9a:	fb00 f303 	mul.w	r3, r0, r3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3360      	adds	r3, #96	; 0x60
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f004 fb30 	bl	800620c <HAL_HCD_HC_NotifyURBChange_Callback>
 8001bac:	e034      	b.n	8001c18 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	212c      	movs	r1, #44	; 0x2c
 8001bb4:	fb01 f303 	mul.w	r3, r1, r3
 8001bb8:	4413      	add	r3, r2
 8001bba:	333f      	adds	r3, #63	; 0x3f
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d12a      	bne.n	8001c18 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	212c      	movs	r1, #44	; 0x2c
 8001bc8:	fb01 f303 	mul.w	r3, r1, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	3360      	adds	r3, #96	; 0x60
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	212c      	movs	r1, #44	; 0x2c
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	3354      	adds	r3, #84	; 0x54
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	f083 0301 	eor.w	r3, r3, #1
 8001be8:	b2d8      	uxtb	r0, r3
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	212c      	movs	r1, #44	; 0x2c
 8001bf0:	fb01 f303 	mul.w	r3, r1, r3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3354      	adds	r3, #84	; 0x54
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	b2d9      	uxtb	r1, r3
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	202c      	movs	r0, #44	; 0x2c
 8001c06:	fb00 f303 	mul.w	r3, r0, r3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3360      	adds	r3, #96	; 0x60
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f004 fafa 	bl	800620c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d12b      	bne.n	8001c78 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	212c      	movs	r1, #44	; 0x2c
 8001c26:	fb01 f303 	mul.w	r3, r1, r3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3348      	adds	r3, #72	; 0x48
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	202c      	movs	r0, #44	; 0x2c
 8001c36:	fb00 f202 	mul.w	r2, r0, r2
 8001c3a:	440a      	add	r2, r1
 8001c3c:	3240      	adds	r2, #64	; 0x40
 8001c3e:	8812      	ldrh	r2, [r2, #0]
 8001c40:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 81be 	beq.w	8001fca <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	212c      	movs	r1, #44	; 0x2c
 8001c54:	fb01 f303 	mul.w	r3, r1, r3
 8001c58:	4413      	add	r3, r2
 8001c5a:	3354      	adds	r3, #84	; 0x54
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	f083 0301 	eor.w	r3, r3, #1
 8001c62:	b2d8      	uxtb	r0, r3
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	212c      	movs	r1, #44	; 0x2c
 8001c6a:	fb01 f303 	mul.w	r3, r1, r3
 8001c6e:	4413      	add	r3, r2
 8001c70:	3354      	adds	r3, #84	; 0x54
 8001c72:	4602      	mov	r2, r0
 8001c74:	701a      	strb	r2, [r3, #0]
}
 8001c76:	e1a8      	b.n	8001fca <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	212c      	movs	r1, #44	; 0x2c
 8001c7e:	fb01 f303 	mul.w	r3, r1, r3
 8001c82:	4413      	add	r3, r2
 8001c84:	3354      	adds	r3, #84	; 0x54
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	f083 0301 	eor.w	r3, r3, #1
 8001c8c:	b2d8      	uxtb	r0, r3
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	212c      	movs	r1, #44	; 0x2c
 8001c94:	fb01 f303 	mul.w	r3, r1, r3
 8001c98:	4413      	add	r3, r2
 8001c9a:	3354      	adds	r3, #84	; 0x54
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	701a      	strb	r2, [r3, #0]
}
 8001ca0:	e193      	b.n	8001fca <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	015a      	lsls	r2, r3, #5
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4413      	add	r3, r2
 8001caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	f040 8106 	bne.w	8001ec6 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	015a      	lsls	r2, r3, #5
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	0151      	lsls	r1, r2, #5
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	440a      	add	r2, r1
 8001cd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cd4:	f023 0302 	bic.w	r3, r3, #2
 8001cd8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	212c      	movs	r1, #44	; 0x2c
 8001ce0:	fb01 f303 	mul.w	r3, r1, r3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3361      	adds	r3, #97	; 0x61
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d109      	bne.n	8001d02 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	212c      	movs	r1, #44	; 0x2c
 8001cf4:	fb01 f303 	mul.w	r3, r1, r3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3360      	adds	r3, #96	; 0x60
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	701a      	strb	r2, [r3, #0]
 8001d00:	e0c9      	b.n	8001e96 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	212c      	movs	r1, #44	; 0x2c
 8001d08:	fb01 f303 	mul.w	r3, r1, r3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3361      	adds	r3, #97	; 0x61
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b05      	cmp	r3, #5
 8001d14:	d109      	bne.n	8001d2a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	212c      	movs	r1, #44	; 0x2c
 8001d1c:	fb01 f303 	mul.w	r3, r1, r3
 8001d20:	4413      	add	r3, r2
 8001d22:	3360      	adds	r3, #96	; 0x60
 8001d24:	2205      	movs	r2, #5
 8001d26:	701a      	strb	r2, [r3, #0]
 8001d28:	e0b5      	b.n	8001e96 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	212c      	movs	r1, #44	; 0x2c
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	4413      	add	r3, r2
 8001d36:	3361      	adds	r3, #97	; 0x61
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	d009      	beq.n	8001d52 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	212c      	movs	r1, #44	; 0x2c
 8001d44:	fb01 f303 	mul.w	r3, r1, r3
 8001d48:	4413      	add	r3, r2
 8001d4a:	3361      	adds	r3, #97	; 0x61
 8001d4c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d150      	bne.n	8001df4 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	212c      	movs	r1, #44	; 0x2c
 8001d58:	fb01 f303 	mul.w	r3, r1, r3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	335c      	adds	r3, #92	; 0x5c
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	202c      	movs	r0, #44	; 0x2c
 8001d6a:	fb00 f303 	mul.w	r3, r0, r3
 8001d6e:	440b      	add	r3, r1
 8001d70:	335c      	adds	r3, #92	; 0x5c
 8001d72:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	212c      	movs	r1, #44	; 0x2c
 8001d7a:	fb01 f303 	mul.w	r3, r1, r3
 8001d7e:	4413      	add	r3, r2
 8001d80:	335c      	adds	r3, #92	; 0x5c
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d912      	bls.n	8001dae <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	212c      	movs	r1, #44	; 0x2c
 8001d8e:	fb01 f303 	mul.w	r3, r1, r3
 8001d92:	4413      	add	r3, r2
 8001d94:	335c      	adds	r3, #92	; 0x5c
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	212c      	movs	r1, #44	; 0x2c
 8001da0:	fb01 f303 	mul.w	r3, r1, r3
 8001da4:	4413      	add	r3, r2
 8001da6:	3360      	adds	r3, #96	; 0x60
 8001da8:	2204      	movs	r2, #4
 8001daa:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001dac:	e073      	b.n	8001e96 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	212c      	movs	r1, #44	; 0x2c
 8001db4:	fb01 f303 	mul.w	r3, r1, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	3360      	adds	r3, #96	; 0x60
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	015a      	lsls	r2, r3, #5
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001dd6:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001dde:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	015a      	lsls	r2, r3, #5
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4413      	add	r3, r2
 8001de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dec:	461a      	mov	r2, r3
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001df2:	e050      	b.n	8001e96 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	212c      	movs	r1, #44	; 0x2c
 8001dfa:	fb01 f303 	mul.w	r3, r1, r3
 8001dfe:	4413      	add	r3, r2
 8001e00:	3361      	adds	r3, #97	; 0x61
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d122      	bne.n	8001e4e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	212c      	movs	r1, #44	; 0x2c
 8001e0e:	fb01 f303 	mul.w	r3, r1, r3
 8001e12:	4413      	add	r3, r2
 8001e14:	3360      	adds	r3, #96	; 0x60
 8001e16:	2202      	movs	r2, #2
 8001e18:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	015a      	lsls	r2, r3, #5
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e30:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e38:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	015a      	lsls	r2, r3, #5
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4413      	add	r3, r2
 8001e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e46:	461a      	mov	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	e023      	b.n	8001e96 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	212c      	movs	r1, #44	; 0x2c
 8001e54:	fb01 f303 	mul.w	r3, r1, r3
 8001e58:	4413      	add	r3, r2
 8001e5a:	3361      	adds	r3, #97	; 0x61
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b07      	cmp	r3, #7
 8001e60:	d119      	bne.n	8001e96 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	212c      	movs	r1, #44	; 0x2c
 8001e68:	fb01 f303 	mul.w	r3, r1, r3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	335c      	adds	r3, #92	; 0x5c
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	202c      	movs	r0, #44	; 0x2c
 8001e7a:	fb00 f303 	mul.w	r3, r0, r3
 8001e7e:	440b      	add	r3, r1
 8001e80:	335c      	adds	r3, #92	; 0x5c
 8001e82:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	212c      	movs	r1, #44	; 0x2c
 8001e8a:	fb01 f303 	mul.w	r3, r1, r3
 8001e8e:	4413      	add	r3, r2
 8001e90:	3360      	adds	r3, #96	; 0x60
 8001e92:	2204      	movs	r2, #4
 8001e94:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	015a      	lsls	r2, r3, #5
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	b2d9      	uxtb	r1, r3
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	202c      	movs	r0, #44	; 0x2c
 8001eb2:	fb00 f303 	mul.w	r3, r0, r3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3360      	adds	r3, #96	; 0x60
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f004 f9a4 	bl	800620c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001ec4:	e081      	b.n	8001fca <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	015a      	lsls	r2, r3, #5
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4413      	add	r3, r2
 8001ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b10      	cmp	r3, #16
 8001eda:	d176      	bne.n	8001fca <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	212c      	movs	r1, #44	; 0x2c
 8001ee2:	fb01 f303 	mul.w	r3, r1, r3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	333f      	adds	r3, #63	; 0x3f
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d121      	bne.n	8001f34 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	212c      	movs	r1, #44	; 0x2c
 8001ef6:	fb01 f303 	mul.w	r3, r1, r3
 8001efa:	4413      	add	r3, r2
 8001efc:	335c      	adds	r3, #92	; 0x5c
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	015a      	lsls	r2, r3, #5
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4413      	add	r3, r2
 8001f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	0151      	lsls	r1, r2, #5
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	440a      	add	r2, r1
 8001f18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f001 ffb0 	bl	8003e92 <USB_HC_Halt>
 8001f32:	e041      	b.n	8001fb8 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	212c      	movs	r1, #44	; 0x2c
 8001f3a:	fb01 f303 	mul.w	r3, r1, r3
 8001f3e:	4413      	add	r3, r2
 8001f40:	333f      	adds	r3, #63	; 0x3f
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d009      	beq.n	8001f5c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	212c      	movs	r1, #44	; 0x2c
 8001f4e:	fb01 f303 	mul.w	r3, r1, r3
 8001f52:	4413      	add	r3, r2
 8001f54:	333f      	adds	r3, #63	; 0x3f
 8001f56:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d12d      	bne.n	8001fb8 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	212c      	movs	r1, #44	; 0x2c
 8001f62:	fb01 f303 	mul.w	r3, r1, r3
 8001f66:	4413      	add	r3, r2
 8001f68:	335c      	adds	r3, #92	; 0x5c
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d120      	bne.n	8001fb8 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	212c      	movs	r1, #44	; 0x2c
 8001f7c:	fb01 f303 	mul.w	r3, r1, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	3361      	adds	r3, #97	; 0x61
 8001f84:	2203      	movs	r2, #3
 8001f86:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	0151      	lsls	r1, r2, #5
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	440a      	add	r2, r1
 8001f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fa2:	f043 0302 	orr.w	r3, r3, #2
 8001fa6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f001 ff6d 	bl	8003e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	015a      	lsls	r2, r3, #5
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	2310      	movs	r3, #16
 8001fc8:	6093      	str	r3, [r2, #8]
}
 8001fca:	bf00      	nop
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b088      	sub	sp, #32
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d119      	bne.n	8002036 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	015a      	lsls	r2, r3, #5
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	4413      	add	r3, r2
 800200a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200e:	461a      	mov	r2, r3
 8002010:	2304      	movs	r3, #4
 8002012:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	4413      	add	r3, r2
 800201c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	0151      	lsls	r1, r2, #5
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	440a      	add	r2, r1
 800202a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800202e:	f043 0302 	orr.w	r3, r3, #2
 8002032:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002034:	e3ca      	b.n	80027cc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	015a      	lsls	r2, r3, #5
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	4413      	add	r3, r2
 800203e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 0320 	and.w	r3, r3, #32
 8002048:	2b20      	cmp	r3, #32
 800204a:	d13e      	bne.n	80020ca <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	015a      	lsls	r2, r3, #5
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	4413      	add	r3, r2
 8002054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002058:	461a      	mov	r2, r3
 800205a:	2320      	movs	r3, #32
 800205c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	212c      	movs	r1, #44	; 0x2c
 8002064:	fb01 f303 	mul.w	r3, r1, r3
 8002068:	4413      	add	r3, r2
 800206a:	333d      	adds	r3, #61	; 0x3d
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b01      	cmp	r3, #1
 8002070:	f040 83ac 	bne.w	80027cc <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	212c      	movs	r1, #44	; 0x2c
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	4413      	add	r3, r2
 8002080:	333d      	adds	r3, #61	; 0x3d
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	212c      	movs	r1, #44	; 0x2c
 800208c:	fb01 f303 	mul.w	r3, r1, r3
 8002090:	4413      	add	r3, r2
 8002092:	3360      	adds	r3, #96	; 0x60
 8002094:	2202      	movs	r2, #2
 8002096:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	015a      	lsls	r2, r3, #5
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	4413      	add	r3, r2
 80020a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	0151      	lsls	r1, r2, #5
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	440a      	add	r2, r1
 80020ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020b2:	f043 0302 	orr.w	r3, r3, #2
 80020b6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	4611      	mov	r1, r2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f001 fee5 	bl	8003e92 <USB_HC_Halt>
}
 80020c8:	e380      	b.n	80027cc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	015a      	lsls	r2, r3, #5
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020e0:	d122      	bne.n	8002128 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	015a      	lsls	r2, r3, #5
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	0151      	lsls	r1, r2, #5
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	440a      	add	r2, r1
 80020f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020fc:	f043 0302 	orr.w	r3, r3, #2
 8002100:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f001 fec0 	bl	8003e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	4413      	add	r3, r2
 800211a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211e:	461a      	mov	r2, r3
 8002120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002124:	6093      	str	r3, [r2, #8]
}
 8002126:	e351      	b.n	80027cc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	015a      	lsls	r2, r3, #5
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	4413      	add	r3, r2
 8002130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b01      	cmp	r3, #1
 800213c:	d150      	bne.n	80021e0 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	212c      	movs	r1, #44	; 0x2c
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	4413      	add	r3, r2
 800214a:	335c      	adds	r3, #92	; 0x5c
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	015a      	lsls	r2, r3, #5
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	4413      	add	r3, r2
 8002158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002162:	2b40      	cmp	r3, #64	; 0x40
 8002164:	d111      	bne.n	800218a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	212c      	movs	r1, #44	; 0x2c
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	4413      	add	r3, r2
 8002172:	333d      	adds	r3, #61	; 0x3d
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	4413      	add	r3, r2
 8002180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002184:	461a      	mov	r2, r3
 8002186:	2340      	movs	r3, #64	; 0x40
 8002188:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	4413      	add	r3, r2
 8002192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	0151      	lsls	r1, r2, #5
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	440a      	add	r2, r1
 80021a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021a4:	f043 0302 	orr.w	r3, r3, #2
 80021a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f001 fe6c 	bl	8003e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c6:	461a      	mov	r2, r3
 80021c8:	2301      	movs	r3, #1
 80021ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	212c      	movs	r1, #44	; 0x2c
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	4413      	add	r3, r2
 80021d8:	3361      	adds	r3, #97	; 0x61
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
}
 80021de:	e2f5      	b.n	80027cc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	015a      	lsls	r2, r3, #5
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	4413      	add	r3, r2
 80021e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f2:	2b40      	cmp	r3, #64	; 0x40
 80021f4:	d13c      	bne.n	8002270 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	212c      	movs	r1, #44	; 0x2c
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	4413      	add	r3, r2
 8002202:	3361      	adds	r3, #97	; 0x61
 8002204:	2204      	movs	r2, #4
 8002206:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	212c      	movs	r1, #44	; 0x2c
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	4413      	add	r3, r2
 8002214:	333d      	adds	r3, #61	; 0x3d
 8002216:	2201      	movs	r2, #1
 8002218:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	212c      	movs	r1, #44	; 0x2c
 8002220:	fb01 f303 	mul.w	r3, r1, r3
 8002224:	4413      	add	r3, r2
 8002226:	335c      	adds	r3, #92	; 0x5c
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	4413      	add	r3, r2
 8002234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	0151      	lsls	r1, r2, #5
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	440a      	add	r2, r1
 8002242:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002246:	f043 0302 	orr.w	r3, r3, #2
 800224a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	4611      	mov	r1, r2
 8002256:	4618      	mov	r0, r3
 8002258:	f001 fe1b 	bl	8003e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	4413      	add	r3, r2
 8002264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002268:	461a      	mov	r2, r3
 800226a:	2340      	movs	r3, #64	; 0x40
 800226c:	6093      	str	r3, [r2, #8]
}
 800226e:	e2ad      	b.n	80027cc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	4413      	add	r3, r2
 8002278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b08      	cmp	r3, #8
 8002284:	d12a      	bne.n	80022dc <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	4413      	add	r3, r2
 800228e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002292:	461a      	mov	r2, r3
 8002294:	2308      	movs	r3, #8
 8002296:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	0151      	lsls	r1, r2, #5
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	440a      	add	r2, r1
 80022ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022b2:	f043 0302 	orr.w	r3, r3, #2
 80022b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	4611      	mov	r1, r2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f001 fde5 	bl	8003e92 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	212c      	movs	r1, #44	; 0x2c
 80022ce:	fb01 f303 	mul.w	r3, r1, r3
 80022d2:	4413      	add	r3, r2
 80022d4:	3361      	adds	r3, #97	; 0x61
 80022d6:	2205      	movs	r2, #5
 80022d8:	701a      	strb	r2, [r3, #0]
}
 80022da:	e277      	b.n	80027cc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	015a      	lsls	r2, r3, #5
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 0310 	and.w	r3, r3, #16
 80022ee:	2b10      	cmp	r3, #16
 80022f0:	d150      	bne.n	8002394 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	212c      	movs	r1, #44	; 0x2c
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	335c      	adds	r3, #92	; 0x5c
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	212c      	movs	r1, #44	; 0x2c
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	4413      	add	r3, r2
 8002310:	3361      	adds	r3, #97	; 0x61
 8002312:	2203      	movs	r2, #3
 8002314:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	212c      	movs	r1, #44	; 0x2c
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	4413      	add	r3, r2
 8002322:	333d      	adds	r3, #61	; 0x3d
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d112      	bne.n	8002350 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	212c      	movs	r1, #44	; 0x2c
 8002330:	fb01 f303 	mul.w	r3, r1, r3
 8002334:	4413      	add	r3, r2
 8002336:	333c      	adds	r3, #60	; 0x3c
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d108      	bne.n	8002350 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	212c      	movs	r1, #44	; 0x2c
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	4413      	add	r3, r2
 800234a:	333d      	adds	r3, #61	; 0x3d
 800234c:	2201      	movs	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	4413      	add	r3, r2
 8002358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	0151      	lsls	r1, r2, #5
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	440a      	add	r2, r1
 8002366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800236a:	f043 0302 	orr.w	r3, r3, #2
 800236e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	4611      	mov	r1, r2
 800237a:	4618      	mov	r0, r3
 800237c:	f001 fd89 	bl	8003e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	4413      	add	r3, r2
 8002388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238c:	461a      	mov	r2, r3
 800238e:	2310      	movs	r3, #16
 8002390:	6093      	str	r3, [r2, #8]
}
 8002392:	e21b      	b.n	80027cc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	4413      	add	r3, r2
 800239c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a6:	2b80      	cmp	r3, #128	; 0x80
 80023a8:	d174      	bne.n	8002494 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d121      	bne.n	80023f6 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	212c      	movs	r1, #44	; 0x2c
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	4413      	add	r3, r2
 80023be:	3361      	adds	r3, #97	; 0x61
 80023c0:	2206      	movs	r2, #6
 80023c2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	0151      	lsls	r1, r2, #5
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	440a      	add	r2, r1
 80023da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023de:	f043 0302 	orr.w	r3, r3, #2
 80023e2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	4611      	mov	r1, r2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f001 fd4f 	bl	8003e92 <USB_HC_Halt>
 80023f4:	e044      	b.n	8002480 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	212c      	movs	r1, #44	; 0x2c
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	4413      	add	r3, r2
 8002402:	335c      	adds	r3, #92	; 0x5c
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	202c      	movs	r0, #44	; 0x2c
 800240e:	fb00 f303 	mul.w	r3, r0, r3
 8002412:	440b      	add	r3, r1
 8002414:	335c      	adds	r3, #92	; 0x5c
 8002416:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	212c      	movs	r1, #44	; 0x2c
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	4413      	add	r3, r2
 8002424:	335c      	adds	r3, #92	; 0x5c
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d920      	bls.n	800246e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	212c      	movs	r1, #44	; 0x2c
 8002432:	fb01 f303 	mul.w	r3, r1, r3
 8002436:	4413      	add	r3, r2
 8002438:	335c      	adds	r3, #92	; 0x5c
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	212c      	movs	r1, #44	; 0x2c
 8002444:	fb01 f303 	mul.w	r3, r1, r3
 8002448:	4413      	add	r3, r2
 800244a:	3360      	adds	r3, #96	; 0x60
 800244c:	2204      	movs	r2, #4
 800244e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	b2d9      	uxtb	r1, r3
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	202c      	movs	r0, #44	; 0x2c
 800245a:	fb00 f303 	mul.w	r3, r0, r3
 800245e:	4413      	add	r3, r2
 8002460:	3360      	adds	r3, #96	; 0x60
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f003 fed0 	bl	800620c <HAL_HCD_HC_NotifyURBChange_Callback>
 800246c:	e008      	b.n	8002480 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	212c      	movs	r1, #44	; 0x2c
 8002474:	fb01 f303 	mul.w	r3, r1, r3
 8002478:	4413      	add	r3, r2
 800247a:	3360      	adds	r3, #96	; 0x60
 800247c:	2202      	movs	r2, #2
 800247e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	4413      	add	r3, r2
 8002488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248c:	461a      	mov	r2, r3
 800248e:	2380      	movs	r3, #128	; 0x80
 8002490:	6093      	str	r3, [r2, #8]
}
 8002492:	e19b      	b.n	80027cc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	4413      	add	r3, r2
 800249c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024aa:	d134      	bne.n	8002516 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	0151      	lsls	r1, r2, #5
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	440a      	add	r2, r1
 80024c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024c6:	f043 0302 	orr.w	r3, r3, #2
 80024ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	4611      	mov	r1, r2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f001 fcdb 	bl	8003e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e8:	461a      	mov	r2, r3
 80024ea:	2310      	movs	r3, #16
 80024ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fa:	461a      	mov	r2, r3
 80024fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002500:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	212c      	movs	r1, #44	; 0x2c
 8002508:	fb01 f303 	mul.w	r3, r1, r3
 800250c:	4413      	add	r3, r2
 800250e:	3361      	adds	r3, #97	; 0x61
 8002510:	2208      	movs	r2, #8
 8002512:	701a      	strb	r2, [r3, #0]
}
 8002514:	e15a      	b.n	80027cc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	015a      	lsls	r2, r3, #5
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	4413      	add	r3, r2
 800251e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b02      	cmp	r3, #2
 800252a:	f040 814f 	bne.w	80027cc <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	015a      	lsls	r2, r3, #5
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	4413      	add	r3, r2
 8002536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	0151      	lsls	r1, r2, #5
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	440a      	add	r2, r1
 8002544:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002548:	f023 0302 	bic.w	r3, r3, #2
 800254c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	212c      	movs	r1, #44	; 0x2c
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	4413      	add	r3, r2
 800255a:	3361      	adds	r3, #97	; 0x61
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d17d      	bne.n	800265e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	212c      	movs	r1, #44	; 0x2c
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	4413      	add	r3, r2
 800256e:	3360      	adds	r3, #96	; 0x60
 8002570:	2201      	movs	r2, #1
 8002572:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	212c      	movs	r1, #44	; 0x2c
 800257a:	fb01 f303 	mul.w	r3, r1, r3
 800257e:	4413      	add	r3, r2
 8002580:	333f      	adds	r3, #63	; 0x3f
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d00a      	beq.n	800259e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	212c      	movs	r1, #44	; 0x2c
 800258e:	fb01 f303 	mul.w	r3, r1, r3
 8002592:	4413      	add	r3, r2
 8002594:	333f      	adds	r3, #63	; 0x3f
 8002596:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002598:	2b03      	cmp	r3, #3
 800259a:	f040 8100 	bne.w	800279e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d113      	bne.n	80025ce <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	212c      	movs	r1, #44	; 0x2c
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	3355      	adds	r3, #85	; 0x55
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	f083 0301 	eor.w	r3, r3, #1
 80025ba:	b2d8      	uxtb	r0, r3
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	212c      	movs	r1, #44	; 0x2c
 80025c2:	fb01 f303 	mul.w	r3, r1, r3
 80025c6:	4413      	add	r3, r2
 80025c8:	3355      	adds	r3, #85	; 0x55
 80025ca:	4602      	mov	r2, r0
 80025cc:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	f040 80e3 	bne.w	800279e <HCD_HC_OUT_IRQHandler+0x7cc>
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	212c      	movs	r1, #44	; 0x2c
 80025de:	fb01 f303 	mul.w	r3, r1, r3
 80025e2:	4413      	add	r3, r2
 80025e4:	334c      	adds	r3, #76	; 0x4c
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80d8 	beq.w	800279e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	212c      	movs	r1, #44	; 0x2c
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	334c      	adds	r3, #76	; 0x4c
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	202c      	movs	r0, #44	; 0x2c
 8002604:	fb00 f202 	mul.w	r2, r0, r2
 8002608:	440a      	add	r2, r1
 800260a:	3240      	adds	r2, #64	; 0x40
 800260c:	8812      	ldrh	r2, [r2, #0]
 800260e:	4413      	add	r3, r2
 8002610:	3b01      	subs	r3, #1
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	202c      	movs	r0, #44	; 0x2c
 8002618:	fb00 f202 	mul.w	r2, r0, r2
 800261c:	440a      	add	r2, r1
 800261e:	3240      	adds	r2, #64	; 0x40
 8002620:	8812      	ldrh	r2, [r2, #0]
 8002622:	fbb3 f3f2 	udiv	r3, r3, r2
 8002626:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 80b5 	beq.w	800279e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	212c      	movs	r1, #44	; 0x2c
 800263a:	fb01 f303 	mul.w	r3, r1, r3
 800263e:	4413      	add	r3, r2
 8002640:	3355      	adds	r3, #85	; 0x55
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	f083 0301 	eor.w	r3, r3, #1
 8002648:	b2d8      	uxtb	r0, r3
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	212c      	movs	r1, #44	; 0x2c
 8002650:	fb01 f303 	mul.w	r3, r1, r3
 8002654:	4413      	add	r3, r2
 8002656:	3355      	adds	r3, #85	; 0x55
 8002658:	4602      	mov	r2, r0
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	e09f      	b.n	800279e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	212c      	movs	r1, #44	; 0x2c
 8002664:	fb01 f303 	mul.w	r3, r1, r3
 8002668:	4413      	add	r3, r2
 800266a:	3361      	adds	r3, #97	; 0x61
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b03      	cmp	r3, #3
 8002670:	d109      	bne.n	8002686 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	212c      	movs	r1, #44	; 0x2c
 8002678:	fb01 f303 	mul.w	r3, r1, r3
 800267c:	4413      	add	r3, r2
 800267e:	3360      	adds	r3, #96	; 0x60
 8002680:	2202      	movs	r2, #2
 8002682:	701a      	strb	r2, [r3, #0]
 8002684:	e08b      	b.n	800279e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	212c      	movs	r1, #44	; 0x2c
 800268c:	fb01 f303 	mul.w	r3, r1, r3
 8002690:	4413      	add	r3, r2
 8002692:	3361      	adds	r3, #97	; 0x61
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b04      	cmp	r3, #4
 8002698:	d109      	bne.n	80026ae <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	212c      	movs	r1, #44	; 0x2c
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	4413      	add	r3, r2
 80026a6:	3360      	adds	r3, #96	; 0x60
 80026a8:	2202      	movs	r2, #2
 80026aa:	701a      	strb	r2, [r3, #0]
 80026ac:	e077      	b.n	800279e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	212c      	movs	r1, #44	; 0x2c
 80026b4:	fb01 f303 	mul.w	r3, r1, r3
 80026b8:	4413      	add	r3, r2
 80026ba:	3361      	adds	r3, #97	; 0x61
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b05      	cmp	r3, #5
 80026c0:	d109      	bne.n	80026d6 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	212c      	movs	r1, #44	; 0x2c
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	3360      	adds	r3, #96	; 0x60
 80026d0:	2205      	movs	r2, #5
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	e063      	b.n	800279e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	212c      	movs	r1, #44	; 0x2c
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	3361      	adds	r3, #97	; 0x61
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b06      	cmp	r3, #6
 80026e8:	d009      	beq.n	80026fe <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	212c      	movs	r1, #44	; 0x2c
 80026f0:	fb01 f303 	mul.w	r3, r1, r3
 80026f4:	4413      	add	r3, r2
 80026f6:	3361      	adds	r3, #97	; 0x61
 80026f8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d14f      	bne.n	800279e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	212c      	movs	r1, #44	; 0x2c
 8002704:	fb01 f303 	mul.w	r3, r1, r3
 8002708:	4413      	add	r3, r2
 800270a:	335c      	adds	r3, #92	; 0x5c
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	202c      	movs	r0, #44	; 0x2c
 8002716:	fb00 f303 	mul.w	r3, r0, r3
 800271a:	440b      	add	r3, r1
 800271c:	335c      	adds	r3, #92	; 0x5c
 800271e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	212c      	movs	r1, #44	; 0x2c
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	4413      	add	r3, r2
 800272c:	335c      	adds	r3, #92	; 0x5c
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d912      	bls.n	800275a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	212c      	movs	r1, #44	; 0x2c
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	4413      	add	r3, r2
 8002740:	335c      	adds	r3, #92	; 0x5c
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	212c      	movs	r1, #44	; 0x2c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	3360      	adds	r3, #96	; 0x60
 8002754:	2204      	movs	r2, #4
 8002756:	701a      	strb	r2, [r3, #0]
 8002758:	e021      	b.n	800279e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	212c      	movs	r1, #44	; 0x2c
 8002760:	fb01 f303 	mul.w	r3, r1, r3
 8002764:	4413      	add	r3, r2
 8002766:	3360      	adds	r3, #96	; 0x60
 8002768:	2202      	movs	r2, #2
 800276a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002782:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800278a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	4413      	add	r3, r2
 8002794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002798:	461a      	mov	r2, r3
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	015a      	lsls	r2, r3, #5
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027aa:	461a      	mov	r2, r3
 80027ac:	2302      	movs	r3, #2
 80027ae:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	b2d9      	uxtb	r1, r3
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	202c      	movs	r0, #44	; 0x2c
 80027ba:	fb00 f303 	mul.w	r3, r0, r3
 80027be:	4413      	add	r3, r2
 80027c0:	3360      	adds	r3, #96	; 0x60
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f003 fd20 	bl	800620c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80027cc:	bf00      	nop
 80027ce:	3720      	adds	r7, #32
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08a      	sub	sp, #40	; 0x28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	f003 030f 	and.w	r3, r3, #15
 80027f4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	0c5b      	lsrs	r3, r3, #17
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	091b      	lsrs	r3, r3, #4
 8002804:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002808:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d004      	beq.n	800281a <HCD_RXQLVL_IRQHandler+0x46>
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2b05      	cmp	r3, #5
 8002814:	f000 80a9 	beq.w	800296a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002818:	e0aa      	b.n	8002970 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80a6 	beq.w	800296e <HCD_RXQLVL_IRQHandler+0x19a>
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	212c      	movs	r1, #44	; 0x2c
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	4413      	add	r3, r2
 800282e:	3344      	adds	r3, #68	; 0x44
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 809b 	beq.w	800296e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	212c      	movs	r1, #44	; 0x2c
 800283e:	fb01 f303 	mul.w	r3, r1, r3
 8002842:	4413      	add	r3, r2
 8002844:	3350      	adds	r3, #80	; 0x50
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	441a      	add	r2, r3
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	202c      	movs	r0, #44	; 0x2c
 8002852:	fb00 f303 	mul.w	r3, r0, r3
 8002856:	440b      	add	r3, r1
 8002858:	334c      	adds	r3, #76	; 0x4c
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d87a      	bhi.n	8002956 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	212c      	movs	r1, #44	; 0x2c
 800286a:	fb01 f303 	mul.w	r3, r1, r3
 800286e:	4413      	add	r3, r2
 8002870:	3344      	adds	r3, #68	; 0x44
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	b292      	uxth	r2, r2
 8002878:	4619      	mov	r1, r3
 800287a:	f000 fe83 	bl	8003584 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	212c      	movs	r1, #44	; 0x2c
 8002884:	fb01 f303 	mul.w	r3, r1, r3
 8002888:	4413      	add	r3, r2
 800288a:	3344      	adds	r3, #68	; 0x44
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	441a      	add	r2, r3
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	202c      	movs	r0, #44	; 0x2c
 8002898:	fb00 f303 	mul.w	r3, r0, r3
 800289c:	440b      	add	r3, r1
 800289e:	3344      	adds	r3, #68	; 0x44
 80028a0:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	212c      	movs	r1, #44	; 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	3350      	adds	r3, #80	; 0x50
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	441a      	add	r2, r3
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	202c      	movs	r0, #44	; 0x2c
 80028bc:	fb00 f303 	mul.w	r3, r0, r3
 80028c0:	440b      	add	r3, r1
 80028c2:	3350      	adds	r3, #80	; 0x50
 80028c4:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	0cdb      	lsrs	r3, r3, #19
 80028d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028da:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	212c      	movs	r1, #44	; 0x2c
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	3340      	adds	r3, #64	; 0x40
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	461a      	mov	r2, r3
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d13c      	bne.n	800296e <HCD_RXQLVL_IRQHandler+0x19a>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d039      	beq.n	800296e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	4413      	add	r3, r2
 8002902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002910:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002918:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	4413      	add	r3, r2
 8002922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002926:	461a      	mov	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	212c      	movs	r1, #44	; 0x2c
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	4413      	add	r3, r2
 8002938:	3354      	adds	r3, #84	; 0x54
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	f083 0301 	eor.w	r3, r3, #1
 8002940:	b2d8      	uxtb	r0, r3
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	212c      	movs	r1, #44	; 0x2c
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	4413      	add	r3, r2
 800294e:	3354      	adds	r3, #84	; 0x54
 8002950:	4602      	mov	r2, r0
 8002952:	701a      	strb	r2, [r3, #0]
      break;
 8002954:	e00b      	b.n	800296e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	212c      	movs	r1, #44	; 0x2c
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	4413      	add	r3, r2
 8002962:	3360      	adds	r3, #96	; 0x60
 8002964:	2204      	movs	r2, #4
 8002966:	701a      	strb	r2, [r3, #0]
      break;
 8002968:	e001      	b.n	800296e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800296a:	bf00      	nop
 800296c:	e000      	b.n	8002970 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800296e:	bf00      	nop
  }
}
 8002970:	bf00      	nop
 8002972:	3728      	adds	r7, #40	; 0x28
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80029a4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d10b      	bne.n	80029c8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d102      	bne.n	80029c0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f003 fc0a 	bl	80061d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f043 0302 	orr.w	r3, r3, #2
 80029c6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d132      	bne.n	8002a38 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	f043 0308 	orr.w	r3, r3, #8
 80029d8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	d126      	bne.n	8002a32 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d113      	bne.n	8002a14 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80029f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029f6:	d106      	bne.n	8002a06 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2102      	movs	r1, #2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 ff20 	bl	8003844 <USB_InitFSLSPClkSel>
 8002a04:	e011      	b.n	8002a2a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 ff19 	bl	8003844 <USB_InitFSLSPClkSel>
 8002a12:	e00a      	b.n	8002a2a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d106      	bne.n	8002a2a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a22:	461a      	mov	r2, r3
 8002a24:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002a28:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f003 fbfc 	bl	8006228 <HAL_HCD_PortEnabled_Callback>
 8002a30:	e002      	b.n	8002a38 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f003 fc06 	bl	8006244 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	2b20      	cmp	r3, #32
 8002a40:	d103      	bne.n	8002a4a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	f043 0320 	orr.w	r3, r3, #32
 8002a48:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a50:	461a      	mov	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	6013      	str	r3, [r2, #0]
}
 8002a56:	bf00      	nop
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e264      	b.n	8002f3c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d075      	beq.n	8002b6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a7e:	4ba3      	ldr	r3, [pc, #652]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 030c 	and.w	r3, r3, #12
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d00c      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a8a:	4ba0      	ldr	r3, [pc, #640]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d112      	bne.n	8002abc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a96:	4b9d      	ldr	r3, [pc, #628]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aa2:	d10b      	bne.n	8002abc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa4:	4b99      	ldr	r3, [pc, #612]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d05b      	beq.n	8002b68 <HAL_RCC_OscConfig+0x108>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d157      	bne.n	8002b68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e23f      	b.n	8002f3c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac4:	d106      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x74>
 8002ac6:	4b91      	ldr	r3, [pc, #580]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a90      	ldr	r2, [pc, #576]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	e01d      	b.n	8002b10 <HAL_RCC_OscConfig+0xb0>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x98>
 8002ade:	4b8b      	ldr	r3, [pc, #556]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a8a      	ldr	r2, [pc, #552]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	4b88      	ldr	r3, [pc, #544]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a87      	ldr	r2, [pc, #540]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	e00b      	b.n	8002b10 <HAL_RCC_OscConfig+0xb0>
 8002af8:	4b84      	ldr	r3, [pc, #528]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a83      	ldr	r2, [pc, #524]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	4b81      	ldr	r3, [pc, #516]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a80      	ldr	r2, [pc, #512]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d013      	beq.n	8002b40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7fd ff20 	bl	800095c <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b20:	f7fd ff1c 	bl	800095c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	; 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e204      	b.n	8002f3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b32:	4b76      	ldr	r3, [pc, #472]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCC_OscConfig+0xc0>
 8002b3e:	e014      	b.n	8002b6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b40:	f7fd ff0c 	bl	800095c <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b48:	f7fd ff08 	bl	800095c <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	; 0x64
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e1f0      	b.n	8002f3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5a:	4b6c      	ldr	r3, [pc, #432]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0xe8>
 8002b66:	e000      	b.n	8002b6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d063      	beq.n	8002c3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b76:	4b65      	ldr	r3, [pc, #404]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00b      	beq.n	8002b9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b82:	4b62      	ldr	r3, [pc, #392]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d11c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b8e:	4b5f      	ldr	r3, [pc, #380]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d116      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9a:	4b5c      	ldr	r3, [pc, #368]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d005      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x152>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d001      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e1c4      	b.n	8002f3c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb2:	4b56      	ldr	r3, [pc, #344]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4952      	ldr	r1, [pc, #328]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc6:	e03a      	b.n	8002c3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d020      	beq.n	8002c12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd0:	4b4f      	ldr	r3, [pc, #316]	; (8002d10 <HAL_RCC_OscConfig+0x2b0>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd6:	f7fd fec1 	bl	800095c <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bde:	f7fd febd 	bl	800095c <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e1a5      	b.n	8002f3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf0:	4b46      	ldr	r3, [pc, #280]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0f0      	beq.n	8002bde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfc:	4b43      	ldr	r3, [pc, #268]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4940      	ldr	r1, [pc, #256]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	600b      	str	r3, [r1, #0]
 8002c10:	e015      	b.n	8002c3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c12:	4b3f      	ldr	r3, [pc, #252]	; (8002d10 <HAL_RCC_OscConfig+0x2b0>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7fd fea0 	bl	800095c <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c20:	f7fd fe9c 	bl	800095c <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e184      	b.n	8002f3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c32:	4b36      	ldr	r3, [pc, #216]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d030      	beq.n	8002cac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d016      	beq.n	8002c80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c52:	4b30      	ldr	r3, [pc, #192]	; (8002d14 <HAL_RCC_OscConfig+0x2b4>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c58:	f7fd fe80 	bl	800095c <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c60:	f7fd fe7c 	bl	800095c <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e164      	b.n	8002f3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c72:	4b26      	ldr	r3, [pc, #152]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0x200>
 8002c7e:	e015      	b.n	8002cac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c80:	4b24      	ldr	r3, [pc, #144]	; (8002d14 <HAL_RCC_OscConfig+0x2b4>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c86:	f7fd fe69 	bl	800095c <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c8e:	f7fd fe65 	bl	800095c <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e14d      	b.n	8002f3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca0:	4b1a      	ldr	r3, [pc, #104]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1f0      	bne.n	8002c8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 80a0 	beq.w	8002dfa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cbe:	4b13      	ldr	r3, [pc, #76]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10f      	bne.n	8002cea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	4a0e      	ldr	r2, [pc, #56]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cda:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cea:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <HAL_RCC_OscConfig+0x2b8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d121      	bne.n	8002d3a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf6:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <HAL_RCC_OscConfig+0x2b8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a07      	ldr	r2, [pc, #28]	; (8002d18 <HAL_RCC_OscConfig+0x2b8>)
 8002cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d02:	f7fd fe2b 	bl	800095c <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d08:	e011      	b.n	8002d2e <HAL_RCC_OscConfig+0x2ce>
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	42470000 	.word	0x42470000
 8002d14:	42470e80 	.word	0x42470e80
 8002d18:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d1c:	f7fd fe1e 	bl	800095c <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e106      	b.n	8002f3c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2e:	4b85      	ldr	r3, [pc, #532]	; (8002f44 <HAL_RCC_OscConfig+0x4e4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d106      	bne.n	8002d50 <HAL_RCC_OscConfig+0x2f0>
 8002d42:	4b81      	ldr	r3, [pc, #516]	; (8002f48 <HAL_RCC_OscConfig+0x4e8>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d46:	4a80      	ldr	r2, [pc, #512]	; (8002f48 <HAL_RCC_OscConfig+0x4e8>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4e:	e01c      	b.n	8002d8a <HAL_RCC_OscConfig+0x32a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	d10c      	bne.n	8002d72 <HAL_RCC_OscConfig+0x312>
 8002d58:	4b7b      	ldr	r3, [pc, #492]	; (8002f48 <HAL_RCC_OscConfig+0x4e8>)
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5c:	4a7a      	ldr	r2, [pc, #488]	; (8002f48 <HAL_RCC_OscConfig+0x4e8>)
 8002d5e:	f043 0304 	orr.w	r3, r3, #4
 8002d62:	6713      	str	r3, [r2, #112]	; 0x70
 8002d64:	4b78      	ldr	r3, [pc, #480]	; (8002f48 <HAL_RCC_OscConfig+0x4e8>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	4a77      	ldr	r2, [pc, #476]	; (8002f48 <HAL_RCC_OscConfig+0x4e8>)
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d70:	e00b      	b.n	8002d8a <HAL_RCC_OscConfig+0x32a>
 8002d72:	4b75      	ldr	r3, [pc, #468]	; (8002f48 <HAL_RCC_OscConfig+0x4e8>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d76:	4a74      	ldr	r2, [pc, #464]	; (8002f48 <HAL_RCC_OscConfig+0x4e8>)
 8002d78:	f023 0301 	bic.w	r3, r3, #1
 8002d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7e:	4b72      	ldr	r3, [pc, #456]	; (8002f48 <HAL_RCC_OscConfig+0x4e8>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	4a71      	ldr	r2, [pc, #452]	; (8002f48 <HAL_RCC_OscConfig+0x4e8>)
 8002d84:	f023 0304 	bic.w	r3, r3, #4
 8002d88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d015      	beq.n	8002dbe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d92:	f7fd fde3 	bl	800095c <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d98:	e00a      	b.n	8002db0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d9a:	f7fd fddf 	bl	800095c <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e0c5      	b.n	8002f3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db0:	4b65      	ldr	r3, [pc, #404]	; (8002f48 <HAL_RCC_OscConfig+0x4e8>)
 8002db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0ee      	beq.n	8002d9a <HAL_RCC_OscConfig+0x33a>
 8002dbc:	e014      	b.n	8002de8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dbe:	f7fd fdcd 	bl	800095c <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc4:	e00a      	b.n	8002ddc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc6:	f7fd fdc9 	bl	800095c <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e0af      	b.n	8002f3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ddc:	4b5a      	ldr	r3, [pc, #360]	; (8002f48 <HAL_RCC_OscConfig+0x4e8>)
 8002dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1ee      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d105      	bne.n	8002dfa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dee:	4b56      	ldr	r3, [pc, #344]	; (8002f48 <HAL_RCC_OscConfig+0x4e8>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	4a55      	ldr	r2, [pc, #340]	; (8002f48 <HAL_RCC_OscConfig+0x4e8>)
 8002df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 809b 	beq.w	8002f3a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e04:	4b50      	ldr	r3, [pc, #320]	; (8002f48 <HAL_RCC_OscConfig+0x4e8>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 030c 	and.w	r3, r3, #12
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d05c      	beq.n	8002eca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d141      	bne.n	8002e9c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e18:	4b4c      	ldr	r3, [pc, #304]	; (8002f4c <HAL_RCC_OscConfig+0x4ec>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1e:	f7fd fd9d 	bl	800095c <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e26:	f7fd fd99 	bl	800095c <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e081      	b.n	8002f3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e38:	4b43      	ldr	r3, [pc, #268]	; (8002f48 <HAL_RCC_OscConfig+0x4e8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1f0      	bne.n	8002e26 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69da      	ldr	r2, [r3, #28]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	019b      	lsls	r3, r3, #6
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5a:	085b      	lsrs	r3, r3, #1
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	041b      	lsls	r3, r3, #16
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	061b      	lsls	r3, r3, #24
 8002e68:	4937      	ldr	r1, [pc, #220]	; (8002f48 <HAL_RCC_OscConfig+0x4e8>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e6e:	4b37      	ldr	r3, [pc, #220]	; (8002f4c <HAL_RCC_OscConfig+0x4ec>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e74:	f7fd fd72 	bl	800095c <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e7c:	f7fd fd6e 	bl	800095c <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e056      	b.n	8002f3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8e:	4b2e      	ldr	r3, [pc, #184]	; (8002f48 <HAL_RCC_OscConfig+0x4e8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0f0      	beq.n	8002e7c <HAL_RCC_OscConfig+0x41c>
 8002e9a:	e04e      	b.n	8002f3a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9c:	4b2b      	ldr	r3, [pc, #172]	; (8002f4c <HAL_RCC_OscConfig+0x4ec>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea2:	f7fd fd5b 	bl	800095c <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eaa:	f7fd fd57 	bl	800095c <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e03f      	b.n	8002f3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ebc:	4b22      	ldr	r3, [pc, #136]	; (8002f48 <HAL_RCC_OscConfig+0x4e8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1f0      	bne.n	8002eaa <HAL_RCC_OscConfig+0x44a>
 8002ec8:	e037      	b.n	8002f3a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e032      	b.n	8002f3c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ed6:	4b1c      	ldr	r3, [pc, #112]	; (8002f48 <HAL_RCC_OscConfig+0x4e8>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d028      	beq.n	8002f36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d121      	bne.n	8002f36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d11a      	bne.n	8002f36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f06:	4013      	ands	r3, r2
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f0c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d111      	bne.n	8002f36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	085b      	lsrs	r3, r3, #1
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d107      	bne.n	8002f36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d001      	beq.n	8002f3a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40007000 	.word	0x40007000
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	42470060 	.word	0x42470060

08002f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0cc      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f64:	4b68      	ldr	r3, [pc, #416]	; (8003108 <HAL_RCC_ClockConfig+0x1b8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d90c      	bls.n	8002f8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f72:	4b65      	ldr	r3, [pc, #404]	; (8003108 <HAL_RCC_ClockConfig+0x1b8>)
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7a:	4b63      	ldr	r3, [pc, #396]	; (8003108 <HAL_RCC_ClockConfig+0x1b8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0b8      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d020      	beq.n	8002fda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fa4:	4b59      	ldr	r3, [pc, #356]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	4a58      	ldr	r2, [pc, #352]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fbc:	4b53      	ldr	r3, [pc, #332]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	4a52      	ldr	r2, [pc, #328]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc8:	4b50      	ldr	r3, [pc, #320]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	494d      	ldr	r1, [pc, #308]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d044      	beq.n	8003070 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d107      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fee:	4b47      	ldr	r3, [pc, #284]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d119      	bne.n	800302e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e07f      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d003      	beq.n	800300e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800300a:	2b03      	cmp	r3, #3
 800300c:	d107      	bne.n	800301e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300e:	4b3f      	ldr	r3, [pc, #252]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e06f      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301e:	4b3b      	ldr	r3, [pc, #236]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e067      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800302e:	4b37      	ldr	r3, [pc, #220]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f023 0203 	bic.w	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	4934      	ldr	r1, [pc, #208]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 800303c:	4313      	orrs	r3, r2
 800303e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003040:	f7fd fc8c 	bl	800095c <HAL_GetTick>
 8003044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003046:	e00a      	b.n	800305e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003048:	f7fd fc88 	bl	800095c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	f241 3288 	movw	r2, #5000	; 0x1388
 8003056:	4293      	cmp	r3, r2
 8003058:	d901      	bls.n	800305e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e04f      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305e:	4b2b      	ldr	r3, [pc, #172]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 020c 	and.w	r2, r3, #12
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	429a      	cmp	r2, r3
 800306e:	d1eb      	bne.n	8003048 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003070:	4b25      	ldr	r3, [pc, #148]	; (8003108 <HAL_RCC_ClockConfig+0x1b8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d20c      	bcs.n	8003098 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307e:	4b22      	ldr	r3, [pc, #136]	; (8003108 <HAL_RCC_ClockConfig+0x1b8>)
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003086:	4b20      	ldr	r3, [pc, #128]	; (8003108 <HAL_RCC_ClockConfig+0x1b8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e032      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a4:	4b19      	ldr	r3, [pc, #100]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4916      	ldr	r1, [pc, #88]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030c2:	4b12      	ldr	r3, [pc, #72]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	490e      	ldr	r1, [pc, #56]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030d6:	f000 f821 	bl	800311c <HAL_RCC_GetSysClockFreq>
 80030da:	4602      	mov	r2, r0
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	490a      	ldr	r1, [pc, #40]	; (8003110 <HAL_RCC_ClockConfig+0x1c0>)
 80030e8:	5ccb      	ldrb	r3, [r1, r3]
 80030ea:	fa22 f303 	lsr.w	r3, r2, r3
 80030ee:	4a09      	ldr	r2, [pc, #36]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030f2:	4b09      	ldr	r3, [pc, #36]	; (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fd fbec 	bl	80008d4 <HAL_InitTick>

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40023c00 	.word	0x40023c00
 800310c:	40023800 	.word	0x40023800
 8003110:	08006878 	.word	0x08006878
 8003114:	20000000 	.word	0x20000000
 8003118:	20000004 	.word	0x20000004

0800311c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800311c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003120:	b084      	sub	sp, #16
 8003122:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	607b      	str	r3, [r7, #4]
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	2300      	movs	r3, #0
 800312e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003134:	4b67      	ldr	r3, [pc, #412]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 030c 	and.w	r3, r3, #12
 800313c:	2b08      	cmp	r3, #8
 800313e:	d00d      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0x40>
 8003140:	2b08      	cmp	r3, #8
 8003142:	f200 80bd 	bhi.w	80032c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <HAL_RCC_GetSysClockFreq+0x34>
 800314a:	2b04      	cmp	r3, #4
 800314c:	d003      	beq.n	8003156 <HAL_RCC_GetSysClockFreq+0x3a>
 800314e:	e0b7      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003150:	4b61      	ldr	r3, [pc, #388]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003152:	60bb      	str	r3, [r7, #8]
       break;
 8003154:	e0b7      	b.n	80032c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003156:	4b61      	ldr	r3, [pc, #388]	; (80032dc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003158:	60bb      	str	r3, [r7, #8]
      break;
 800315a:	e0b4      	b.n	80032c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800315c:	4b5d      	ldr	r3, [pc, #372]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003164:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003166:	4b5b      	ldr	r3, [pc, #364]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d04d      	beq.n	800320e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003172:	4b58      	ldr	r3, [pc, #352]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	099b      	lsrs	r3, r3, #6
 8003178:	461a      	mov	r2, r3
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003182:	f04f 0100 	mov.w	r1, #0
 8003186:	ea02 0800 	and.w	r8, r2, r0
 800318a:	ea03 0901 	and.w	r9, r3, r1
 800318e:	4640      	mov	r0, r8
 8003190:	4649      	mov	r1, r9
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	014b      	lsls	r3, r1, #5
 800319c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031a0:	0142      	lsls	r2, r0, #5
 80031a2:	4610      	mov	r0, r2
 80031a4:	4619      	mov	r1, r3
 80031a6:	ebb0 0008 	subs.w	r0, r0, r8
 80031aa:	eb61 0109 	sbc.w	r1, r1, r9
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	018b      	lsls	r3, r1, #6
 80031b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031bc:	0182      	lsls	r2, r0, #6
 80031be:	1a12      	subs	r2, r2, r0
 80031c0:	eb63 0301 	sbc.w	r3, r3, r1
 80031c4:	f04f 0000 	mov.w	r0, #0
 80031c8:	f04f 0100 	mov.w	r1, #0
 80031cc:	00d9      	lsls	r1, r3, #3
 80031ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031d2:	00d0      	lsls	r0, r2, #3
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	eb12 0208 	adds.w	r2, r2, r8
 80031dc:	eb43 0309 	adc.w	r3, r3, r9
 80031e0:	f04f 0000 	mov.w	r0, #0
 80031e4:	f04f 0100 	mov.w	r1, #0
 80031e8:	0259      	lsls	r1, r3, #9
 80031ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80031ee:	0250      	lsls	r0, r2, #9
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4610      	mov	r0, r2
 80031f6:	4619      	mov	r1, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	461a      	mov	r2, r3
 80031fc:	f04f 0300 	mov.w	r3, #0
 8003200:	f7fc ffe2 	bl	80001c8 <__aeabi_uldivmod>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4613      	mov	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	e04a      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800320e:	4b31      	ldr	r3, [pc, #196]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	099b      	lsrs	r3, r3, #6
 8003214:	461a      	mov	r2, r3
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800321e:	f04f 0100 	mov.w	r1, #0
 8003222:	ea02 0400 	and.w	r4, r2, r0
 8003226:	ea03 0501 	and.w	r5, r3, r1
 800322a:	4620      	mov	r0, r4
 800322c:	4629      	mov	r1, r5
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	014b      	lsls	r3, r1, #5
 8003238:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800323c:	0142      	lsls	r2, r0, #5
 800323e:	4610      	mov	r0, r2
 8003240:	4619      	mov	r1, r3
 8003242:	1b00      	subs	r0, r0, r4
 8003244:	eb61 0105 	sbc.w	r1, r1, r5
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	018b      	lsls	r3, r1, #6
 8003252:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003256:	0182      	lsls	r2, r0, #6
 8003258:	1a12      	subs	r2, r2, r0
 800325a:	eb63 0301 	sbc.w	r3, r3, r1
 800325e:	f04f 0000 	mov.w	r0, #0
 8003262:	f04f 0100 	mov.w	r1, #0
 8003266:	00d9      	lsls	r1, r3, #3
 8003268:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800326c:	00d0      	lsls	r0, r2, #3
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	1912      	adds	r2, r2, r4
 8003274:	eb45 0303 	adc.w	r3, r5, r3
 8003278:	f04f 0000 	mov.w	r0, #0
 800327c:	f04f 0100 	mov.w	r1, #0
 8003280:	0299      	lsls	r1, r3, #10
 8003282:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003286:	0290      	lsls	r0, r2, #10
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4610      	mov	r0, r2
 800328e:	4619      	mov	r1, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	461a      	mov	r2, r3
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	f7fc ff96 	bl	80001c8 <__aeabi_uldivmod>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4613      	mov	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032a4:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	0c1b      	lsrs	r3, r3, #16
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	3301      	adds	r3, #1
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032bc:	60bb      	str	r3, [r7, #8]
      break;
 80032be:	e002      	b.n	80032c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032c0:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80032c2:	60bb      	str	r3, [r7, #8]
      break;
 80032c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032c6:	68bb      	ldr	r3, [r7, #8]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032d2:	bf00      	nop
 80032d4:	40023800 	.word	0x40023800
 80032d8:	00f42400 	.word	0x00f42400
 80032dc:	007a1200 	.word	0x007a1200

080032e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80032e0:	b084      	sub	sp, #16
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b084      	sub	sp, #16
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	f107 001c 	add.w	r0, r7, #28
 80032ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80032f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d122      	bne.n	800333e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800330c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003322:	2b01      	cmp	r3, #1
 8003324:	d105      	bne.n	8003332 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f9a0 	bl	8003678 <USB_CoreReset>
 8003338:	4603      	mov	r3, r0
 800333a:	73fb      	strb	r3, [r7, #15]
 800333c:	e01a      	b.n	8003374 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f994 	bl	8003678 <USB_CoreReset>
 8003350:	4603      	mov	r3, r0
 8003352:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003356:	2b00      	cmp	r3, #0
 8003358:	d106      	bne.n	8003368 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	639a      	str	r2, [r3, #56]	; 0x38
 8003366:	e005      	b.n	8003374 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003376:	2b01      	cmp	r3, #1
 8003378:	d10b      	bne.n	8003392 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f043 0206 	orr.w	r2, r3, #6
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f043 0220 	orr.w	r2, r3, #32
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003392:	7bfb      	ldrb	r3, [r7, #15]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800339e:	b004      	add	sp, #16
 80033a0:	4770      	bx	lr

080033a2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f043 0201 	orr.w	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f023 0201 	bic.w	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	460b      	mov	r3, r1
 80033f0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003402:	78fb      	ldrb	r3, [r7, #3]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d115      	bne.n	8003434 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003414:	2001      	movs	r0, #1
 8003416:	f7fd faad 	bl	8000974 <HAL_Delay>
      ms++;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	3301      	adds	r3, #1
 800341e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f91a 	bl	800365a <USB_GetMode>
 8003426:	4603      	mov	r3, r0
 8003428:	2b01      	cmp	r3, #1
 800342a:	d01e      	beq.n	800346a <USB_SetCurrentMode+0x84>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b31      	cmp	r3, #49	; 0x31
 8003430:	d9f0      	bls.n	8003414 <USB_SetCurrentMode+0x2e>
 8003432:	e01a      	b.n	800346a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d115      	bne.n	8003466 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003446:	2001      	movs	r0, #1
 8003448:	f7fd fa94 	bl	8000974 <HAL_Delay>
      ms++;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	3301      	adds	r3, #1
 8003450:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f901 	bl	800365a <USB_GetMode>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <USB_SetCurrentMode+0x84>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2b31      	cmp	r3, #49	; 0x31
 8003462:	d9f0      	bls.n	8003446 <USB_SetCurrentMode+0x60>
 8003464:	e001      	b.n	800346a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e005      	b.n	8003476 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b32      	cmp	r3, #50	; 0x32
 800346e:	d101      	bne.n	8003474 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e000      	b.n	8003476 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	019b      	lsls	r3, r3, #6
 8003492:	f043 0220 	orr.w	r2, r3, #32
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	3301      	adds	r3, #1
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	4a08      	ldr	r2, [pc, #32]	; (80034c4 <USB_FlushTxFifo+0x44>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e006      	b.n	80034b8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b20      	cmp	r3, #32
 80034b4:	d0f1      	beq.n	800349a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	00030d40 	.word	0x00030d40

080034c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2210      	movs	r2, #16
 80034d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	3301      	adds	r3, #1
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	4a08      	ldr	r2, [pc, #32]	; (8003504 <USB_FlushRxFifo+0x3c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d901      	bls.n	80034ea <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e006      	b.n	80034f8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0310 	and.w	r3, r3, #16
 80034f2:	2b10      	cmp	r3, #16
 80034f4:	d0f1      	beq.n	80034da <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	00030d40 	.word	0x00030d40

08003508 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003508:	b480      	push	{r7}
 800350a:	b089      	sub	sp, #36	; 0x24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	4611      	mov	r1, r2
 8003514:	461a      	mov	r2, r3
 8003516:	460b      	mov	r3, r1
 8003518:	71fb      	strb	r3, [r7, #7]
 800351a:	4613      	mov	r3, r2
 800351c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003526:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800352a:	2b00      	cmp	r3, #0
 800352c:	d123      	bne.n	8003576 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800352e:	88bb      	ldrh	r3, [r7, #4]
 8003530:	3303      	adds	r3, #3
 8003532:	089b      	lsrs	r3, r3, #2
 8003534:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003536:	2300      	movs	r3, #0
 8003538:	61bb      	str	r3, [r7, #24]
 800353a:	e018      	b.n	800356e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	031a      	lsls	r2, r3, #12
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	4413      	add	r3, r2
 8003544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003548:	461a      	mov	r2, r3
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	3301      	adds	r3, #1
 8003554:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	3301      	adds	r3, #1
 800355a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	3301      	adds	r3, #1
 8003560:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	3301      	adds	r3, #1
 8003566:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	3301      	adds	r3, #1
 800356c:	61bb      	str	r3, [r7, #24]
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	429a      	cmp	r2, r3
 8003574:	d3e2      	bcc.n	800353c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3724      	adds	r7, #36	; 0x24
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003584:	b480      	push	{r7}
 8003586:	b08b      	sub	sp, #44	; 0x2c
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	4613      	mov	r3, r2
 8003590:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800359a:	88fb      	ldrh	r3, [r7, #6]
 800359c:	089b      	lsrs	r3, r3, #2
 800359e:	b29b      	uxth	r3, r3
 80035a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80035a2:	88fb      	ldrh	r3, [r7, #6]
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80035aa:	2300      	movs	r3, #0
 80035ac:	623b      	str	r3, [r7, #32]
 80035ae:	e014      	b.n	80035da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	3301      	adds	r3, #1
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	3301      	adds	r3, #1
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	3301      	adds	r3, #1
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	3301      	adds	r3, #1
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	3301      	adds	r3, #1
 80035d8:	623b      	str	r3, [r7, #32]
 80035da:	6a3a      	ldr	r2, [r7, #32]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d3e6      	bcc.n	80035b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80035e2:	8bfb      	ldrh	r3, [r7, #30]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d01e      	beq.n	8003626 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f2:	461a      	mov	r2, r3
 80035f4:	f107 0310 	add.w	r3, r7, #16
 80035f8:	6812      	ldr	r2, [r2, #0]
 80035fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
 8003608:	b2da      	uxtb	r2, r3
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	701a      	strb	r2, [r3, #0]
      i++;
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	3301      	adds	r3, #1
 8003612:	623b      	str	r3, [r7, #32]
      pDest++;
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	3301      	adds	r3, #1
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800361a:	8bfb      	ldrh	r3, [r7, #30]
 800361c:	3b01      	subs	r3, #1
 800361e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003620:	8bfb      	ldrh	r3, [r7, #30]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1ea      	bne.n	80035fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003628:	4618      	mov	r0, r3
 800362a:	372c      	adds	r7, #44	; 0x2c
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	4013      	ands	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800364c:	68fb      	ldr	r3, [r7, #12]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f003 0301 	and.w	r3, r3, #1
}
 800366a:	4618      	mov	r0, r3
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
	...

08003678 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	3301      	adds	r3, #1
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	4a13      	ldr	r2, [pc, #76]	; (80036d8 <USB_CoreReset+0x60>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d901      	bls.n	8003694 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e01a      	b.n	80036ca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	daf3      	bge.n	8003684 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	f043 0201 	orr.w	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	3301      	adds	r3, #1
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	4a09      	ldr	r2, [pc, #36]	; (80036d8 <USB_CoreReset+0x60>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d901      	bls.n	80036bc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e006      	b.n	80036ca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d0f1      	beq.n	80036ac <USB_CoreReset+0x34>

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	00030d40 	.word	0x00030d40

080036dc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036dc:	b084      	sub	sp, #16
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	f107 001c 	add.w	r0, r7, #28
 80036ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80036f8:	461a      	mov	r2, r3
 80036fa:	2300      	movs	r3, #0
 80036fc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003702:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372a:	2b00      	cmp	r3, #0
 800372c:	d018      	beq.n	8003760 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	2b01      	cmp	r3, #1
 8003732:	d10a      	bne.n	800374a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003742:	f043 0304 	orr.w	r3, r3, #4
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	e014      	b.n	8003774 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003758:	f023 0304 	bic.w	r3, r3, #4
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	e009      	b.n	8003774 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800376e:	f023 0304 	bic.w	r3, r3, #4
 8003772:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003774:	2110      	movs	r1, #16
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff fe82 	bl	8003480 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff fea3 	bl	80034c8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	e015      	b.n	80037b4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4413      	add	r3, r2
 8003790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003794:	461a      	mov	r2, r3
 8003796:	f04f 33ff 	mov.w	r3, #4294967295
 800379a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a8:	461a      	mov	r2, r3
 80037aa:	2300      	movs	r3, #0
 80037ac:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	3301      	adds	r3, #1
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d3e5      	bcc.n	8003788 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f04f 32ff 	mov.w	r2, #4294967295
 80037c8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00b      	beq.n	80037ee <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037dc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a13      	ldr	r2, [pc, #76]	; (8003830 <USB_HostInit+0x154>)
 80037e2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a13      	ldr	r2, [pc, #76]	; (8003834 <USB_HostInit+0x158>)
 80037e8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80037ec:	e009      	b.n	8003802 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2280      	movs	r2, #128	; 0x80
 80037f2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a10      	ldr	r2, [pc, #64]	; (8003838 <USB_HostInit+0x15c>)
 80037f8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a0f      	ldr	r2, [pc, #60]	; (800383c <USB_HostInit+0x160>)
 80037fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003804:	2b00      	cmp	r3, #0
 8003806:	d105      	bne.n	8003814 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f043 0210 	orr.w	r2, r3, #16
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699a      	ldr	r2, [r3, #24]
 8003818:	4b09      	ldr	r3, [pc, #36]	; (8003840 <USB_HostInit+0x164>)
 800381a:	4313      	orrs	r3, r2
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800382c:	b004      	add	sp, #16
 800382e:	4770      	bx	lr
 8003830:	01000200 	.word	0x01000200
 8003834:	00e00300 	.word	0x00e00300
 8003838:	00600080 	.word	0x00600080
 800383c:	004000e0 	.word	0x004000e0
 8003840:	a3200008 	.word	0xa3200008

08003844 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003862:	f023 0303 	bic.w	r3, r3, #3
 8003866:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	68f9      	ldr	r1, [r7, #12]
 8003878:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800387c:	4313      	orrs	r3, r2
 800387e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d107      	bne.n	8003896 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800388c:	461a      	mov	r2, r3
 800388e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003892:	6053      	str	r3, [r2, #4]
 8003894:	e009      	b.n	80038aa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003896:	78fb      	ldrb	r3, [r7, #3]
 8003898:	2b02      	cmp	r3, #2
 800389a:	d106      	bne.n	80038aa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038a2:	461a      	mov	r2, r3
 80038a4:	f241 7370 	movw	r3, #6000	; 0x1770
 80038a8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80038d8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80038e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80038e8:	2064      	movs	r0, #100	; 0x64
 80038ea:	f7fd f843 	bl	8000974 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80038f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038fa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80038fc:	200a      	movs	r0, #10
 80038fe:	f7fd f839 	bl	8000974 <HAL_Delay>

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	460b      	mov	r3, r1
 8003916:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003930:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <USB_DriveVbus+0x44>
 800393c:	78fb      	ldrb	r3, [r7, #3]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d106      	bne.n	8003950 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800394a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800394e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395a:	d109      	bne.n	8003970 <USB_DriveVbus+0x64>
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d106      	bne.n	8003970 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800396a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800396e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800397e:	b480      	push	{r7}
 8003980:	b085      	sub	sp, #20
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	0c5b      	lsrs	r3, r3, #17
 800399c:	f003 0303 	and.w	r3, r3, #3
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	b29b      	uxth	r3, r3
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
	...

080039d0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	4608      	mov	r0, r1
 80039da:	4611      	mov	r1, r2
 80039dc:	461a      	mov	r2, r3
 80039de:	4603      	mov	r3, r0
 80039e0:	70fb      	strb	r3, [r7, #3]
 80039e2:	460b      	mov	r3, r1
 80039e4:	70bb      	strb	r3, [r7, #2]
 80039e6:	4613      	mov	r3, r2
 80039e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80039f2:	78fb      	ldrb	r3, [r7, #3]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fe:	461a      	mov	r2, r3
 8003a00:	f04f 33ff 	mov.w	r3, #4294967295
 8003a04:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8003a06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	d87e      	bhi.n	8003b0c <USB_HC_Init+0x13c>
 8003a0e:	a201      	add	r2, pc, #4	; (adr r2, 8003a14 <USB_HC_Init+0x44>)
 8003a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a14:	08003a25 	.word	0x08003a25
 8003a18:	08003acf 	.word	0x08003acf
 8003a1c:	08003a25 	.word	0x08003a25
 8003a20:	08003a91 	.word	0x08003a91
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a30:	461a      	mov	r2, r3
 8003a32:	f240 439d 	movw	r3, #1181	; 0x49d
 8003a36:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8003a38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	da10      	bge.n	8003a62 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	0151      	lsls	r1, r2, #5
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	440a      	add	r2, r1
 8003a56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a5e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8003a60:	e057      	b.n	8003b12 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d051      	beq.n	8003b12 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8003a6e:	78fb      	ldrb	r3, [r7, #3]
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	78fa      	ldrb	r2, [r7, #3]
 8003a7e:	0151      	lsls	r1, r2, #5
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	440a      	add	r2, r1
 8003a84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a8c:	60d3      	str	r3, [r2, #12]
      break;
 8003a8e:	e040      	b.n	8003b12 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f240 639d 	movw	r3, #1693	; 0x69d
 8003aa2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003aa4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	da34      	bge.n	8003b16 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	0151      	lsls	r1, r2, #5
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	440a      	add	r2, r1
 8003ac2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aca:	60d3      	str	r3, [r2, #12]
      }

      break;
 8003acc:	e023      	b.n	8003b16 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003ace:	78fb      	ldrb	r3, [r7, #3]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ada:	461a      	mov	r2, r3
 8003adc:	f240 2325 	movw	r3, #549	; 0x225
 8003ae0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003ae2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	da17      	bge.n	8003b1a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	015a      	lsls	r2, r3, #5
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	78fa      	ldrb	r2, [r7, #3]
 8003afa:	0151      	lsls	r1, r2, #5
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	440a      	add	r2, r1
 8003b00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b04:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8003b08:	60d3      	str	r3, [r2, #12]
      }
      break;
 8003b0a:	e006      	b.n	8003b1a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	77fb      	strb	r3, [r7, #31]
      break;
 8003b10:	e004      	b.n	8003b1c <USB_HC_Init+0x14c>
      break;
 8003b12:	bf00      	nop
 8003b14:	e002      	b.n	8003b1c <USB_HC_Init+0x14c>
      break;
 8003b16:	bf00      	nop
 8003b18:	e000      	b.n	8003b1c <USB_HC_Init+0x14c>
      break;
 8003b1a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b22:	699a      	ldr	r2, [r3, #24]
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b30:	6939      	ldr	r1, [r7, #16]
 8003b32:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003b36:	4313      	orrs	r3, r2
 8003b38:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8003b46:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	da03      	bge.n	8003b56 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8003b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b52:	61bb      	str	r3, [r7, #24]
 8003b54:	e001      	b.n	8003b5a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7ff ff0f 	bl	800397e <USB_GetHostSpeed>
 8003b60:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8003b62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d106      	bne.n	8003b78 <USB_HC_Init+0x1a8>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d003      	beq.n	8003b78 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8003b70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	e001      	b.n	8003b7c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003b7c:	787b      	ldrb	r3, [r7, #1]
 8003b7e:	059b      	lsls	r3, r3, #22
 8003b80:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003b84:	78bb      	ldrb	r3, [r7, #2]
 8003b86:	02db      	lsls	r3, r3, #11
 8003b88:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003b8c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003b8e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003b92:	049b      	lsls	r3, r3, #18
 8003b94:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003b98:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003b9a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003b9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003ba0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003ba6:	78fb      	ldrb	r3, [r7, #3]
 8003ba8:	0159      	lsls	r1, r3, #5
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	440b      	add	r3, r1
 8003bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003bb8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8003bba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	d10f      	bne.n	8003be2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8003bc2:	78fb      	ldrb	r3, [r7, #3]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	78fa      	ldrb	r2, [r7, #3]
 8003bd2:	0151      	lsls	r1, r2, #5
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	440a      	add	r2, r1
 8003bd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003be0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8003be2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3720      	adds	r7, #32
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08c      	sub	sp, #48	; 0x30
 8003bf0:	af02      	add	r7, sp, #8
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	785b      	ldrb	r3, [r3, #1]
 8003c02:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8003c04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c08:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d02d      	beq.n	8003c72 <USB_HC_StartXfer+0x86>
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	791b      	ldrb	r3, [r3, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d129      	bne.n	8003c72 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d117      	bne.n	8003c54 <USB_HC_StartXfer+0x68>
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	79db      	ldrb	r3, [r3, #7]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <USB_HC_StartXfer+0x48>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	79db      	ldrb	r3, [r3, #7]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d10f      	bne.n	8003c54 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	0151      	lsls	r1, r2, #5
 8003c46:	6a3a      	ldr	r2, [r7, #32]
 8003c48:	440a      	add	r2, r1
 8003c4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c52:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8003c54:	79fb      	ldrb	r3, [r7, #7]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10b      	bne.n	8003c72 <USB_HC_StartXfer+0x86>
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	795b      	ldrb	r3, [r3, #5]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d107      	bne.n	8003c72 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	785b      	ldrb	r3, [r3, #1]
 8003c66:	4619      	mov	r1, r3
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 fa2f 	bl	80040cc <USB_DoPing>
      return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	e0f8      	b.n	8003e64 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d018      	beq.n	8003cac <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	8912      	ldrh	r2, [r2, #8]
 8003c82:	4413      	add	r3, r2
 8003c84:	3b01      	subs	r3, #1
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	8912      	ldrh	r2, [r2, #8]
 8003c8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c8e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8003c90:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003c92:	8b7b      	ldrh	r3, [r7, #26]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d90b      	bls.n	8003cb0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8003c98:	8b7b      	ldrh	r3, [r7, #26]
 8003c9a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8003c9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	8912      	ldrh	r2, [r2, #8]
 8003ca2:	fb02 f203 	mul.w	r2, r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	611a      	str	r2, [r3, #16]
 8003caa:	e001      	b.n	8003cb0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8003cac:	2301      	movs	r3, #1
 8003cae:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	78db      	ldrb	r3, [r3, #3]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d007      	beq.n	8003cc8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8003cb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	8912      	ldrh	r2, [r2, #8]
 8003cbe:	fb02 f203 	mul.w	r2, r2, r3
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	611a      	str	r2, [r3, #16]
 8003cc6:	e003      	b.n	8003cd0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	695a      	ldr	r2, [r3, #20]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003cd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003cda:	04d9      	lsls	r1, r3, #19
 8003cdc:	4b63      	ldr	r3, [pc, #396]	; (8003e6c <USB_HC_StartXfer+0x280>)
 8003cde:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003ce0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	7a9b      	ldrb	r3, [r3, #10]
 8003ce6:	075b      	lsls	r3, r3, #29
 8003ce8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003cec:	69f9      	ldr	r1, [r7, #28]
 8003cee:	0148      	lsls	r0, r1, #5
 8003cf0:	6a39      	ldr	r1, [r7, #32]
 8003cf2:	4401      	add	r1, r0
 8003cf4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003cf8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003cfa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	68d9      	ldr	r1, [r3, #12]
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d12:	460a      	mov	r2, r1
 8003d14:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bf0c      	ite	eq
 8003d26:	2301      	moveq	r3, #1
 8003d28:	2300      	movne	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	69fa      	ldr	r2, [r7, #28]
 8003d3e:	0151      	lsls	r1, r2, #5
 8003d40:	6a3a      	ldr	r2, [r7, #32]
 8003d42:	440a      	add	r2, r1
 8003d44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d48:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003d4c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	7e7b      	ldrb	r3, [r7, #25]
 8003d5e:	075b      	lsls	r3, r3, #29
 8003d60:	69f9      	ldr	r1, [r7, #28]
 8003d62:	0148      	lsls	r0, r1, #5
 8003d64:	6a39      	ldr	r1, [r7, #32]
 8003d66:	4401      	add	r1, r0
 8003d68:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d86:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	78db      	ldrb	r3, [r3, #3]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d004      	beq.n	8003d9a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d96:	613b      	str	r3, [r7, #16]
 8003d98:	e003      	b.n	8003da2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003da0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003da8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db6:	461a      	mov	r2, r3
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e04e      	b.n	8003e64 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	78db      	ldrb	r3, [r3, #3]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d149      	bne.n	8003e62 <USB_HC_StartXfer+0x276>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d045      	beq.n	8003e62 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	79db      	ldrb	r3, [r3, #7]
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	d830      	bhi.n	8003e40 <USB_HC_StartXfer+0x254>
 8003dde:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <USB_HC_StartXfer+0x1f8>)
 8003de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de4:	08003df5 	.word	0x08003df5
 8003de8:	08003e19 	.word	0x08003e19
 8003dec:	08003df5 	.word	0x08003df5
 8003df0:	08003e19 	.word	0x08003e19
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	3303      	adds	r3, #3
 8003dfa:	089b      	lsrs	r3, r3, #2
 8003dfc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8003dfe:	8afa      	ldrh	r2, [r7, #22]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d91c      	bls.n	8003e44 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	f043 0220 	orr.w	r2, r3, #32
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	619a      	str	r2, [r3, #24]
        }
        break;
 8003e16:	e015      	b.n	8003e44 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	3303      	adds	r3, #3
 8003e1e:	089b      	lsrs	r3, r3, #2
 8003e20:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8003e22:	8afa      	ldrh	r2, [r7, #22]
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d90a      	bls.n	8003e48 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	619a      	str	r2, [r3, #24]
        }
        break;
 8003e3e:	e003      	b.n	8003e48 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8003e40:	bf00      	nop
 8003e42:	e002      	b.n	8003e4a <USB_HC_StartXfer+0x25e>
        break;
 8003e44:	bf00      	nop
 8003e46:	e000      	b.n	8003e4a <USB_HC_StartXfer+0x25e>
        break;
 8003e48:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	68d9      	ldr	r1, [r3, #12]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	785a      	ldrb	r2, [r3, #1]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2000      	movs	r0, #0
 8003e5a:	9000      	str	r0, [sp, #0]
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f7ff fb53 	bl	8003508 <USB_WritePacket>
  }

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3728      	adds	r7, #40	; 0x28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	1ff80000 	.word	0x1ff80000

08003e70 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	b29b      	uxth	r3, r3
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b089      	sub	sp, #36	; 0x24
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8003ea2:	78fb      	ldrb	r3, [r7, #3]
 8003ea4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	0c9b      	lsrs	r3, r3, #18
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	0fdb      	lsrs	r3, r3, #31
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	d104      	bne.n	8003eec <USB_HC_Halt+0x5a>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	e0e8      	b.n	80040be <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <USB_HC_Halt+0x66>
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d173      	bne.n	8003fe0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	0151      	lsls	r1, r2, #5
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	440a      	add	r2, r1
 8003f0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f16:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f040 80cb 	bne.w	80040bc <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d143      	bne.n	8003fba <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	015a      	lsls	r2, r3, #5
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	0151      	lsls	r1, r2, #5
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	440a      	add	r2, r1
 8003f48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f50:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	0151      	lsls	r1, r2, #5
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	440a      	add	r2, r1
 8003f68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f70:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	0151      	lsls	r1, r2, #5
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	440a      	add	r2, r1
 8003f88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f90:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	3301      	adds	r3, #1
 8003f96:	61fb      	str	r3, [r7, #28]
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f9e:	d81d      	bhi.n	8003fdc <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fb6:	d0ec      	beq.n	8003f92 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003fb8:	e080      	b.n	80040bc <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	0151      	lsls	r1, r2, #5
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	440a      	add	r2, r1
 8003fd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fd8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003fda:	e06f      	b.n	80040bc <USB_HC_Halt+0x22a>
            break;
 8003fdc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003fde:	e06d      	b.n	80040bc <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	0151      	lsls	r1, r2, #5
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	440a      	add	r2, r1
 8003ff6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ffa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ffe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d143      	bne.n	8004098 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	4413      	add	r3, r2
 8004018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	0151      	lsls	r1, r2, #5
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	440a      	add	r2, r1
 8004026:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800402a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800402e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	4413      	add	r3, r2
 8004038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	0151      	lsls	r1, r2, #5
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	440a      	add	r2, r1
 8004046:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800404a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800404e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	4413      	add	r3, r2
 8004058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	0151      	lsls	r1, r2, #5
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	440a      	add	r2, r1
 8004066:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800406a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800406e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	3301      	adds	r3, #1
 8004074:	61fb      	str	r3, [r7, #28]
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800407c:	d81d      	bhi.n	80040ba <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	4413      	add	r3, r2
 8004086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004090:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004094:	d0ec      	beq.n	8004070 <USB_HC_Halt+0x1de>
 8004096:	e011      	b.n	80040bc <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	0151      	lsls	r1, r2, #5
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	440a      	add	r2, r1
 80040ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040b6:	6013      	str	r3, [r2, #0]
 80040b8:	e000      	b.n	80040bc <USB_HC_Halt+0x22a>
          break;
 80040ba:	bf00      	nop
    }
  }

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3724      	adds	r7, #36	; 0x24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
	...

080040cc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80040dc:	78fb      	ldrb	r3, [r7, #3]
 80040de:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80040e0:	2301      	movs	r3, #1
 80040e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	04da      	lsls	r2, r3, #19
 80040e8:	4b15      	ldr	r3, [pc, #84]	; (8004140 <USB_DoPing+0x74>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	0151      	lsls	r1, r2, #5
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	440a      	add	r2, r1
 80040f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040fc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	4413      	add	r3, r2
 8004106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004114:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800411c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	4413      	add	r3, r2
 8004126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412a:	461a      	mov	r2, r3
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	1ff80000 	.word	0x1ff80000

08004144 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7ff f935 	bl	80033c4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800415a:	2110      	movs	r1, #16
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7ff f98f 	bl	8003480 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7ff f9b0 	bl	80034c8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004168:	2300      	movs	r3, #0
 800416a:	613b      	str	r3, [r7, #16]
 800416c:	e01f      	b.n	80041ae <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4413      	add	r3, r2
 8004176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004184:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800418c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004194:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4413      	add	r3, r2
 800419e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a2:	461a      	mov	r2, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	3301      	adds	r3, #1
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	2b0f      	cmp	r3, #15
 80041b2:	d9dc      	bls.n	800416e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80041b4:	2300      	movs	r3, #0
 80041b6:	613b      	str	r3, [r7, #16]
 80041b8:	e034      	b.n	8004224 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041d0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041d8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80041e0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ee:	461a      	mov	r2, r3
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	3301      	adds	r3, #1
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004200:	d80c      	bhi.n	800421c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4413      	add	r3, r2
 800420a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004218:	d0ec      	beq.n	80041f4 <USB_StopHost+0xb0>
 800421a:	e000      	b.n	800421e <USB_StopHost+0xda>
        break;
 800421c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	3301      	adds	r3, #1
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	2b0f      	cmp	r3, #15
 8004228:	d9c7      	bls.n	80041ba <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004230:	461a      	mov	r2, r3
 8004232:	f04f 33ff 	mov.w	r3, #4294967295
 8004236:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f04f 32ff 	mov.w	r2, #4294967295
 800423e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff f8ae 	bl	80033a2 <USB_EnableGlobalInt>

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8004250:	b590      	push	{r4, r7, lr}
 8004252:	b089      	sub	sp, #36	; 0x24
 8004254:	af04      	add	r7, sp, #16
 8004256:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8004258:	2301      	movs	r3, #1
 800425a:	2202      	movs	r2, #2
 800425c:	2102      	movs	r1, #2
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fc66 	bl	8004b30 <USBH_FindInterface>
 8004264:	4603      	mov	r3, r0
 8004266:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	2bff      	cmp	r3, #255	; 0xff
 800426c:	d002      	beq.n	8004274 <USBH_CDC_InterfaceInit+0x24>
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d901      	bls.n	8004278 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8004274:	2302      	movs	r3, #2
 8004276:	e13d      	b.n	80044f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	4619      	mov	r1, r3
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 fc3b 	bl	8004af8 <USBH_SelectInterface>
 8004282:	4603      	mov	r3, r0
 8004284:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8004286:	7bbb      	ldrb	r3, [r7, #14]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800428c:	2302      	movs	r3, #2
 800428e:	e131      	b.n	80044f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8004296:	2050      	movs	r0, #80	; 0x50
 8004298:	f002 fa00 	bl	800669c <malloc>
 800429c:	4603      	mov	r3, r0
 800429e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80042b0:	2302      	movs	r3, #2
 80042b2:	e11f      	b.n	80044f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80042b4:	2250      	movs	r2, #80	; 0x50
 80042b6:	2100      	movs	r1, #0
 80042b8:	68b8      	ldr	r0, [r7, #8]
 80042ba:	f002 f9ff 	bl	80066bc <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80042be:	7bfb      	ldrb	r3, [r7, #15]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	211a      	movs	r1, #26
 80042c4:	fb01 f303 	mul.w	r3, r1, r3
 80042c8:	4413      	add	r3, r2
 80042ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	b25b      	sxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	da15      	bge.n	8004302 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80042d6:	7bfb      	ldrb	r3, [r7, #15]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	211a      	movs	r1, #26
 80042dc:	fb01 f303 	mul.w	r3, r1, r3
 80042e0:	4413      	add	r3, r2
 80042e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80042e6:	781a      	ldrb	r2, [r3, #0]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	211a      	movs	r1, #26
 80042f2:	fb01 f303 	mul.w	r3, r1, r3
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80042fc:	881a      	ldrh	r2, [r3, #0]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	785b      	ldrb	r3, [r3, #1]
 8004306:	4619      	mov	r1, r3
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f001 fe32 	bl	8005f72 <USBH_AllocPipe>
 800430e:	4603      	mov	r3, r0
 8004310:	461a      	mov	r2, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	7819      	ldrb	r1, [r3, #0]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	7858      	ldrb	r0, [r3, #1]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	8952      	ldrh	r2, [r2, #10]
 800432e:	9202      	str	r2, [sp, #8]
 8004330:	2203      	movs	r2, #3
 8004332:	9201      	str	r2, [sp, #4]
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	4623      	mov	r3, r4
 8004338:	4602      	mov	r2, r0
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f001 fdea 	bl	8005f14 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2200      	movs	r2, #0
 8004346:	4619      	mov	r1, r3
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f002 f8f9 	bl	8006540 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800434e:	2300      	movs	r3, #0
 8004350:	2200      	movs	r2, #0
 8004352:	210a      	movs	r1, #10
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 fbeb 	bl	8004b30 <USBH_FindInterface>
 800435a:	4603      	mov	r3, r0
 800435c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	2bff      	cmp	r3, #255	; 0xff
 8004362:	d002      	beq.n	800436a <USBH_CDC_InterfaceInit+0x11a>
 8004364:	7bfb      	ldrb	r3, [r7, #15]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d901      	bls.n	800436e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800436a:	2302      	movs	r3, #2
 800436c:	e0c2      	b.n	80044f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800436e:	7bfb      	ldrb	r3, [r7, #15]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	211a      	movs	r1, #26
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	4413      	add	r3, r2
 800437a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	b25b      	sxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	da16      	bge.n	80043b4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	211a      	movs	r1, #26
 800438c:	fb01 f303 	mul.w	r3, r1, r3
 8004390:	4413      	add	r3, r2
 8004392:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004396:	781a      	ldrb	r2, [r3, #0]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	211a      	movs	r1, #26
 80043a2:	fb01 f303 	mul.w	r3, r1, r3
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80043ac:	881a      	ldrh	r2, [r3, #0]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	835a      	strh	r2, [r3, #26]
 80043b2:	e015      	b.n	80043e0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	211a      	movs	r1, #26
 80043ba:	fb01 f303 	mul.w	r3, r1, r3
 80043be:	4413      	add	r3, r2
 80043c0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80043c4:	781a      	ldrb	r2, [r3, #0]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	211a      	movs	r1, #26
 80043d0:	fb01 f303 	mul.w	r3, r1, r3
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80043da:	881a      	ldrh	r2, [r3, #0]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	211a      	movs	r1, #26
 80043e6:	fb01 f303 	mul.w	r3, r1, r3
 80043ea:	4413      	add	r3, r2
 80043ec:	f203 3356 	addw	r3, r3, #854	; 0x356
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	b25b      	sxtb	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	da16      	bge.n	8004426 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	211a      	movs	r1, #26
 80043fe:	fb01 f303 	mul.w	r3, r1, r3
 8004402:	4413      	add	r3, r2
 8004404:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004408:	781a      	ldrb	r2, [r3, #0]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	211a      	movs	r1, #26
 8004414:	fb01 f303 	mul.w	r3, r1, r3
 8004418:	4413      	add	r3, r2
 800441a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800441e:	881a      	ldrh	r2, [r3, #0]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	835a      	strh	r2, [r3, #26]
 8004424:	e015      	b.n	8004452 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	211a      	movs	r1, #26
 800442c:	fb01 f303 	mul.w	r3, r1, r3
 8004430:	4413      	add	r3, r2
 8004432:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004436:	781a      	ldrb	r2, [r3, #0]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	211a      	movs	r1, #26
 8004442:	fb01 f303 	mul.w	r3, r1, r3
 8004446:	4413      	add	r3, r2
 8004448:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800444c:	881a      	ldrh	r2, [r3, #0]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	7b9b      	ldrb	r3, [r3, #14]
 8004456:	4619      	mov	r1, r3
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f001 fd8a 	bl	8005f72 <USBH_AllocPipe>
 800445e:	4603      	mov	r3, r0
 8004460:	461a      	mov	r2, r3
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	7bdb      	ldrb	r3, [r3, #15]
 800446a:	4619      	mov	r1, r3
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f001 fd80 	bl	8005f72 <USBH_AllocPipe>
 8004472:	4603      	mov	r3, r0
 8004474:	461a      	mov	r2, r3
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	7b59      	ldrb	r1, [r3, #13]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	7b98      	ldrb	r0, [r3, #14]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	8b12      	ldrh	r2, [r2, #24]
 8004492:	9202      	str	r2, [sp, #8]
 8004494:	2202      	movs	r2, #2
 8004496:	9201      	str	r2, [sp, #4]
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	4623      	mov	r3, r4
 800449c:	4602      	mov	r2, r0
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f001 fd38 	bl	8005f14 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	7b19      	ldrb	r1, [r3, #12]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	7bd8      	ldrb	r0, [r3, #15]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	8b52      	ldrh	r2, [r2, #26]
 80044bc:	9202      	str	r2, [sp, #8]
 80044be:	2202      	movs	r2, #2
 80044c0:	9201      	str	r2, [sp, #4]
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	4623      	mov	r3, r4
 80044c6:	4602      	mov	r2, r0
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f001 fd23 	bl	8005f14 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	7b5b      	ldrb	r3, [r3, #13]
 80044da:	2200      	movs	r2, #0
 80044dc:	4619      	mov	r1, r3
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f002 f82e 	bl	8006540 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	7b1b      	ldrb	r3, [r3, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	4619      	mov	r1, r3
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f002 f827 	bl	8006540 <USBH_LL_SetToggle>

  return USBH_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd90      	pop	{r4, r7, pc}

080044fc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00e      	beq.n	8004534 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	4619      	mov	r1, r3
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f001 fd18 	bl	8005f52 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	4619      	mov	r1, r3
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f001 fd43 	bl	8005fb4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	7b1b      	ldrb	r3, [r3, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00e      	beq.n	800455a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	7b1b      	ldrb	r3, [r3, #12]
 8004540:	4619      	mov	r1, r3
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f001 fd05 	bl	8005f52 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	7b1b      	ldrb	r3, [r3, #12]
 800454c:	4619      	mov	r1, r3
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f001 fd30 	bl	8005fb4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	7b5b      	ldrb	r3, [r3, #13]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00e      	beq.n	8004580 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	7b5b      	ldrb	r3, [r3, #13]
 8004566:	4619      	mov	r1, r3
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f001 fcf2 	bl	8005f52 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	7b5b      	ldrb	r3, [r3, #13]
 8004572:	4619      	mov	r1, r3
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f001 fd1d 	bl	8005fb4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00b      	beq.n	80045a4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	4618      	mov	r0, r3
 8004596:	f002 f889 	bl	80066ac <free>
    phost->pActiveClass->pData = 0U;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80045a0:	2200      	movs	r2, #0
 80045a2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3340      	adds	r3, #64	; 0x40
 80045c4:	4619      	mov	r1, r3
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f8b1 	bl	800472e <GetLineCoding>
 80045cc:	4603      	mov	r3, r0
 80045ce:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80045d0:	7afb      	ldrb	r3, [r7, #11]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d105      	bne.n	80045e2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80045dc:	2102      	movs	r1, #2
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80045e2:	7afb      	ldrb	r3, [r7, #11]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800460c:	2b04      	cmp	r3, #4
 800460e:	d877      	bhi.n	8004700 <USBH_CDC_Process+0x114>
 8004610:	a201      	add	r2, pc, #4	; (adr r2, 8004618 <USBH_CDC_Process+0x2c>)
 8004612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004616:	bf00      	nop
 8004618:	0800462d 	.word	0x0800462d
 800461c:	08004633 	.word	0x08004633
 8004620:	08004663 	.word	0x08004663
 8004624:	080046d7 	.word	0x080046d7
 8004628:	080046e5 	.word	0x080046e5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800462c:	2300      	movs	r3, #0
 800462e:	73fb      	strb	r3, [r7, #15]
      break;
 8004630:	e06d      	b.n	800470e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004636:	4619      	mov	r1, r3
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f897 	bl	800476c <SetLineCoding>
 800463e:	4603      	mov	r3, r0
 8004640:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004642:	7bbb      	ldrb	r3, [r7, #14]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d104      	bne.n	8004652 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8004650:	e058      	b.n	8004704 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8004652:	7bbb      	ldrb	r3, [r7, #14]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d055      	beq.n	8004704 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2204      	movs	r2, #4
 800465c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8004660:	e050      	b.n	8004704 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	3340      	adds	r3, #64	; 0x40
 8004666:	4619      	mov	r1, r3
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f860 	bl	800472e <GetLineCoding>
 800466e:	4603      	mov	r3, r0
 8004670:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004672:	7bbb      	ldrb	r3, [r7, #14]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d126      	bne.n	80046c6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800468a:	791b      	ldrb	r3, [r3, #4]
 800468c:	429a      	cmp	r2, r3
 800468e:	d13b      	bne.n	8004708 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800469a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800469c:	429a      	cmp	r2, r3
 800469e:	d133      	bne.n	8004708 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046aa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d12b      	bne.n	8004708 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d124      	bne.n	8004708 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f958 	bl	8004974 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80046c4:	e020      	b.n	8004708 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80046c6:	7bbb      	ldrb	r3, [r7, #14]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d01d      	beq.n	8004708 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2204      	movs	r2, #4
 80046d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80046d4:	e018      	b.n	8004708 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f867 	bl	80047aa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f8da 	bl	8004896 <CDC_ProcessReception>
      break;
 80046e2:	e014      	b.n	800470e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80046e4:	2100      	movs	r1, #0
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 ffe3 	bl	80056b2 <USBH_ClrFeature>
 80046ec:	4603      	mov	r3, r0
 80046ee:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80046f0:	7bbb      	ldrb	r3, [r7, #14]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10a      	bne.n	800470c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80046fe:	e005      	b.n	800470c <USBH_CDC_Process+0x120>

    default:
      break;
 8004700:	bf00      	nop
 8004702:	e004      	b.n	800470e <USBH_CDC_Process+0x122>
      break;
 8004704:	bf00      	nop
 8004706:	e002      	b.n	800470e <USBH_CDC_Process+0x122>
      break;
 8004708:	bf00      	nop
 800470a:	e000      	b.n	800470e <USBH_CDC_Process+0x122>
      break;
 800470c:	bf00      	nop

  }

  return status;
 800470e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b082      	sub	sp, #8
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
 8004736:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	22a1      	movs	r2, #161	; 0xa1
 800473c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2221      	movs	r2, #33	; 0x21
 8004742:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2207      	movs	r2, #7
 8004754:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2207      	movs	r2, #7
 800475a:	4619      	mov	r1, r3
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f001 f988 	bl	8005a72 <USBH_CtlReq>
 8004762:	4603      	mov	r3, r0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2221      	movs	r2, #33	; 0x21
 800477a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2207      	movs	r2, #7
 8004792:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2207      	movs	r2, #7
 8004798:	4619      	mov	r1, r3
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f001 f969 	bl	8005a72 <USBH_CtlReq>
 80047a0:	4603      	mov	r3, r0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b086      	sub	sp, #24
 80047ae:	af02      	add	r7, sp, #8
 80047b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80047bc:	2300      	movs	r3, #0
 80047be:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d002      	beq.n	80047d0 <CDC_ProcessTransmission+0x26>
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d023      	beq.n	8004816 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80047ce:	e05e      	b.n	800488e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	8b12      	ldrh	r2, [r2, #24]
 80047d8:	4293      	cmp	r3, r2
 80047da:	d90b      	bls.n	80047f4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	69d9      	ldr	r1, [r3, #28]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8b1a      	ldrh	r2, [r3, #24]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	7b5b      	ldrb	r3, [r3, #13]
 80047e8:	2001      	movs	r0, #1
 80047ea:	9000      	str	r0, [sp, #0]
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f001 fb4e 	bl	8005e8e <USBH_BulkSendData>
 80047f2:	e00b      	b.n	800480c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	7b5b      	ldrb	r3, [r3, #13]
 8004802:	2001      	movs	r0, #1
 8004804:	9000      	str	r0, [sp, #0]
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f001 fb41 	bl	8005e8e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004814:	e03b      	b.n	800488e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	7b5b      	ldrb	r3, [r3, #13]
 800481a:	4619      	mov	r1, r3
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f001 fe65 	bl	80064ec <USBH_LL_GetURBState>
 8004822:	4603      	mov	r3, r0
 8004824:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8004826:	7afb      	ldrb	r3, [r7, #11]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d128      	bne.n	800487e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	8b12      	ldrh	r2, [r2, #24]
 8004834:	4293      	cmp	r3, r2
 8004836:	d90e      	bls.n	8004856 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	8b12      	ldrh	r2, [r2, #24]
 8004840:	1a9a      	subs	r2, r3, r2
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	8b12      	ldrh	r2, [r2, #24]
 800484e:	441a      	add	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	61da      	str	r2, [r3, #28]
 8004854:	e002      	b.n	800485c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	2b00      	cmp	r3, #0
 8004862:	d004      	beq.n	800486e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800486c:	e00e      	b.n	800488c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f868 	bl	800494c <USBH_CDC_TransmitCallback>
      break;
 800487c:	e006      	b.n	800488c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800487e:	7afb      	ldrb	r3, [r7, #11]
 8004880:	2b02      	cmp	r3, #2
 8004882:	d103      	bne.n	800488c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800488c:	bf00      	nop
  }
}
 800488e:	bf00      	nop
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b086      	sub	sp, #24
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80048a8:	2300      	movs	r3, #0
 80048aa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d002      	beq.n	80048bc <CDC_ProcessReception+0x26>
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d00e      	beq.n	80048d8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80048ba:	e043      	b.n	8004944 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	6a19      	ldr	r1, [r3, #32]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	8b5a      	ldrh	r2, [r3, #26]
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	7b1b      	ldrb	r3, [r3, #12]
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f001 fb05 	bl	8005ed8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2204      	movs	r2, #4
 80048d2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80048d6:	e035      	b.n	8004944 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	7b1b      	ldrb	r3, [r3, #12]
 80048dc:	4619      	mov	r1, r3
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f001 fe04 	bl	80064ec <USBH_LL_GetURBState>
 80048e4:	4603      	mov	r3, r0
 80048e6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80048e8:	7cfb      	ldrb	r3, [r7, #19]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d129      	bne.n	8004942 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	7b1b      	ldrb	r3, [r3, #12]
 80048f2:	4619      	mov	r1, r3
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f001 fd67 	bl	80063c8 <USBH_LL_GetLastXferSize>
 80048fa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	429a      	cmp	r2, r3
 8004904:	d016      	beq.n	8004934 <CDC_ProcessReception+0x9e>
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	8b5b      	ldrh	r3, [r3, #26]
 800490a:	461a      	mov	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4293      	cmp	r3, r2
 8004910:	d910      	bls.n	8004934 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	1ad2      	subs	r2, r2, r3
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	6a1a      	ldr	r2, [r3, #32]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	441a      	add	r2, r3
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2203      	movs	r2, #3
 800492e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8004932:	e006      	b.n	8004942 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f80f 	bl	8004960 <USBH_CDC_ReceiveCallback>
      break;
 8004942:	bf00      	nop
  }
}
 8004944:	bf00      	nop
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	4613      	mov	r3, r2
 8004994:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800499c:	2302      	movs	r3, #2
 800499e:	e029      	b.n	80049f4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	79fa      	ldrb	r2, [r7, #7]
 80049a4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f81f 	bl	80049fc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f001 fc37 	bl	8006260 <USBH_LL_Init>

  return USBH_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	e009      	b.n	8004a22 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	33e0      	adds	r3, #224	; 0xe0
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	2200      	movs	r2, #0
 8004a1a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2b0e      	cmp	r3, #14
 8004a26:	d9f2      	bls.n	8004a0e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8004a28:	2300      	movs	r3, #0
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	e009      	b.n	8004a42 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8004a38:	2200      	movs	r2, #0
 8004a3a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a48:	d3f1      	bcc.n	8004a2e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2240      	movs	r2, #64	; 0x40
 8004a6e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d016      	beq.n	8004ae6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10e      	bne.n	8004ae0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004ac8:	1c59      	adds	r1, r3, #1
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	33de      	adds	r3, #222	; 0xde
 8004ad4:	6839      	ldr	r1, [r7, #0]
 8004ad6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	73fb      	strb	r3, [r7, #15]
 8004ade:	e004      	b.n	8004aea <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	73fb      	strb	r3, [r7, #15]
 8004ae4:	e001      	b.n	8004aea <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	460b      	mov	r3, r1
 8004b02:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8004b0e:	78fa      	ldrb	r2, [r7, #3]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d204      	bcs.n	8004b1e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	78fa      	ldrb	r2, [r7, #3]
 8004b18:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8004b1c:	e001      	b.n	8004b22 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8004b1e:	2302      	movs	r3, #2
 8004b20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	4608      	mov	r0, r1
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4603      	mov	r3, r0
 8004b40:	70fb      	strb	r3, [r7, #3]
 8004b42:	460b      	mov	r3, r1
 8004b44:	70bb      	strb	r3, [r7, #2]
 8004b46:	4613      	mov	r3, r2
 8004b48:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8004b58:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004b5a:	e025      	b.n	8004ba8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8004b5c:	7dfb      	ldrb	r3, [r7, #23]
 8004b5e:	221a      	movs	r2, #26
 8004b60:	fb02 f303 	mul.w	r3, r2, r3
 8004b64:	3308      	adds	r3, #8
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4413      	add	r3, r2
 8004b6a:	3302      	adds	r3, #2
 8004b6c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	795b      	ldrb	r3, [r3, #5]
 8004b72:	78fa      	ldrb	r2, [r7, #3]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d002      	beq.n	8004b7e <USBH_FindInterface+0x4e>
 8004b78:	78fb      	ldrb	r3, [r7, #3]
 8004b7a:	2bff      	cmp	r3, #255	; 0xff
 8004b7c:	d111      	bne.n	8004ba2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8004b82:	78ba      	ldrb	r2, [r7, #2]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d002      	beq.n	8004b8e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004b88:	78bb      	ldrb	r3, [r7, #2]
 8004b8a:	2bff      	cmp	r3, #255	; 0xff
 8004b8c:	d109      	bne.n	8004ba2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004b92:	787a      	ldrb	r2, [r7, #1]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d002      	beq.n	8004b9e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004b98:	787b      	ldrb	r3, [r7, #1]
 8004b9a:	2bff      	cmp	r3, #255	; 0xff
 8004b9c:	d101      	bne.n	8004ba2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8004b9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ba0:	e006      	b.n	8004bb0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8004ba2:	7dfb      	ldrb	r3, [r7, #23]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004ba8:	7dfb      	ldrb	r3, [r7, #23]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d9d6      	bls.n	8004b5c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8004bae:	23ff      	movs	r3, #255	; 0xff
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	371c      	adds	r7, #28
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f001 fb87 	bl	80062d8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8004bca:	2101      	movs	r1, #1
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f001 fca0 	bl	8006512 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af04      	add	r7, sp, #16
 8004be2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8004be4:	2302      	movs	r3, #2
 8004be6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d102      	bne.n	8004bfe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2203      	movs	r2, #3
 8004bfc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b0b      	cmp	r3, #11
 8004c06:	f200 81b3 	bhi.w	8004f70 <USBH_Process+0x394>
 8004c0a:	a201      	add	r2, pc, #4	; (adr r2, 8004c10 <USBH_Process+0x34>)
 8004c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c10:	08004c41 	.word	0x08004c41
 8004c14:	08004c73 	.word	0x08004c73
 8004c18:	08004cdb 	.word	0x08004cdb
 8004c1c:	08004f0b 	.word	0x08004f0b
 8004c20:	08004f71 	.word	0x08004f71
 8004c24:	08004d7f 	.word	0x08004d7f
 8004c28:	08004eb1 	.word	0x08004eb1
 8004c2c:	08004db5 	.word	0x08004db5
 8004c30:	08004dd5 	.word	0x08004dd5
 8004c34:	08004df5 	.word	0x08004df5
 8004c38:	08004e23 	.word	0x08004e23
 8004c3c:	08004ef3 	.word	0x08004ef3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 8193 	beq.w	8004f74 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8004c54:	20c8      	movs	r0, #200	; 0xc8
 8004c56:	f001 fca3 	bl	80065a0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f001 fb99 	bl	8006392 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8004c70:	e180      	b.n	8004f74 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d107      	bne.n	8004c8c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004c8a:	e182      	b.n	8004f92 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004c92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c96:	d914      	bls.n	8004cc2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	d903      	bls.n	8004cba <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	220d      	movs	r2, #13
 8004cb6:	701a      	strb	r2, [r3, #0]
      break;
 8004cb8:	e16b      	b.n	8004f92 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	701a      	strb	r2, [r3, #0]
      break;
 8004cc0:	e167      	b.n	8004f92 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004cc8:	f103 020a 	add.w	r2, r3, #10
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8004cd2:	200a      	movs	r0, #10
 8004cd4:	f001 fc64 	bl	80065a0 <USBH_Delay>
      break;
 8004cd8:	e15b      	b.n	8004f92 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004cea:	2104      	movs	r1, #4
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8004cf0:	2064      	movs	r0, #100	; 0x64
 8004cf2:	f001 fc55 	bl	80065a0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f001 fb24 	bl	8006344 <USBH_LL_GetSpeed>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	461a      	mov	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2205      	movs	r2, #5
 8004d0a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f001 f92f 	bl	8005f72 <USBH_AllocPipe>
 8004d14:	4603      	mov	r3, r0
 8004d16:	461a      	mov	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8004d1c:	2180      	movs	r1, #128	; 0x80
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f001 f927 	bl	8005f72 <USBH_AllocPipe>
 8004d24:	4603      	mov	r3, r0
 8004d26:	461a      	mov	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	7919      	ldrb	r1, [r3, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8004d40:	b292      	uxth	r2, r2
 8004d42:	9202      	str	r2, [sp, #8]
 8004d44:	2200      	movs	r2, #0
 8004d46:	9201      	str	r2, [sp, #4]
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2280      	movs	r2, #128	; 0x80
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f001 f8e0 	bl	8005f14 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	7959      	ldrb	r1, [r3, #5]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8004d68:	b292      	uxth	r2, r2
 8004d6a:	9202      	str	r2, [sp, #8]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	9201      	str	r2, [sp, #4]
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	4603      	mov	r3, r0
 8004d74:	2200      	movs	r2, #0
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f001 f8cc 	bl	8005f14 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004d7c:	e109      	b.n	8004f92 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f90c 	bl	8004f9c <USBH_HandleEnum>
 8004d84:	4603      	mov	r3, r0
 8004d86:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8004d88:	7bbb      	ldrb	r3, [r7, #14]
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f040 80f3 	bne.w	8004f78 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d103      	bne.n	8004dac <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2208      	movs	r2, #8
 8004da8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8004daa:	e0e5      	b.n	8004f78 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2207      	movs	r2, #7
 8004db0:	701a      	strb	r2, [r3, #0]
      break;
 8004db2:	e0e1      	b.n	8004f78 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 80de 	beq.w	8004f7c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2208      	movs	r2, #8
 8004dd0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8004dd2:	e0d3      	b.n	8004f7c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	4619      	mov	r1, r3
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fc20 	bl	8005624 <USBH_SetCfg>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f040 80ca 	bne.w	8004f80 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2209      	movs	r2, #9
 8004df0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004df2:	e0c5      	b.n	8004f80 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8004dfa:	f003 0320 	and.w	r3, r3, #32
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00b      	beq.n	8004e1a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8004e02:	2101      	movs	r1, #1
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 fc30 	bl	800566a <USBH_SetFeature>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f040 80b9 	bne.w	8004f84 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	220a      	movs	r2, #10
 8004e16:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004e18:	e0b4      	b.n	8004f84 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	220a      	movs	r2, #10
 8004e1e:	701a      	strb	r2, [r3, #0]
      break;
 8004e20:	e0b0      	b.n	8004f84 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 80ad 	beq.w	8004f88 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8004e36:	2300      	movs	r3, #0
 8004e38:	73fb      	strb	r3, [r7, #15]
 8004e3a:	e016      	b.n	8004e6a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8004e3c:	7bfa      	ldrb	r2, [r7, #15]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	32de      	adds	r2, #222	; 0xde
 8004e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e46:	791a      	ldrb	r2, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d108      	bne.n	8004e64 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8004e52:	7bfa      	ldrb	r2, [r7, #15]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	32de      	adds	r2, #222	; 0xde
 8004e58:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8004e62:	e005      	b.n	8004e70 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
 8004e66:	3301      	adds	r3, #1
 8004e68:	73fb      	strb	r3, [r7, #15]
 8004e6a:	7bfb      	ldrb	r3, [r7, #15]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d0e5      	beq.n	8004e3c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d016      	beq.n	8004ea8 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	4798      	blx	r3
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d109      	bne.n	8004ea0 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2206      	movs	r2, #6
 8004e90:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004e98:	2103      	movs	r1, #3
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004e9e:	e073      	b.n	8004f88 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	220d      	movs	r2, #13
 8004ea4:	701a      	strb	r2, [r3, #0]
      break;
 8004ea6:	e06f      	b.n	8004f88 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	220d      	movs	r2, #13
 8004eac:	701a      	strb	r2, [r3, #0]
      break;
 8004eae:	e06b      	b.n	8004f88 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d017      	beq.n	8004eea <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	4798      	blx	r3
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8004eca:	7bbb      	ldrb	r3, [r7, #14]
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d103      	bne.n	8004eda <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	220b      	movs	r2, #11
 8004ed6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004ed8:	e058      	b.n	8004f8c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8004eda:	7bbb      	ldrb	r3, [r7, #14]
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d154      	bne.n	8004f8c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	220d      	movs	r2, #13
 8004ee6:	701a      	strb	r2, [r3, #0]
      break;
 8004ee8:	e050      	b.n	8004f8c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	220d      	movs	r2, #13
 8004eee:	701a      	strb	r2, [r3, #0]
      break;
 8004ef0:	e04c      	b.n	8004f8c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d049      	beq.n	8004f90 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	4798      	blx	r3
      }
      break;
 8004f08:	e042      	b.n	8004f90 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff fd72 	bl	80049fc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d009      	beq.n	8004f36 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d005      	beq.n	8004f4c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004f46:	2105      	movs	r1, #5
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d107      	bne.n	8004f68 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7ff fe2b 	bl	8004bbc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004f66:	e014      	b.n	8004f92 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f001 f9b5 	bl	80062d8 <USBH_LL_Start>
      break;
 8004f6e:	e010      	b.n	8004f92 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8004f70:	bf00      	nop
 8004f72:	e00e      	b.n	8004f92 <USBH_Process+0x3b6>
      break;
 8004f74:	bf00      	nop
 8004f76:	e00c      	b.n	8004f92 <USBH_Process+0x3b6>
      break;
 8004f78:	bf00      	nop
 8004f7a:	e00a      	b.n	8004f92 <USBH_Process+0x3b6>
    break;
 8004f7c:	bf00      	nop
 8004f7e:	e008      	b.n	8004f92 <USBH_Process+0x3b6>
      break;
 8004f80:	bf00      	nop
 8004f82:	e006      	b.n	8004f92 <USBH_Process+0x3b6>
      break;
 8004f84:	bf00      	nop
 8004f86:	e004      	b.n	8004f92 <USBH_Process+0x3b6>
      break;
 8004f88:	bf00      	nop
 8004f8a:	e002      	b.n	8004f92 <USBH_Process+0x3b6>
      break;
 8004f8c:	bf00      	nop
 8004f8e:	e000      	b.n	8004f92 <USBH_Process+0x3b6>
      break;
 8004f90:	bf00      	nop
  }
  return USBH_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af04      	add	r7, sp, #16
 8004fa2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	785b      	ldrb	r3, [r3, #1]
 8004fb0:	2b07      	cmp	r3, #7
 8004fb2:	f200 81c1 	bhi.w	8005338 <USBH_HandleEnum+0x39c>
 8004fb6:	a201      	add	r2, pc, #4	; (adr r2, 8004fbc <USBH_HandleEnum+0x20>)
 8004fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbc:	08004fdd 	.word	0x08004fdd
 8004fc0:	0800509b 	.word	0x0800509b
 8004fc4:	08005105 	.word	0x08005105
 8004fc8:	08005193 	.word	0x08005193
 8004fcc:	080051fd 	.word	0x080051fd
 8004fd0:	0800526d 	.word	0x0800526d
 8004fd4:	080052b3 	.word	0x080052b3
 8004fd8:	080052f9 	.word	0x080052f9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8004fdc:	2108      	movs	r1, #8
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fa50 	bl	8005484 <USBH_Get_DevDesc>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8004fe8:	7bbb      	ldrb	r3, [r7, #14]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d130      	bne.n	8005050 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	7919      	ldrb	r1, [r3, #4]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005012:	b292      	uxth	r2, r2
 8005014:	9202      	str	r2, [sp, #8]
 8005016:	2200      	movs	r2, #0
 8005018:	9201      	str	r2, [sp, #4]
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	4603      	mov	r3, r0
 800501e:	2280      	movs	r2, #128	; 0x80
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 ff77 	bl	8005f14 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	7959      	ldrb	r1, [r3, #5]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800503a:	b292      	uxth	r2, r2
 800503c:	9202      	str	r2, [sp, #8]
 800503e:	2200      	movs	r2, #0
 8005040:	9201      	str	r2, [sp, #4]
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	4603      	mov	r3, r0
 8005046:	2200      	movs	r2, #0
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 ff63 	bl	8005f14 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800504e:	e175      	b.n	800533c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005050:	7bbb      	ldrb	r3, [r7, #14]
 8005052:	2b03      	cmp	r3, #3
 8005054:	f040 8172 	bne.w	800533c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800505e:	3301      	adds	r3, #1
 8005060:	b2da      	uxtb	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800506e:	2b03      	cmp	r3, #3
 8005070:	d903      	bls.n	800507a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	220d      	movs	r2, #13
 8005076:	701a      	strb	r2, [r3, #0]
      break;
 8005078:	e160      	b.n	800533c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	795b      	ldrb	r3, [r3, #5]
 800507e:	4619      	mov	r1, r3
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 ff97 	bl	8005fb4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	791b      	ldrb	r3, [r3, #4]
 800508a:	4619      	mov	r1, r3
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 ff91 	bl	8005fb4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	701a      	strb	r2, [r3, #0]
      break;
 8005098:	e150      	b.n	800533c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800509a:	2112      	movs	r1, #18
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f9f1 	bl	8005484 <USBH_Get_DevDesc>
 80050a2:	4603      	mov	r3, r0
 80050a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80050a6:	7bbb      	ldrb	r3, [r7, #14]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d103      	bne.n	80050b4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80050b2:	e145      	b.n	8005340 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80050b4:	7bbb      	ldrb	r3, [r7, #14]
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	f040 8142 	bne.w	8005340 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80050c2:	3301      	adds	r3, #1
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	d903      	bls.n	80050de <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	220d      	movs	r2, #13
 80050da:	701a      	strb	r2, [r3, #0]
      break;
 80050dc:	e130      	b.n	8005340 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	795b      	ldrb	r3, [r3, #5]
 80050e2:	4619      	mov	r1, r3
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 ff65 	bl	8005fb4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	791b      	ldrb	r3, [r3, #4]
 80050ee:	4619      	mov	r1, r3
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 ff5f 	bl	8005fb4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	701a      	strb	r2, [r3, #0]
      break;
 8005102:	e11d      	b.n	8005340 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8005104:	2101      	movs	r1, #1
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fa68 	bl	80055dc <USBH_SetAddress>
 800510c:	4603      	mov	r3, r0
 800510e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005110:	7bbb      	ldrb	r3, [r7, #14]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d132      	bne.n	800517c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8005116:	2002      	movs	r0, #2
 8005118:	f001 fa42 	bl	80065a0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2203      	movs	r2, #3
 8005128:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	7919      	ldrb	r1, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800513e:	b292      	uxth	r2, r2
 8005140:	9202      	str	r2, [sp, #8]
 8005142:	2200      	movs	r2, #0
 8005144:	9201      	str	r2, [sp, #4]
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	4603      	mov	r3, r0
 800514a:	2280      	movs	r2, #128	; 0x80
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 fee1 	bl	8005f14 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	7959      	ldrb	r1, [r3, #5]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005166:	b292      	uxth	r2, r2
 8005168:	9202      	str	r2, [sp, #8]
 800516a:	2200      	movs	r2, #0
 800516c:	9201      	str	r2, [sp, #4]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	4603      	mov	r3, r0
 8005172:	2200      	movs	r2, #0
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 fecd 	bl	8005f14 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800517a:	e0e3      	b.n	8005344 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800517c:	7bbb      	ldrb	r3, [r7, #14]
 800517e:	2b03      	cmp	r3, #3
 8005180:	f040 80e0 	bne.w	8005344 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	220d      	movs	r2, #13
 8005188:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	705a      	strb	r2, [r3, #1]
      break;
 8005190:	e0d8      	b.n	8005344 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8005192:	2109      	movs	r1, #9
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f99d 	bl	80054d4 <USBH_Get_CfgDesc>
 800519a:	4603      	mov	r3, r0
 800519c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800519e:	7bbb      	ldrb	r3, [r7, #14]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d103      	bne.n	80051ac <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2204      	movs	r2, #4
 80051a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80051aa:	e0cd      	b.n	8005348 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80051ac:	7bbb      	ldrb	r3, [r7, #14]
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	f040 80ca 	bne.w	8005348 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80051ba:	3301      	adds	r3, #1
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80051ca:	2b03      	cmp	r3, #3
 80051cc:	d903      	bls.n	80051d6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	220d      	movs	r2, #13
 80051d2:	701a      	strb	r2, [r3, #0]
      break;
 80051d4:	e0b8      	b.n	8005348 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	795b      	ldrb	r3, [r3, #5]
 80051da:	4619      	mov	r1, r3
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fee9 	bl	8005fb4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	791b      	ldrb	r3, [r3, #4]
 80051e6:	4619      	mov	r1, r3
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fee3 	bl	8005fb4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	701a      	strb	r2, [r3, #0]
      break;
 80051fa:	e0a5      	b.n	8005348 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8005202:	4619      	mov	r1, r3
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f965 	bl	80054d4 <USBH_Get_CfgDesc>
 800520a:	4603      	mov	r3, r0
 800520c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800520e:	7bbb      	ldrb	r3, [r7, #14]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d103      	bne.n	800521c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2205      	movs	r2, #5
 8005218:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800521a:	e097      	b.n	800534c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800521c:	7bbb      	ldrb	r3, [r7, #14]
 800521e:	2b03      	cmp	r3, #3
 8005220:	f040 8094 	bne.w	800534c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800522a:	3301      	adds	r3, #1
 800522c:	b2da      	uxtb	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800523a:	2b03      	cmp	r3, #3
 800523c:	d903      	bls.n	8005246 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	220d      	movs	r2, #13
 8005242:	701a      	strb	r2, [r3, #0]
      break;
 8005244:	e082      	b.n	800534c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	795b      	ldrb	r3, [r3, #5]
 800524a:	4619      	mov	r1, r3
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 feb1 	bl	8005fb4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	791b      	ldrb	r3, [r3, #4]
 8005256:	4619      	mov	r1, r3
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 feab 	bl	8005fb4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	701a      	strb	r2, [r3, #0]
      break;
 800526a:	e06f      	b.n	800534c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8005272:	2b00      	cmp	r3, #0
 8005274:	d019      	beq.n	80052aa <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8005282:	23ff      	movs	r3, #255	; 0xff
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f949 	bl	800551c <USBH_Get_StringDesc>
 800528a:	4603      	mov	r3, r0
 800528c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800528e:	7bbb      	ldrb	r3, [r7, #14]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d103      	bne.n	800529c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2206      	movs	r2, #6
 8005298:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800529a:	e059      	b.n	8005350 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800529c:	7bbb      	ldrb	r3, [r7, #14]
 800529e:	2b03      	cmp	r3, #3
 80052a0:	d156      	bne.n	8005350 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2206      	movs	r2, #6
 80052a6:	705a      	strb	r2, [r3, #1]
      break;
 80052a8:	e052      	b.n	8005350 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2206      	movs	r2, #6
 80052ae:	705a      	strb	r2, [r3, #1]
      break;
 80052b0:	e04e      	b.n	8005350 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d019      	beq.n	80052f0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80052c8:	23ff      	movs	r3, #255	; 0xff
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f926 	bl	800551c <USBH_Get_StringDesc>
 80052d0:	4603      	mov	r3, r0
 80052d2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80052d4:	7bbb      	ldrb	r3, [r7, #14]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d103      	bne.n	80052e2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2207      	movs	r2, #7
 80052de:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80052e0:	e038      	b.n	8005354 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80052e2:	7bbb      	ldrb	r3, [r7, #14]
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d135      	bne.n	8005354 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2207      	movs	r2, #7
 80052ec:	705a      	strb	r2, [r3, #1]
      break;
 80052ee:	e031      	b.n	8005354 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2207      	movs	r2, #7
 80052f4:	705a      	strb	r2, [r3, #1]
      break;
 80052f6:	e02d      	b.n	8005354 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d017      	beq.n	8005332 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800530e:	23ff      	movs	r3, #255	; 0xff
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f903 	bl	800551c <USBH_Get_StringDesc>
 8005316:	4603      	mov	r3, r0
 8005318:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800531a:	7bbb      	ldrb	r3, [r7, #14]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d102      	bne.n	8005326 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8005324:	e018      	b.n	8005358 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005326:	7bbb      	ldrb	r3, [r7, #14]
 8005328:	2b03      	cmp	r3, #3
 800532a:	d115      	bne.n	8005358 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800532c:	2300      	movs	r3, #0
 800532e:	73fb      	strb	r3, [r7, #15]
      break;
 8005330:	e012      	b.n	8005358 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	73fb      	strb	r3, [r7, #15]
      break;
 8005336:	e00f      	b.n	8005358 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8005338:	bf00      	nop
 800533a:	e00e      	b.n	800535a <USBH_HandleEnum+0x3be>
      break;
 800533c:	bf00      	nop
 800533e:	e00c      	b.n	800535a <USBH_HandleEnum+0x3be>
      break;
 8005340:	bf00      	nop
 8005342:	e00a      	b.n	800535a <USBH_HandleEnum+0x3be>
      break;
 8005344:	bf00      	nop
 8005346:	e008      	b.n	800535a <USBH_HandleEnum+0x3be>
      break;
 8005348:	bf00      	nop
 800534a:	e006      	b.n	800535a <USBH_HandleEnum+0x3be>
      break;
 800534c:	bf00      	nop
 800534e:	e004      	b.n	800535a <USBH_HandleEnum+0x3be>
      break;
 8005350:	bf00      	nop
 8005352:	e002      	b.n	800535a <USBH_HandleEnum+0x3be>
      break;
 8005354:	bf00      	nop
 8005356:	e000      	b.n	800535a <USBH_HandleEnum+0x3be>
      break;
 8005358:	bf00      	nop
  }
  return Status;
 800535a:	7bfb      	ldrb	r3, [r7, #15]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b082      	sub	sp, #8
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f804 	bl	80053a6 <USBH_HandleSof>
}
 800539e:	bf00      	nop
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b082      	sub	sp, #8
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b0b      	cmp	r3, #11
 80053b6:	d10a      	bne.n	80053ce <USBH_HandleSof+0x28>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d005      	beq.n	80053ce <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	4798      	blx	r3
  }
}
 80053ce:	bf00      	nop
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80053e6:	bf00      	nop
}
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8005402:	bf00      	nop
}
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 ff56 	bl	800630e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	791b      	ldrb	r3, [r3, #4]
 8005466:	4619      	mov	r1, r3
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fda3 	bl	8005fb4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	795b      	ldrb	r3, [r3, #5]
 8005472:	4619      	mov	r1, r3
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fd9d 	bl	8005fb4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af02      	add	r7, sp, #8
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	460b      	mov	r3, r1
 800548e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8005496:	78fb      	ldrb	r3, [r7, #3]
 8005498:	b29b      	uxth	r3, r3
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	4613      	mov	r3, r2
 800549e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054a2:	2100      	movs	r1, #0
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f864 	bl	8005572 <USBH_GetDescriptor>
 80054aa:	4603      	mov	r3, r0
 80054ac:	73fb      	strb	r3, [r7, #15]
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10a      	bne.n	80054ca <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80054c0:	78fa      	ldrb	r2, [r7, #3]
 80054c2:	b292      	uxth	r2, r2
 80054c4:	4619      	mov	r1, r3
 80054c6:	f000 f918 	bl	80056fa <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af02      	add	r7, sp, #8
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	331c      	adds	r3, #28
 80054e4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80054e6:	887b      	ldrh	r3, [r7, #2]
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054f0:	2100      	movs	r1, #0
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f83d 	bl	8005572 <USBH_GetDescriptor>
 80054f8:	4603      	mov	r3, r0
 80054fa:	72fb      	strb	r3, [r7, #11]
 80054fc:	7afb      	ldrb	r3, [r7, #11]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d107      	bne.n	8005512 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005508:	887a      	ldrh	r2, [r7, #2]
 800550a:	68f9      	ldr	r1, [r7, #12]
 800550c:	4618      	mov	r0, r3
 800550e:	f000 f964 	bl	80057da <USBH_ParseCfgDesc>
  }

  return status;
 8005512:	7afb      	ldrb	r3, [r7, #11]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b088      	sub	sp, #32
 8005520:	af02      	add	r7, sp, #8
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	607a      	str	r2, [r7, #4]
 8005526:	461a      	mov	r2, r3
 8005528:	460b      	mov	r3, r1
 800552a:	72fb      	strb	r3, [r7, #11]
 800552c:	4613      	mov	r3, r2
 800552e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8005530:	7afb      	ldrb	r3, [r7, #11]
 8005532:	b29b      	uxth	r3, r3
 8005534:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005538:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8005540:	893b      	ldrh	r3, [r7, #8]
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	460b      	mov	r3, r1
 8005546:	2100      	movs	r1, #0
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 f812 	bl	8005572 <USBH_GetDescriptor>
 800554e:	4603      	mov	r3, r0
 8005550:	75fb      	strb	r3, [r7, #23]
 8005552:	7dfb      	ldrb	r3, [r7, #23]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d107      	bne.n	8005568 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800555e:	893a      	ldrh	r2, [r7, #8]
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fa37 	bl	80059d6 <USBH_ParseStringDesc>
  }

  return status;
 8005568:	7dfb      	ldrb	r3, [r7, #23]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b084      	sub	sp, #16
 8005576:	af00      	add	r7, sp, #0
 8005578:	60f8      	str	r0, [r7, #12]
 800557a:	607b      	str	r3, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	72fb      	strb	r3, [r7, #11]
 8005580:	4613      	mov	r3, r2
 8005582:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	789b      	ldrb	r3, [r3, #2]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d11c      	bne.n	80055c6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800558c:	7afb      	ldrb	r3, [r7, #11]
 800558e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005592:	b2da      	uxtb	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2206      	movs	r2, #6
 800559c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	893a      	ldrh	r2, [r7, #8]
 80055a2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80055a4:	893b      	ldrh	r3, [r7, #8]
 80055a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80055aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ae:	d104      	bne.n	80055ba <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f240 4209 	movw	r2, #1033	; 0x409
 80055b6:	829a      	strh	r2, [r3, #20]
 80055b8:	e002      	b.n	80055c0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8b3a      	ldrh	r2, [r7, #24]
 80055c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80055c6:	8b3b      	ldrh	r3, [r7, #24]
 80055c8:	461a      	mov	r2, r3
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 fa50 	bl	8005a72 <USBH_CtlReq>
 80055d2:	4603      	mov	r3, r0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	460b      	mov	r3, r1
 80055e6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	789b      	ldrb	r3, [r3, #2]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d10f      	bne.n	8005610 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2205      	movs	r2, #5
 80055fa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80055fc:	78fb      	ldrb	r3, [r7, #3]
 80055fe:	b29a      	uxth	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8005610:	2200      	movs	r2, #0
 8005612:	2100      	movs	r1, #0
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 fa2c 	bl	8005a72 <USBH_CtlReq>
 800561a:	4603      	mov	r3, r0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	460b      	mov	r3, r1
 800562e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	789b      	ldrb	r3, [r3, #2]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d10e      	bne.n	8005656 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2209      	movs	r2, #9
 8005642:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	887a      	ldrh	r2, [r7, #2]
 8005648:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8005656:	2200      	movs	r2, #0
 8005658:	2100      	movs	r1, #0
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 fa09 	bl	8005a72 <USBH_CtlReq>
 8005660:	4603      	mov	r3, r0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b082      	sub	sp, #8
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	460b      	mov	r3, r1
 8005674:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	789b      	ldrb	r3, [r3, #2]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d10f      	bne.n	800569e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2203      	movs	r2, #3
 8005688:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800568a:	78fb      	ldrb	r3, [r7, #3]
 800568c:	b29a      	uxth	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800569e:	2200      	movs	r2, #0
 80056a0:	2100      	movs	r1, #0
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f9e5 	bl	8005a72 <USBH_CtlReq>
 80056a8:	4603      	mov	r3, r0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b082      	sub	sp, #8
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	460b      	mov	r3, r1
 80056bc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	789b      	ldrb	r3, [r3, #2]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d10f      	bne.n	80056e6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2202      	movs	r2, #2
 80056ca:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80056d8:	78fb      	ldrb	r3, [r7, #3]
 80056da:	b29a      	uxth	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80056e6:	2200      	movs	r2, #0
 80056e8:	2100      	movs	r1, #0
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f9c1 	bl	8005a72 <USBH_CtlReq>
 80056f0:	4603      	mov	r3, r0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b085      	sub	sp, #20
 80056fe:	af00      	add	r7, sp, #0
 8005700:	60f8      	str	r0, [r7, #12]
 8005702:	60b9      	str	r1, [r7, #8]
 8005704:	4613      	mov	r3, r2
 8005706:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	781a      	ldrb	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	785a      	ldrb	r2, [r3, #1]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	3302      	adds	r3, #2
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	b29a      	uxth	r2, r3
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	3303      	adds	r3, #3
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	b29b      	uxth	r3, r3
 8005728:	021b      	lsls	r3, r3, #8
 800572a:	b29b      	uxth	r3, r3
 800572c:	4313      	orrs	r3, r2
 800572e:	b29a      	uxth	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	791a      	ldrb	r2, [r3, #4]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	795a      	ldrb	r2, [r3, #5]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	799a      	ldrb	r2, [r3, #6]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	79da      	ldrb	r2, [r3, #7]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8005754:	88fb      	ldrh	r3, [r7, #6]
 8005756:	2b08      	cmp	r3, #8
 8005758:	d939      	bls.n	80057ce <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	3308      	adds	r3, #8
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	b29a      	uxth	r2, r3
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	3309      	adds	r3, #9
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	b29b      	uxth	r3, r3
 800576a:	021b      	lsls	r3, r3, #8
 800576c:	b29b      	uxth	r3, r3
 800576e:	4313      	orrs	r3, r2
 8005770:	b29a      	uxth	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	330a      	adds	r3, #10
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	b29a      	uxth	r2, r3
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	330b      	adds	r3, #11
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	b29b      	uxth	r3, r3
 8005786:	021b      	lsls	r3, r3, #8
 8005788:	b29b      	uxth	r3, r3
 800578a:	4313      	orrs	r3, r2
 800578c:	b29a      	uxth	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	330c      	adds	r3, #12
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	b29a      	uxth	r2, r3
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	330d      	adds	r3, #13
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	021b      	lsls	r3, r3, #8
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	4313      	orrs	r3, r2
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	7b9a      	ldrb	r2, [r3, #14]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	7bda      	ldrb	r2, [r3, #15]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	7c1a      	ldrb	r2, [r3, #16]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	7c5a      	ldrb	r2, [r3, #17]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	745a      	strb	r2, [r3, #17]
  }
}
 80057ce:	bf00      	nop
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b08a      	sub	sp, #40	; 0x28
 80057de:	af00      	add	r7, sp, #0
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	4613      	mov	r3, r2
 80057e6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	781a      	ldrb	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	785a      	ldrb	r2, [r3, #1]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	3302      	adds	r3, #2
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	b29a      	uxth	r2, r3
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	3303      	adds	r3, #3
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	b29b      	uxth	r3, r3
 800581c:	021b      	lsls	r3, r3, #8
 800581e:	b29b      	uxth	r3, r3
 8005820:	4313      	orrs	r3, r2
 8005822:	b29a      	uxth	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	791a      	ldrb	r2, [r3, #4]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	795a      	ldrb	r2, [r3, #5]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	799a      	ldrb	r2, [r3, #6]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	79da      	ldrb	r2, [r3, #7]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	7a1a      	ldrb	r2, [r3, #8]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8005850:	88fb      	ldrh	r3, [r7, #6]
 8005852:	2b09      	cmp	r3, #9
 8005854:	d95f      	bls.n	8005916 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8005856:	2309      	movs	r3, #9
 8005858:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800585a:	2300      	movs	r3, #0
 800585c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800585e:	e051      	b.n	8005904 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8005860:	f107 0316 	add.w	r3, r7, #22
 8005864:	4619      	mov	r1, r3
 8005866:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005868:	f000 f8e8 	bl	8005a3c <USBH_GetNextDesc>
 800586c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	785b      	ldrb	r3, [r3, #1]
 8005872:	2b04      	cmp	r3, #4
 8005874:	d146      	bne.n	8005904 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8005876:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800587a:	221a      	movs	r2, #26
 800587c:	fb02 f303 	mul.w	r3, r2, r3
 8005880:	3308      	adds	r3, #8
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4413      	add	r3, r2
 8005886:	3302      	adds	r3, #2
 8005888:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800588a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800588c:	69f8      	ldr	r0, [r7, #28]
 800588e:	f000 f846 	bl	800591e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8005898:	2300      	movs	r3, #0
 800589a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800589c:	e022      	b.n	80058e4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800589e:	f107 0316 	add.w	r3, r7, #22
 80058a2:	4619      	mov	r1, r3
 80058a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058a6:	f000 f8c9 	bl	8005a3c <USBH_GetNextDesc>
 80058aa:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	785b      	ldrb	r3, [r3, #1]
 80058b0:	2b05      	cmp	r3, #5
 80058b2:	d117      	bne.n	80058e4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80058b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058b8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80058bc:	3201      	adds	r2, #1
 80058be:	00d2      	lsls	r2, r2, #3
 80058c0:	211a      	movs	r1, #26
 80058c2:	fb01 f303 	mul.w	r3, r1, r3
 80058c6:	4413      	add	r3, r2
 80058c8:	3308      	adds	r3, #8
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4413      	add	r3, r2
 80058ce:	3304      	adds	r3, #4
 80058d0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80058d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058d4:	69b8      	ldr	r0, [r7, #24]
 80058d6:	f000 f851 	bl	800597c <USBH_ParseEPDesc>
            ep_ix++;
 80058da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80058de:	3301      	adds	r3, #1
 80058e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	791b      	ldrb	r3, [r3, #4]
 80058e8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d204      	bcs.n	80058fa <USBH_ParseCfgDesc+0x120>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	885a      	ldrh	r2, [r3, #2]
 80058f4:	8afb      	ldrh	r3, [r7, #22]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d8d1      	bhi.n	800589e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80058fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058fe:	3301      	adds	r3, #1
 8005900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8005904:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005908:	2b01      	cmp	r3, #1
 800590a:	d804      	bhi.n	8005916 <USBH_ParseCfgDesc+0x13c>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	885a      	ldrh	r2, [r3, #2]
 8005910:	8afb      	ldrh	r3, [r7, #22]
 8005912:	429a      	cmp	r2, r3
 8005914:	d8a4      	bhi.n	8005860 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8005916:	bf00      	nop
 8005918:	3728      	adds	r7, #40	; 0x28
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781a      	ldrb	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	785a      	ldrb	r2, [r3, #1]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	789a      	ldrb	r2, [r3, #2]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	78da      	ldrb	r2, [r3, #3]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	791a      	ldrb	r2, [r3, #4]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	795a      	ldrb	r2, [r3, #5]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	799a      	ldrb	r2, [r3, #6]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	79da      	ldrb	r2, [r3, #7]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	7a1a      	ldrb	r2, [r3, #8]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	721a      	strb	r2, [r3, #8]
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	781a      	ldrb	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	785a      	ldrb	r2, [r3, #1]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	789a      	ldrb	r2, [r3, #2]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	78da      	ldrb	r2, [r3, #3]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	3304      	adds	r3, #4
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	3305      	adds	r3, #5
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	021b      	lsls	r3, r3, #8
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	4313      	orrs	r3, r2
 80059bc:	b29a      	uxth	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	799a      	ldrb	r2, [r3, #6]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	719a      	strb	r2, [r3, #6]
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b087      	sub	sp, #28
 80059da:	af00      	add	r7, sp, #0
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	60b9      	str	r1, [r7, #8]
 80059e0:	4613      	mov	r3, r2
 80059e2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	3301      	adds	r3, #1
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d120      	bne.n	8005a30 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	1e9a      	subs	r2, r3, #2
 80059f4:	88fb      	ldrh	r3, [r7, #6]
 80059f6:	4293      	cmp	r3, r2
 80059f8:	bf28      	it	cs
 80059fa:	4613      	movcs	r3, r2
 80059fc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	3302      	adds	r3, #2
 8005a02:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8005a04:	2300      	movs	r3, #0
 8005a06:	82fb      	strh	r3, [r7, #22]
 8005a08:	e00b      	b.n	8005a22 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8005a0a:	8afb      	ldrh	r3, [r7, #22]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4413      	add	r3, r2
 8005a10:	781a      	ldrb	r2, [r3, #0]
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	701a      	strb	r2, [r3, #0]
      pdest++;
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8005a1c:	8afb      	ldrh	r3, [r7, #22]
 8005a1e:	3302      	adds	r3, #2
 8005a20:	82fb      	strh	r3, [r7, #22]
 8005a22:	8afa      	ldrh	r2, [r7, #22]
 8005a24:	8abb      	ldrh	r3, [r7, #20]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d3ef      	bcc.n	8005a0a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	701a      	strb	r2, [r3, #0]
  }
}
 8005a30:	bf00      	nop
 8005a32:	371c      	adds	r7, #28
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	881a      	ldrh	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	4413      	add	r3, r2
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4413      	add	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005a64:	68fb      	ldr	r3, [r7, #12]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b086      	sub	sp, #24
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	60f8      	str	r0, [r7, #12]
 8005a7a:	60b9      	str	r1, [r7, #8]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8005a80:	2301      	movs	r3, #1
 8005a82:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	789b      	ldrb	r3, [r3, #2]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d002      	beq.n	8005a92 <USBH_CtlReq+0x20>
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d00f      	beq.n	8005ab0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8005a90:	e027      	b.n	8005ae2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	88fa      	ldrh	r2, [r7, #6]
 8005a9c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	75fb      	strb	r3, [r7, #23]
      break;
 8005aae:	e018      	b.n	8005ae2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f000 f81b 	bl	8005aec <USBH_HandleControl>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8005aba:	7dfb      	ldrb	r3, [r7, #23]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <USBH_CtlReq+0x54>
 8005ac0:	7dfb      	ldrb	r3, [r7, #23]
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d106      	bne.n	8005ad4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	761a      	strb	r2, [r3, #24]
      break;
 8005ad2:	e005      	b.n	8005ae0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8005ad4:	7dfb      	ldrb	r3, [r7, #23]
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d102      	bne.n	8005ae0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2201      	movs	r2, #1
 8005ade:	709a      	strb	r2, [r3, #2]
      break;
 8005ae0:	bf00      	nop
  }
  return status;
 8005ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3718      	adds	r7, #24
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8005af4:	2301      	movs	r3, #1
 8005af6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005af8:	2300      	movs	r3, #0
 8005afa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	7e1b      	ldrb	r3, [r3, #24]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	2b0a      	cmp	r3, #10
 8005b04:	f200 8156 	bhi.w	8005db4 <USBH_HandleControl+0x2c8>
 8005b08:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <USBH_HandleControl+0x24>)
 8005b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0e:	bf00      	nop
 8005b10:	08005b3d 	.word	0x08005b3d
 8005b14:	08005b57 	.word	0x08005b57
 8005b18:	08005bc1 	.word	0x08005bc1
 8005b1c:	08005be7 	.word	0x08005be7
 8005b20:	08005c1f 	.word	0x08005c1f
 8005b24:	08005c49 	.word	0x08005c49
 8005b28:	08005c9b 	.word	0x08005c9b
 8005b2c:	08005cbd 	.word	0x08005cbd
 8005b30:	08005cf9 	.word	0x08005cf9
 8005b34:	08005d1f 	.word	0x08005d1f
 8005b38:	08005d5d 	.word	0x08005d5d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f103 0110 	add.w	r1, r3, #16
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	795b      	ldrb	r3, [r3, #5]
 8005b46:	461a      	mov	r2, r3
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 f943 	bl	8005dd4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2202      	movs	r2, #2
 8005b52:	761a      	strb	r2, [r3, #24]
      break;
 8005b54:	e139      	b.n	8005dca <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	795b      	ldrb	r3, [r3, #5]
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 fcc5 	bl	80064ec <USBH_LL_GetURBState>
 8005b62:	4603      	mov	r3, r0
 8005b64:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8005b66:	7bbb      	ldrb	r3, [r7, #14]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d11e      	bne.n	8005baa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	7c1b      	ldrb	r3, [r3, #16]
 8005b70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b74:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	8adb      	ldrh	r3, [r3, #22]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8005b7e:	7b7b      	ldrb	r3, [r7, #13]
 8005b80:	2b80      	cmp	r3, #128	; 0x80
 8005b82:	d103      	bne.n	8005b8c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2203      	movs	r2, #3
 8005b88:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005b8a:	e115      	b.n	8005db8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2205      	movs	r2, #5
 8005b90:	761a      	strb	r2, [r3, #24]
      break;
 8005b92:	e111      	b.n	8005db8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8005b94:	7b7b      	ldrb	r3, [r7, #13]
 8005b96:	2b80      	cmp	r3, #128	; 0x80
 8005b98:	d103      	bne.n	8005ba2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2209      	movs	r2, #9
 8005b9e:	761a      	strb	r2, [r3, #24]
      break;
 8005ba0:	e10a      	b.n	8005db8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2207      	movs	r2, #7
 8005ba6:	761a      	strb	r2, [r3, #24]
      break;
 8005ba8:	e106      	b.n	8005db8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8005baa:	7bbb      	ldrb	r3, [r7, #14]
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	d003      	beq.n	8005bb8 <USBH_HandleControl+0xcc>
 8005bb0:	7bbb      	ldrb	r3, [r7, #14]
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	f040 8100 	bne.w	8005db8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	220b      	movs	r2, #11
 8005bbc:	761a      	strb	r2, [r3, #24]
      break;
 8005bbe:	e0fb      	b.n	8005db8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6899      	ldr	r1, [r3, #8]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	899a      	ldrh	r2, [r3, #12]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	791b      	ldrb	r3, [r3, #4]
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f93a 	bl	8005e52 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2204      	movs	r2, #4
 8005be2:	761a      	strb	r2, [r3, #24]
      break;
 8005be4:	e0f1      	b.n	8005dca <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	791b      	ldrb	r3, [r3, #4]
 8005bea:	4619      	mov	r1, r3
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 fc7d 	bl	80064ec <USBH_LL_GetURBState>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8005bf6:	7bbb      	ldrb	r3, [r7, #14]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d102      	bne.n	8005c02 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2209      	movs	r2, #9
 8005c00:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8005c02:	7bbb      	ldrb	r3, [r7, #14]
 8005c04:	2b05      	cmp	r3, #5
 8005c06:	d102      	bne.n	8005c0e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005c0c:	e0d6      	b.n	8005dbc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8005c0e:	7bbb      	ldrb	r3, [r7, #14]
 8005c10:	2b04      	cmp	r3, #4
 8005c12:	f040 80d3 	bne.w	8005dbc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	220b      	movs	r2, #11
 8005c1a:	761a      	strb	r2, [r3, #24]
      break;
 8005c1c:	e0ce      	b.n	8005dbc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6899      	ldr	r1, [r3, #8]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	899a      	ldrh	r2, [r3, #12]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	795b      	ldrb	r3, [r3, #5]
 8005c2a:	2001      	movs	r0, #1
 8005c2c:	9000      	str	r0, [sp, #0]
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f8ea 	bl	8005e08 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2206      	movs	r2, #6
 8005c44:	761a      	strb	r2, [r3, #24]
      break;
 8005c46:	e0c0      	b.n	8005dca <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	795b      	ldrb	r3, [r3, #5]
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 fc4c 	bl	80064ec <USBH_LL_GetURBState>
 8005c54:	4603      	mov	r3, r0
 8005c56:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8005c58:	7bbb      	ldrb	r3, [r7, #14]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d103      	bne.n	8005c66 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2207      	movs	r2, #7
 8005c62:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005c64:	e0ac      	b.n	8005dc0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8005c66:	7bbb      	ldrb	r3, [r7, #14]
 8005c68:	2b05      	cmp	r3, #5
 8005c6a:	d105      	bne.n	8005c78 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	220c      	movs	r2, #12
 8005c70:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8005c72:	2303      	movs	r3, #3
 8005c74:	73fb      	strb	r3, [r7, #15]
      break;
 8005c76:	e0a3      	b.n	8005dc0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005c78:	7bbb      	ldrb	r3, [r7, #14]
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d103      	bne.n	8005c86 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2205      	movs	r2, #5
 8005c82:	761a      	strb	r2, [r3, #24]
      break;
 8005c84:	e09c      	b.n	8005dc0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8005c86:	7bbb      	ldrb	r3, [r7, #14]
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	f040 8099 	bne.w	8005dc0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	220b      	movs	r2, #11
 8005c92:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8005c94:	2302      	movs	r3, #2
 8005c96:	73fb      	strb	r3, [r7, #15]
      break;
 8005c98:	e092      	b.n	8005dc0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	791b      	ldrb	r3, [r3, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f8d5 	bl	8005e52 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2208      	movs	r2, #8
 8005cb8:	761a      	strb	r2, [r3, #24]

      break;
 8005cba:	e086      	b.n	8005dca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	791b      	ldrb	r3, [r3, #4]
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fc12 	bl	80064ec <USBH_LL_GetURBState>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8005ccc:	7bbb      	ldrb	r3, [r7, #14]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d105      	bne.n	8005cde <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	220d      	movs	r2, #13
 8005cd6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005cdc:	e072      	b.n	8005dc4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8005cde:	7bbb      	ldrb	r3, [r7, #14]
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d103      	bne.n	8005cec <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	220b      	movs	r2, #11
 8005ce8:	761a      	strb	r2, [r3, #24]
      break;
 8005cea:	e06b      	b.n	8005dc4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8005cec:	7bbb      	ldrb	r3, [r7, #14]
 8005cee:	2b05      	cmp	r3, #5
 8005cf0:	d168      	bne.n	8005dc4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	73fb      	strb	r3, [r7, #15]
      break;
 8005cf6:	e065      	b.n	8005dc4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	795b      	ldrb	r3, [r3, #5]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	9200      	str	r2, [sp, #0]
 8005d00:	2200      	movs	r2, #0
 8005d02:	2100      	movs	r1, #0
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f87f 	bl	8005e08 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	220a      	movs	r2, #10
 8005d1a:	761a      	strb	r2, [r3, #24]
      break;
 8005d1c:	e055      	b.n	8005dca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	795b      	ldrb	r3, [r3, #5]
 8005d22:	4619      	mov	r1, r3
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fbe1 	bl	80064ec <USBH_LL_GetURBState>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8005d2e:	7bbb      	ldrb	r3, [r7, #14]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d105      	bne.n	8005d40 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	220d      	movs	r2, #13
 8005d3c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005d3e:	e043      	b.n	8005dc8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005d40:	7bbb      	ldrb	r3, [r7, #14]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d103      	bne.n	8005d4e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2209      	movs	r2, #9
 8005d4a:	761a      	strb	r2, [r3, #24]
      break;
 8005d4c:	e03c      	b.n	8005dc8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8005d4e:	7bbb      	ldrb	r3, [r7, #14]
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	d139      	bne.n	8005dc8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	220b      	movs	r2, #11
 8005d58:	761a      	strb	r2, [r3, #24]
      break;
 8005d5a:	e035      	b.n	8005dc8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	7e5b      	ldrb	r3, [r3, #25]
 8005d60:	3301      	adds	r3, #1
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	765a      	strb	r2, [r3, #25]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	7e5b      	ldrb	r3, [r3, #25]
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d806      	bhi.n	8005d7e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8005d7c:	e025      	b.n	8005dca <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d84:	2106      	movs	r1, #6
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	795b      	ldrb	r3, [r3, #5]
 8005d94:	4619      	mov	r1, r3
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f90c 	bl	8005fb4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	791b      	ldrb	r3, [r3, #4]
 8005da0:	4619      	mov	r1, r3
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f906 	bl	8005fb4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8005dae:	2302      	movs	r3, #2
 8005db0:	73fb      	strb	r3, [r7, #15]
      break;
 8005db2:	e00a      	b.n	8005dca <USBH_HandleControl+0x2de>

    default:
      break;
 8005db4:	bf00      	nop
 8005db6:	e008      	b.n	8005dca <USBH_HandleControl+0x2de>
      break;
 8005db8:	bf00      	nop
 8005dba:	e006      	b.n	8005dca <USBH_HandleControl+0x2de>
      break;
 8005dbc:	bf00      	nop
 8005dbe:	e004      	b.n	8005dca <USBH_HandleControl+0x2de>
      break;
 8005dc0:	bf00      	nop
 8005dc2:	e002      	b.n	8005dca <USBH_HandleControl+0x2de>
      break;
 8005dc4:	bf00      	nop
 8005dc6:	e000      	b.n	8005dca <USBH_HandleControl+0x2de>
      break;
 8005dc8:	bf00      	nop
  }

  return status;
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af04      	add	r7, sp, #16
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	4613      	mov	r3, r2
 8005de0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005de2:	79f9      	ldrb	r1, [r7, #7]
 8005de4:	2300      	movs	r3, #0
 8005de6:	9303      	str	r3, [sp, #12]
 8005de8:	2308      	movs	r3, #8
 8005dea:	9302      	str	r3, [sp, #8]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	9301      	str	r3, [sp, #4]
 8005df0:	2300      	movs	r3, #0
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	2300      	movs	r3, #0
 8005df6:	2200      	movs	r2, #0
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 fb46 	bl	800648a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af04      	add	r7, sp, #16
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	4611      	mov	r1, r2
 8005e14:	461a      	mov	r2, r3
 8005e16:	460b      	mov	r3, r1
 8005e18:	80fb      	strh	r3, [r7, #6]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005e2c:	7979      	ldrb	r1, [r7, #5]
 8005e2e:	7e3b      	ldrb	r3, [r7, #24]
 8005e30:	9303      	str	r3, [sp, #12]
 8005e32:	88fb      	ldrh	r3, [r7, #6]
 8005e34:	9302      	str	r3, [sp, #8]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	9301      	str	r3, [sp, #4]
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	2300      	movs	r3, #0
 8005e40:	2200      	movs	r2, #0
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f000 fb21 	bl	800648a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b088      	sub	sp, #32
 8005e56:	af04      	add	r7, sp, #16
 8005e58:	60f8      	str	r0, [r7, #12]
 8005e5a:	60b9      	str	r1, [r7, #8]
 8005e5c:	4611      	mov	r1, r2
 8005e5e:	461a      	mov	r2, r3
 8005e60:	460b      	mov	r3, r1
 8005e62:	80fb      	strh	r3, [r7, #6]
 8005e64:	4613      	mov	r3, r2
 8005e66:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005e68:	7979      	ldrb	r1, [r7, #5]
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	9303      	str	r3, [sp, #12]
 8005e6e:	88fb      	ldrh	r3, [r7, #6]
 8005e70:	9302      	str	r3, [sp, #8]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	9301      	str	r3, [sp, #4]
 8005e76:	2301      	movs	r3, #1
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 fb03 	bl	800648a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8005e84:	2300      	movs	r3, #0

}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b088      	sub	sp, #32
 8005e92:	af04      	add	r7, sp, #16
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	4611      	mov	r1, r2
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	80fb      	strh	r3, [r7, #6]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005eb2:	7979      	ldrb	r1, [r7, #5]
 8005eb4:	7e3b      	ldrb	r3, [r7, #24]
 8005eb6:	9303      	str	r3, [sp, #12]
 8005eb8:	88fb      	ldrh	r3, [r7, #6]
 8005eba:	9302      	str	r3, [sp, #8]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	9301      	str	r3, [sp, #4]
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 fade 	bl	800648a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b088      	sub	sp, #32
 8005edc:	af04      	add	r7, sp, #16
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	80fb      	strh	r3, [r7, #6]
 8005eea:	4613      	mov	r3, r2
 8005eec:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005eee:	7979      	ldrb	r1, [r7, #5]
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	9303      	str	r3, [sp, #12]
 8005ef4:	88fb      	ldrh	r3, [r7, #6]
 8005ef6:	9302      	str	r3, [sp, #8]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	9301      	str	r3, [sp, #4]
 8005efc:	2301      	movs	r3, #1
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	2302      	movs	r3, #2
 8005f02:	2201      	movs	r2, #1
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 fac0 	bl	800648a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af04      	add	r7, sp, #16
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	4608      	mov	r0, r1
 8005f1e:	4611      	mov	r1, r2
 8005f20:	461a      	mov	r2, r3
 8005f22:	4603      	mov	r3, r0
 8005f24:	70fb      	strb	r3, [r7, #3]
 8005f26:	460b      	mov	r3, r1
 8005f28:	70bb      	strb	r3, [r7, #2]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8005f2e:	7878      	ldrb	r0, [r7, #1]
 8005f30:	78ba      	ldrb	r2, [r7, #2]
 8005f32:	78f9      	ldrb	r1, [r7, #3]
 8005f34:	8b3b      	ldrh	r3, [r7, #24]
 8005f36:	9302      	str	r3, [sp, #8]
 8005f38:	7d3b      	ldrb	r3, [r7, #20]
 8005f3a:	9301      	str	r3, [sp, #4]
 8005f3c:	7c3b      	ldrb	r3, [r7, #16]
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	4603      	mov	r3, r0
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fa53 	bl	80063ee <USBH_LL_OpenPipe>

  return USBH_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b082      	sub	sp, #8
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8005f5e:	78fb      	ldrb	r3, [r7, #3]
 8005f60:	4619      	mov	r1, r3
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fa72 	bl	800644c <USBH_LL_ClosePipe>

  return USBH_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f836 	bl	8005ff0 <USBH_GetFreePipe>
 8005f84:	4603      	mov	r3, r0
 8005f86:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8005f88:	89fb      	ldrh	r3, [r7, #14]
 8005f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00a      	beq.n	8005fa8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8005f92:	78fa      	ldrb	r2, [r7, #3]
 8005f94:	89fb      	ldrh	r3, [r7, #14]
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f9e:	6879      	ldr	r1, [r7, #4]
 8005fa0:	33e0      	adds	r3, #224	; 0xe0
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	440b      	add	r3, r1
 8005fa6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8005fa8:	89fb      	ldrh	r3, [r7, #14]
 8005faa:	b2db      	uxtb	r3, r3
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8005fc0:	78fb      	ldrb	r3, [r7, #3]
 8005fc2:	2b0a      	cmp	r3, #10
 8005fc4:	d80d      	bhi.n	8005fe2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8005fc6:	78fb      	ldrb	r3, [r7, #3]
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	33e0      	adds	r3, #224	; 0xe0
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	78fb      	ldrb	r3, [r7, #3]
 8005fd4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8005fd8:	6879      	ldr	r1, [r7, #4]
 8005fda:	33e0      	adds	r3, #224	; 0xe0
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	440b      	add	r3, r1
 8005fe0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	73fb      	strb	r3, [r7, #15]
 8006000:	e00f      	b.n	8006022 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006002:	7bfb      	ldrb	r3, [r7, #15]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	33e0      	adds	r3, #224	; 0xe0
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d102      	bne.n	800601c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006016:	7bfb      	ldrb	r3, [r7, #15]
 8006018:	b29b      	uxth	r3, r3
 800601a:	e007      	b.n	800602c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800601c:	7bfb      	ldrb	r3, [r7, #15]
 800601e:	3301      	adds	r3, #1
 8006020:	73fb      	strb	r3, [r7, #15]
 8006022:	7bfb      	ldrb	r3, [r7, #15]
 8006024:	2b0a      	cmp	r3, #10
 8006026:	d9ec      	bls.n	8006002 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006028:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800603c:	2201      	movs	r2, #1
 800603e:	490e      	ldr	r1, [pc, #56]	; (8006078 <MX_USB_HOST_Init+0x40>)
 8006040:	480e      	ldr	r0, [pc, #56]	; (800607c <MX_USB_HOST_Init+0x44>)
 8006042:	f7fe fca1 	bl	8004988 <USBH_Init>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800604c:	f7fa fb4c 	bl	80006e8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006050:	490b      	ldr	r1, [pc, #44]	; (8006080 <MX_USB_HOST_Init+0x48>)
 8006052:	480a      	ldr	r0, [pc, #40]	; (800607c <MX_USB_HOST_Init+0x44>)
 8006054:	f7fe fd26 	bl	8004aa4 <USBH_RegisterClass>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800605e:	f7fa fb43 	bl	80006e8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006062:	4806      	ldr	r0, [pc, #24]	; (800607c <MX_USB_HOST_Init+0x44>)
 8006064:	f7fe fdaa 	bl	8004bbc <USBH_Start>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800606e:	f7fa fb3b 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006072:	bf00      	nop
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	08006099 	.word	0x08006099
 800607c:	200000c0 	.word	0x200000c0
 8006080:	2000000c 	.word	0x2000000c

08006084 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006088:	4802      	ldr	r0, [pc, #8]	; (8006094 <MX_USB_HOST_Process+0x10>)
 800608a:	f7fe fda7 	bl	8004bdc <USBH_Process>
}
 800608e:	bf00      	nop
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	200000c0 	.word	0x200000c0

08006098 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	460b      	mov	r3, r1
 80060a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80060a4:	78fb      	ldrb	r3, [r7, #3]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	2b04      	cmp	r3, #4
 80060aa:	d819      	bhi.n	80060e0 <USBH_UserProcess+0x48>
 80060ac:	a201      	add	r2, pc, #4	; (adr r2, 80060b4 <USBH_UserProcess+0x1c>)
 80060ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b2:	bf00      	nop
 80060b4:	080060e1 	.word	0x080060e1
 80060b8:	080060d1 	.word	0x080060d1
 80060bc:	080060e1 	.word	0x080060e1
 80060c0:	080060d9 	.word	0x080060d9
 80060c4:	080060c9 	.word	0x080060c9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80060c8:	4b09      	ldr	r3, [pc, #36]	; (80060f0 <USBH_UserProcess+0x58>)
 80060ca:	2203      	movs	r2, #3
 80060cc:	701a      	strb	r2, [r3, #0]
  break;
 80060ce:	e008      	b.n	80060e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80060d0:	4b07      	ldr	r3, [pc, #28]	; (80060f0 <USBH_UserProcess+0x58>)
 80060d2:	2202      	movs	r2, #2
 80060d4:	701a      	strb	r2, [r3, #0]
  break;
 80060d6:	e004      	b.n	80060e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80060d8:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <USBH_UserProcess+0x58>)
 80060da:	2201      	movs	r2, #1
 80060dc:	701a      	strb	r2, [r3, #0]
  break;
 80060de:	e000      	b.n	80060e2 <USBH_UserProcess+0x4a>

  default:
  break;
 80060e0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	200000b0 	.word	0x200000b0

080060f4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b08a      	sub	sp, #40	; 0x28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060fc:	f107 0314 	add.w	r3, r7, #20
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	605a      	str	r2, [r3, #4]
 8006106:	609a      	str	r2, [r3, #8]
 8006108:	60da      	str	r2, [r3, #12]
 800610a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006114:	d147      	bne.n	80061a6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006116:	2300      	movs	r3, #0
 8006118:	613b      	str	r3, [r7, #16]
 800611a:	4b25      	ldr	r3, [pc, #148]	; (80061b0 <HAL_HCD_MspInit+0xbc>)
 800611c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611e:	4a24      	ldr	r2, [pc, #144]	; (80061b0 <HAL_HCD_MspInit+0xbc>)
 8006120:	f043 0301 	orr.w	r3, r3, #1
 8006124:	6313      	str	r3, [r2, #48]	; 0x30
 8006126:	4b22      	ldr	r3, [pc, #136]	; (80061b0 <HAL_HCD_MspInit+0xbc>)
 8006128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	613b      	str	r3, [r7, #16]
 8006130:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006132:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006138:	2300      	movs	r3, #0
 800613a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800613c:	2300      	movs	r3, #0
 800613e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006140:	f107 0314 	add.w	r3, r7, #20
 8006144:	4619      	mov	r1, r3
 8006146:	481b      	ldr	r0, [pc, #108]	; (80061b4 <HAL_HCD_MspInit+0xc0>)
 8006148:	f7fa fd4a 	bl	8000be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800614c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006152:	2302      	movs	r3, #2
 8006154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006156:	2300      	movs	r3, #0
 8006158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800615a:	2300      	movs	r3, #0
 800615c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800615e:	230a      	movs	r3, #10
 8006160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006162:	f107 0314 	add.w	r3, r7, #20
 8006166:	4619      	mov	r1, r3
 8006168:	4812      	ldr	r0, [pc, #72]	; (80061b4 <HAL_HCD_MspInit+0xc0>)
 800616a:	f7fa fd39 	bl	8000be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800616e:	4b10      	ldr	r3, [pc, #64]	; (80061b0 <HAL_HCD_MspInit+0xbc>)
 8006170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006172:	4a0f      	ldr	r2, [pc, #60]	; (80061b0 <HAL_HCD_MspInit+0xbc>)
 8006174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006178:	6353      	str	r3, [r2, #52]	; 0x34
 800617a:	2300      	movs	r3, #0
 800617c:	60fb      	str	r3, [r7, #12]
 800617e:	4b0c      	ldr	r3, [pc, #48]	; (80061b0 <HAL_HCD_MspInit+0xbc>)
 8006180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006182:	4a0b      	ldr	r2, [pc, #44]	; (80061b0 <HAL_HCD_MspInit+0xbc>)
 8006184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006188:	6453      	str	r3, [r2, #68]	; 0x44
 800618a:	4b09      	ldr	r3, [pc, #36]	; (80061b0 <HAL_HCD_MspInit+0xbc>)
 800618c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006196:	2200      	movs	r2, #0
 8006198:	2100      	movs	r1, #0
 800619a:	2043      	movs	r0, #67	; 0x43
 800619c:	f7fa fce9 	bl	8000b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80061a0:	2043      	movs	r0, #67	; 0x43
 80061a2:	f7fa fd02 	bl	8000baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80061a6:	bf00      	nop
 80061a8:	3728      	adds	r7, #40	; 0x28
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	40023800 	.word	0x40023800
 80061b4:	40020000 	.word	0x40020000

080061b8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff f8db 	bl	8005382 <USBH_LL_IncTimer>
}
 80061cc:	bf00      	nop
 80061ce:	3708      	adds	r7, #8
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff f913 	bl	800540e <USBH_LL_Connect>
}
 80061e8:	bf00      	nop
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80061fe:	4618      	mov	r0, r3
 8006200:	f7ff f91c 	bl	800543c <USBH_LL_Disconnect>
}
 8006204:	bf00      	nop
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	460b      	mov	r3, r1
 8006216:	70fb      	strb	r3, [r7, #3]
 8006218:	4613      	mov	r3, r2
 800621a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006236:	4618      	mov	r0, r3
 8006238:	f7ff f8cd 	bl	80053d6 <USBH_LL_PortEnabled>
}
 800623c:	bf00      	nop
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006252:	4618      	mov	r0, r3
 8006254:	f7ff f8cd 	bl	80053f2 <USBH_LL_PortDisabled>
}
 8006258:	bf00      	nop
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800626e:	2b01      	cmp	r3, #1
 8006270:	d12a      	bne.n	80062c8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006272:	4a18      	ldr	r2, [pc, #96]	; (80062d4 <USBH_LL_Init+0x74>)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a15      	ldr	r2, [pc, #84]	; (80062d4 <USBH_LL_Init+0x74>)
 800627e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006282:	4b14      	ldr	r3, [pc, #80]	; (80062d4 <USBH_LL_Init+0x74>)
 8006284:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006288:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800628a:	4b12      	ldr	r3, [pc, #72]	; (80062d4 <USBH_LL_Init+0x74>)
 800628c:	2208      	movs	r2, #8
 800628e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006290:	4b10      	ldr	r3, [pc, #64]	; (80062d4 <USBH_LL_Init+0x74>)
 8006292:	2201      	movs	r2, #1
 8006294:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006296:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <USBH_LL_Init+0x74>)
 8006298:	2200      	movs	r2, #0
 800629a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800629c:	4b0d      	ldr	r3, [pc, #52]	; (80062d4 <USBH_LL_Init+0x74>)
 800629e:	2202      	movs	r2, #2
 80062a0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80062a2:	4b0c      	ldr	r3, [pc, #48]	; (80062d4 <USBH_LL_Init+0x74>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80062a8:	480a      	ldr	r0, [pc, #40]	; (80062d4 <USBH_LL_Init+0x74>)
 80062aa:	f7fa fe68 	bl	8000f7e <HAL_HCD_Init>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80062b4:	f7fa fa18 	bl	80006e8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80062b8:	4806      	ldr	r0, [pc, #24]	; (80062d4 <USBH_LL_Init+0x74>)
 80062ba:	f7fb fa4c 	bl	8001756 <HAL_HCD_GetCurrentFrame>
 80062be:	4603      	mov	r3, r0
 80062c0:	4619      	mov	r1, r3
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7ff f84e 	bl	8005364 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	20000498 	.word	0x20000498

080062d8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062e0:	2300      	movs	r3, #0
 80062e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80062e4:	2300      	movs	r3, #0
 80062e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fb f9bb 	bl	800166a <HAL_HCD_Start>
 80062f4:	4603      	mov	r3, r0
 80062f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 f95c 	bl	80065b8 <USBH_Get_USB_Status>
 8006300:	4603      	mov	r3, r0
 8006302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006304:	7bbb      	ldrb	r3, [r7, #14]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b084      	sub	sp, #16
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006324:	4618      	mov	r0, r3
 8006326:	f7fb f9c3 	bl	80016b0 <HAL_HCD_Stop>
 800632a:	4603      	mov	r3, r0
 800632c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800632e:	7bfb      	ldrb	r3, [r7, #15]
 8006330:	4618      	mov	r0, r3
 8006332:	f000 f941 	bl	80065b8 <USBH_Get_USB_Status>
 8006336:	4603      	mov	r3, r0
 8006338:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800633a:	7bbb      	ldrb	r3, [r7, #14]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800634c:	2301      	movs	r3, #1
 800634e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006356:	4618      	mov	r0, r3
 8006358:	f7fb fa0b 	bl	8001772 <HAL_HCD_GetCurrentSpeed>
 800635c:	4603      	mov	r3, r0
 800635e:	2b02      	cmp	r3, #2
 8006360:	d00c      	beq.n	800637c <USBH_LL_GetSpeed+0x38>
 8006362:	2b02      	cmp	r3, #2
 8006364:	d80d      	bhi.n	8006382 <USBH_LL_GetSpeed+0x3e>
 8006366:	2b00      	cmp	r3, #0
 8006368:	d002      	beq.n	8006370 <USBH_LL_GetSpeed+0x2c>
 800636a:	2b01      	cmp	r3, #1
 800636c:	d003      	beq.n	8006376 <USBH_LL_GetSpeed+0x32>
 800636e:	e008      	b.n	8006382 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8006370:	2300      	movs	r3, #0
 8006372:	73fb      	strb	r3, [r7, #15]
    break;
 8006374:	e008      	b.n	8006388 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8006376:	2301      	movs	r3, #1
 8006378:	73fb      	strb	r3, [r7, #15]
    break;
 800637a:	e005      	b.n	8006388 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800637c:	2302      	movs	r3, #2
 800637e:	73fb      	strb	r3, [r7, #15]
    break;
 8006380:	e002      	b.n	8006388 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8006382:	2301      	movs	r3, #1
 8006384:	73fb      	strb	r3, [r7, #15]
    break;
 8006386:	bf00      	nop
  }
  return  speed;
 8006388:	7bfb      	ldrb	r3, [r7, #15]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7fb f99e 	bl	80016ea <HAL_HCD_ResetPort>
 80063ae:	4603      	mov	r3, r0
 80063b0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 f8ff 	bl	80065b8 <USBH_Get_USB_Status>
 80063ba:	4603      	mov	r3, r0
 80063bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80063be:	7bbb      	ldrb	r3, [r7, #14]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80063da:	78fa      	ldrb	r2, [r7, #3]
 80063dc:	4611      	mov	r1, r2
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fb f9a5 	bl	800172e <HAL_HCD_HC_GetXferCount>
 80063e4:	4603      	mov	r3, r0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80063ee:	b590      	push	{r4, r7, lr}
 80063f0:	b089      	sub	sp, #36	; 0x24
 80063f2:	af04      	add	r7, sp, #16
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	4608      	mov	r0, r1
 80063f8:	4611      	mov	r1, r2
 80063fa:	461a      	mov	r2, r3
 80063fc:	4603      	mov	r3, r0
 80063fe:	70fb      	strb	r3, [r7, #3]
 8006400:	460b      	mov	r3, r1
 8006402:	70bb      	strb	r3, [r7, #2]
 8006404:	4613      	mov	r3, r2
 8006406:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800640c:	2300      	movs	r3, #0
 800640e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006416:	787c      	ldrb	r4, [r7, #1]
 8006418:	78ba      	ldrb	r2, [r7, #2]
 800641a:	78f9      	ldrb	r1, [r7, #3]
 800641c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800641e:	9302      	str	r3, [sp, #8]
 8006420:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006424:	9301      	str	r3, [sp, #4]
 8006426:	f897 3020 	ldrb.w	r3, [r7, #32]
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	4623      	mov	r3, r4
 800642e:	f7fa fe08 	bl	8001042 <HAL_HCD_HC_Init>
 8006432:	4603      	mov	r3, r0
 8006434:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006436:	7bfb      	ldrb	r3, [r7, #15]
 8006438:	4618      	mov	r0, r3
 800643a:	f000 f8bd 	bl	80065b8 <USBH_Get_USB_Status>
 800643e:	4603      	mov	r3, r0
 8006440:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006442:	7bbb      	ldrb	r3, [r7, #14]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	bd90      	pop	{r4, r7, pc}

0800644c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006458:	2300      	movs	r3, #0
 800645a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800645c:	2300      	movs	r3, #0
 800645e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006466:	78fa      	ldrb	r2, [r7, #3]
 8006468:	4611      	mov	r1, r2
 800646a:	4618      	mov	r0, r3
 800646c:	f7fa fe78 	bl	8001160 <HAL_HCD_HC_Halt>
 8006470:	4603      	mov	r3, r0
 8006472:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006474:	7bfb      	ldrb	r3, [r7, #15]
 8006476:	4618      	mov	r0, r3
 8006478:	f000 f89e 	bl	80065b8 <USBH_Get_USB_Status>
 800647c:	4603      	mov	r3, r0
 800647e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006480:	7bbb      	ldrb	r3, [r7, #14]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800648a:	b590      	push	{r4, r7, lr}
 800648c:	b089      	sub	sp, #36	; 0x24
 800648e:	af04      	add	r7, sp, #16
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	4608      	mov	r0, r1
 8006494:	4611      	mov	r1, r2
 8006496:	461a      	mov	r2, r3
 8006498:	4603      	mov	r3, r0
 800649a:	70fb      	strb	r3, [r7, #3]
 800649c:	460b      	mov	r3, r1
 800649e:	70bb      	strb	r3, [r7, #2]
 80064a0:	4613      	mov	r3, r2
 80064a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80064b2:	787c      	ldrb	r4, [r7, #1]
 80064b4:	78ba      	ldrb	r2, [r7, #2]
 80064b6:	78f9      	ldrb	r1, [r7, #3]
 80064b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80064bc:	9303      	str	r3, [sp, #12]
 80064be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064c0:	9302      	str	r3, [sp, #8]
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	9301      	str	r3, [sp, #4]
 80064c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	4623      	mov	r3, r4
 80064ce:	f7fa fe6b 	bl	80011a8 <HAL_HCD_HC_SubmitRequest>
 80064d2:	4603      	mov	r3, r0
 80064d4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80064d6:	7bfb      	ldrb	r3, [r7, #15]
 80064d8:	4618      	mov	r0, r3
 80064da:	f000 f86d 	bl	80065b8 <USBH_Get_USB_Status>
 80064de:	4603      	mov	r3, r0
 80064e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd90      	pop	{r4, r7, pc}

080064ec <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	460b      	mov	r3, r1
 80064f6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80064fe:	78fa      	ldrb	r2, [r7, #3]
 8006500:	4611      	mov	r1, r2
 8006502:	4618      	mov	r0, r3
 8006504:	f7fb f8ff 	bl	8001706 <HAL_HCD_HC_GetURBState>
 8006508:	4603      	mov	r3, r0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b082      	sub	sp, #8
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
 800651a:	460b      	mov	r3, r1
 800651c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006524:	2b01      	cmp	r3, #1
 8006526:	d103      	bne.n	8006530 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8006528:	78fb      	ldrb	r3, [r7, #3]
 800652a:	4618      	mov	r0, r3
 800652c:	f000 f870 	bl	8006610 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006530:	20c8      	movs	r0, #200	; 0xc8
 8006532:	f7fa fa1f 	bl	8000974 <HAL_Delay>
  return USBH_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	460b      	mov	r3, r1
 800654a:	70fb      	strb	r3, [r7, #3]
 800654c:	4613      	mov	r3, r2
 800654e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006556:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006558:	78fb      	ldrb	r3, [r7, #3]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	212c      	movs	r1, #44	; 0x2c
 800655e:	fb01 f303 	mul.w	r3, r1, r3
 8006562:	4413      	add	r3, r2
 8006564:	333b      	adds	r3, #59	; 0x3b
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d009      	beq.n	8006580 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	212c      	movs	r1, #44	; 0x2c
 8006572:	fb01 f303 	mul.w	r3, r1, r3
 8006576:	4413      	add	r3, r2
 8006578:	3354      	adds	r3, #84	; 0x54
 800657a:	78ba      	ldrb	r2, [r7, #2]
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	e008      	b.n	8006592 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006580:	78fb      	ldrb	r3, [r7, #3]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	212c      	movs	r1, #44	; 0x2c
 8006586:	fb01 f303 	mul.w	r3, r1, r3
 800658a:	4413      	add	r3, r2
 800658c:	3355      	adds	r3, #85	; 0x55
 800658e:	78ba      	ldrb	r2, [r7, #2]
 8006590:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7fa f9e3 	bl	8000974 <HAL_Delay>
}
 80065ae:	bf00      	nop
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	4603      	mov	r3, r0
 80065c0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80065c6:	79fb      	ldrb	r3, [r7, #7]
 80065c8:	2b03      	cmp	r3, #3
 80065ca:	d817      	bhi.n	80065fc <USBH_Get_USB_Status+0x44>
 80065cc:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <USBH_Get_USB_Status+0x1c>)
 80065ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d2:	bf00      	nop
 80065d4:	080065e5 	.word	0x080065e5
 80065d8:	080065eb 	.word	0x080065eb
 80065dc:	080065f1 	.word	0x080065f1
 80065e0:	080065f7 	.word	0x080065f7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	73fb      	strb	r3, [r7, #15]
    break;
 80065e8:	e00b      	b.n	8006602 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80065ea:	2302      	movs	r3, #2
 80065ec:	73fb      	strb	r3, [r7, #15]
    break;
 80065ee:	e008      	b.n	8006602 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80065f0:	2301      	movs	r3, #1
 80065f2:	73fb      	strb	r3, [r7, #15]
    break;
 80065f4:	e005      	b.n	8006602 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80065f6:	2302      	movs	r3, #2
 80065f8:	73fb      	strb	r3, [r7, #15]
    break;
 80065fa:	e002      	b.n	8006602 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80065fc:	2302      	movs	r3, #2
 80065fe:	73fb      	strb	r3, [r7, #15]
    break;
 8006600:	bf00      	nop
  }
  return usb_status;
 8006602:	7bfb      	ldrb	r3, [r7, #15]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	4603      	mov	r3, r0
 8006618:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800661a:	79fb      	ldrb	r3, [r7, #7]
 800661c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800661e:	79fb      	ldrb	r3, [r7, #7]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d102      	bne.n	800662a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8006624:	2301      	movs	r3, #1
 8006626:	73fb      	strb	r3, [r7, #15]
 8006628:	e001      	b.n	800662e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800662a:	2300      	movs	r3, #0
 800662c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800662e:	7bfb      	ldrb	r3, [r7, #15]
 8006630:	461a      	mov	r2, r3
 8006632:	2101      	movs	r1, #1
 8006634:	4803      	ldr	r0, [pc, #12]	; (8006644 <MX_DriverVbusFS+0x34>)
 8006636:	f7fa fc6f 	bl	8000f18 <HAL_GPIO_WritePin>
}
 800663a:	bf00      	nop
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	40020800 	.word	0x40020800

08006648 <__errno>:
 8006648:	4b01      	ldr	r3, [pc, #4]	; (8006650 <__errno+0x8>)
 800664a:	6818      	ldr	r0, [r3, #0]
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	2000002c 	.word	0x2000002c

08006654 <__libc_init_array>:
 8006654:	b570      	push	{r4, r5, r6, lr}
 8006656:	4d0d      	ldr	r5, [pc, #52]	; (800668c <__libc_init_array+0x38>)
 8006658:	4c0d      	ldr	r4, [pc, #52]	; (8006690 <__libc_init_array+0x3c>)
 800665a:	1b64      	subs	r4, r4, r5
 800665c:	10a4      	asrs	r4, r4, #2
 800665e:	2600      	movs	r6, #0
 8006660:	42a6      	cmp	r6, r4
 8006662:	d109      	bne.n	8006678 <__libc_init_array+0x24>
 8006664:	4d0b      	ldr	r5, [pc, #44]	; (8006694 <__libc_init_array+0x40>)
 8006666:	4c0c      	ldr	r4, [pc, #48]	; (8006698 <__libc_init_array+0x44>)
 8006668:	f000 f8f8 	bl	800685c <_init>
 800666c:	1b64      	subs	r4, r4, r5
 800666e:	10a4      	asrs	r4, r4, #2
 8006670:	2600      	movs	r6, #0
 8006672:	42a6      	cmp	r6, r4
 8006674:	d105      	bne.n	8006682 <__libc_init_array+0x2e>
 8006676:	bd70      	pop	{r4, r5, r6, pc}
 8006678:	f855 3b04 	ldr.w	r3, [r5], #4
 800667c:	4798      	blx	r3
 800667e:	3601      	adds	r6, #1
 8006680:	e7ee      	b.n	8006660 <__libc_init_array+0xc>
 8006682:	f855 3b04 	ldr.w	r3, [r5], #4
 8006686:	4798      	blx	r3
 8006688:	3601      	adds	r6, #1
 800668a:	e7f2      	b.n	8006672 <__libc_init_array+0x1e>
 800668c:	08006890 	.word	0x08006890
 8006690:	08006890 	.word	0x08006890
 8006694:	08006890 	.word	0x08006890
 8006698:	08006894 	.word	0x08006894

0800669c <malloc>:
 800669c:	4b02      	ldr	r3, [pc, #8]	; (80066a8 <malloc+0xc>)
 800669e:	4601      	mov	r1, r0
 80066a0:	6818      	ldr	r0, [r3, #0]
 80066a2:	f000 b863 	b.w	800676c <_malloc_r>
 80066a6:	bf00      	nop
 80066a8:	2000002c 	.word	0x2000002c

080066ac <free>:
 80066ac:	4b02      	ldr	r3, [pc, #8]	; (80066b8 <free+0xc>)
 80066ae:	4601      	mov	r1, r0
 80066b0:	6818      	ldr	r0, [r3, #0]
 80066b2:	f000 b80b 	b.w	80066cc <_free_r>
 80066b6:	bf00      	nop
 80066b8:	2000002c 	.word	0x2000002c

080066bc <memset>:
 80066bc:	4402      	add	r2, r0
 80066be:	4603      	mov	r3, r0
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d100      	bne.n	80066c6 <memset+0xa>
 80066c4:	4770      	bx	lr
 80066c6:	f803 1b01 	strb.w	r1, [r3], #1
 80066ca:	e7f9      	b.n	80066c0 <memset+0x4>

080066cc <_free_r>:
 80066cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066ce:	2900      	cmp	r1, #0
 80066d0:	d048      	beq.n	8006764 <_free_r+0x98>
 80066d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066d6:	9001      	str	r0, [sp, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f1a1 0404 	sub.w	r4, r1, #4
 80066de:	bfb8      	it	lt
 80066e0:	18e4      	addlt	r4, r4, r3
 80066e2:	f000 f8ad 	bl	8006840 <__malloc_lock>
 80066e6:	4a20      	ldr	r2, [pc, #128]	; (8006768 <_free_r+0x9c>)
 80066e8:	9801      	ldr	r0, [sp, #4]
 80066ea:	6813      	ldr	r3, [r2, #0]
 80066ec:	4615      	mov	r5, r2
 80066ee:	b933      	cbnz	r3, 80066fe <_free_r+0x32>
 80066f0:	6063      	str	r3, [r4, #4]
 80066f2:	6014      	str	r4, [r2, #0]
 80066f4:	b003      	add	sp, #12
 80066f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066fa:	f000 b8a7 	b.w	800684c <__malloc_unlock>
 80066fe:	42a3      	cmp	r3, r4
 8006700:	d90b      	bls.n	800671a <_free_r+0x4e>
 8006702:	6821      	ldr	r1, [r4, #0]
 8006704:	1862      	adds	r2, r4, r1
 8006706:	4293      	cmp	r3, r2
 8006708:	bf04      	itt	eq
 800670a:	681a      	ldreq	r2, [r3, #0]
 800670c:	685b      	ldreq	r3, [r3, #4]
 800670e:	6063      	str	r3, [r4, #4]
 8006710:	bf04      	itt	eq
 8006712:	1852      	addeq	r2, r2, r1
 8006714:	6022      	streq	r2, [r4, #0]
 8006716:	602c      	str	r4, [r5, #0]
 8006718:	e7ec      	b.n	80066f4 <_free_r+0x28>
 800671a:	461a      	mov	r2, r3
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	b10b      	cbz	r3, 8006724 <_free_r+0x58>
 8006720:	42a3      	cmp	r3, r4
 8006722:	d9fa      	bls.n	800671a <_free_r+0x4e>
 8006724:	6811      	ldr	r1, [r2, #0]
 8006726:	1855      	adds	r5, r2, r1
 8006728:	42a5      	cmp	r5, r4
 800672a:	d10b      	bne.n	8006744 <_free_r+0x78>
 800672c:	6824      	ldr	r4, [r4, #0]
 800672e:	4421      	add	r1, r4
 8006730:	1854      	adds	r4, r2, r1
 8006732:	42a3      	cmp	r3, r4
 8006734:	6011      	str	r1, [r2, #0]
 8006736:	d1dd      	bne.n	80066f4 <_free_r+0x28>
 8006738:	681c      	ldr	r4, [r3, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	6053      	str	r3, [r2, #4]
 800673e:	4421      	add	r1, r4
 8006740:	6011      	str	r1, [r2, #0]
 8006742:	e7d7      	b.n	80066f4 <_free_r+0x28>
 8006744:	d902      	bls.n	800674c <_free_r+0x80>
 8006746:	230c      	movs	r3, #12
 8006748:	6003      	str	r3, [r0, #0]
 800674a:	e7d3      	b.n	80066f4 <_free_r+0x28>
 800674c:	6825      	ldr	r5, [r4, #0]
 800674e:	1961      	adds	r1, r4, r5
 8006750:	428b      	cmp	r3, r1
 8006752:	bf04      	itt	eq
 8006754:	6819      	ldreq	r1, [r3, #0]
 8006756:	685b      	ldreq	r3, [r3, #4]
 8006758:	6063      	str	r3, [r4, #4]
 800675a:	bf04      	itt	eq
 800675c:	1949      	addeq	r1, r1, r5
 800675e:	6021      	streq	r1, [r4, #0]
 8006760:	6054      	str	r4, [r2, #4]
 8006762:	e7c7      	b.n	80066f4 <_free_r+0x28>
 8006764:	b003      	add	sp, #12
 8006766:	bd30      	pop	{r4, r5, pc}
 8006768:	200000b4 	.word	0x200000b4

0800676c <_malloc_r>:
 800676c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676e:	1ccd      	adds	r5, r1, #3
 8006770:	f025 0503 	bic.w	r5, r5, #3
 8006774:	3508      	adds	r5, #8
 8006776:	2d0c      	cmp	r5, #12
 8006778:	bf38      	it	cc
 800677a:	250c      	movcc	r5, #12
 800677c:	2d00      	cmp	r5, #0
 800677e:	4606      	mov	r6, r0
 8006780:	db01      	blt.n	8006786 <_malloc_r+0x1a>
 8006782:	42a9      	cmp	r1, r5
 8006784:	d903      	bls.n	800678e <_malloc_r+0x22>
 8006786:	230c      	movs	r3, #12
 8006788:	6033      	str	r3, [r6, #0]
 800678a:	2000      	movs	r0, #0
 800678c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800678e:	f000 f857 	bl	8006840 <__malloc_lock>
 8006792:	4921      	ldr	r1, [pc, #132]	; (8006818 <_malloc_r+0xac>)
 8006794:	680a      	ldr	r2, [r1, #0]
 8006796:	4614      	mov	r4, r2
 8006798:	b99c      	cbnz	r4, 80067c2 <_malloc_r+0x56>
 800679a:	4f20      	ldr	r7, [pc, #128]	; (800681c <_malloc_r+0xb0>)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	b923      	cbnz	r3, 80067aa <_malloc_r+0x3e>
 80067a0:	4621      	mov	r1, r4
 80067a2:	4630      	mov	r0, r6
 80067a4:	f000 f83c 	bl	8006820 <_sbrk_r>
 80067a8:	6038      	str	r0, [r7, #0]
 80067aa:	4629      	mov	r1, r5
 80067ac:	4630      	mov	r0, r6
 80067ae:	f000 f837 	bl	8006820 <_sbrk_r>
 80067b2:	1c43      	adds	r3, r0, #1
 80067b4:	d123      	bne.n	80067fe <_malloc_r+0x92>
 80067b6:	230c      	movs	r3, #12
 80067b8:	6033      	str	r3, [r6, #0]
 80067ba:	4630      	mov	r0, r6
 80067bc:	f000 f846 	bl	800684c <__malloc_unlock>
 80067c0:	e7e3      	b.n	800678a <_malloc_r+0x1e>
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	1b5b      	subs	r3, r3, r5
 80067c6:	d417      	bmi.n	80067f8 <_malloc_r+0x8c>
 80067c8:	2b0b      	cmp	r3, #11
 80067ca:	d903      	bls.n	80067d4 <_malloc_r+0x68>
 80067cc:	6023      	str	r3, [r4, #0]
 80067ce:	441c      	add	r4, r3
 80067d0:	6025      	str	r5, [r4, #0]
 80067d2:	e004      	b.n	80067de <_malloc_r+0x72>
 80067d4:	6863      	ldr	r3, [r4, #4]
 80067d6:	42a2      	cmp	r2, r4
 80067d8:	bf0c      	ite	eq
 80067da:	600b      	streq	r3, [r1, #0]
 80067dc:	6053      	strne	r3, [r2, #4]
 80067de:	4630      	mov	r0, r6
 80067e0:	f000 f834 	bl	800684c <__malloc_unlock>
 80067e4:	f104 000b 	add.w	r0, r4, #11
 80067e8:	1d23      	adds	r3, r4, #4
 80067ea:	f020 0007 	bic.w	r0, r0, #7
 80067ee:	1ac2      	subs	r2, r0, r3
 80067f0:	d0cc      	beq.n	800678c <_malloc_r+0x20>
 80067f2:	1a1b      	subs	r3, r3, r0
 80067f4:	50a3      	str	r3, [r4, r2]
 80067f6:	e7c9      	b.n	800678c <_malloc_r+0x20>
 80067f8:	4622      	mov	r2, r4
 80067fa:	6864      	ldr	r4, [r4, #4]
 80067fc:	e7cc      	b.n	8006798 <_malloc_r+0x2c>
 80067fe:	1cc4      	adds	r4, r0, #3
 8006800:	f024 0403 	bic.w	r4, r4, #3
 8006804:	42a0      	cmp	r0, r4
 8006806:	d0e3      	beq.n	80067d0 <_malloc_r+0x64>
 8006808:	1a21      	subs	r1, r4, r0
 800680a:	4630      	mov	r0, r6
 800680c:	f000 f808 	bl	8006820 <_sbrk_r>
 8006810:	3001      	adds	r0, #1
 8006812:	d1dd      	bne.n	80067d0 <_malloc_r+0x64>
 8006814:	e7cf      	b.n	80067b6 <_malloc_r+0x4a>
 8006816:	bf00      	nop
 8006818:	200000b4 	.word	0x200000b4
 800681c:	200000b8 	.word	0x200000b8

08006820 <_sbrk_r>:
 8006820:	b538      	push	{r3, r4, r5, lr}
 8006822:	4d06      	ldr	r5, [pc, #24]	; (800683c <_sbrk_r+0x1c>)
 8006824:	2300      	movs	r3, #0
 8006826:	4604      	mov	r4, r0
 8006828:	4608      	mov	r0, r1
 800682a:	602b      	str	r3, [r5, #0]
 800682c:	f7f9 ffbe 	bl	80007ac <_sbrk>
 8006830:	1c43      	adds	r3, r0, #1
 8006832:	d102      	bne.n	800683a <_sbrk_r+0x1a>
 8006834:	682b      	ldr	r3, [r5, #0]
 8006836:	b103      	cbz	r3, 800683a <_sbrk_r+0x1a>
 8006838:	6023      	str	r3, [r4, #0]
 800683a:	bd38      	pop	{r3, r4, r5, pc}
 800683c:	2000079c 	.word	0x2000079c

08006840 <__malloc_lock>:
 8006840:	4801      	ldr	r0, [pc, #4]	; (8006848 <__malloc_lock+0x8>)
 8006842:	f000 b809 	b.w	8006858 <__retarget_lock_acquire_recursive>
 8006846:	bf00      	nop
 8006848:	200007a4 	.word	0x200007a4

0800684c <__malloc_unlock>:
 800684c:	4801      	ldr	r0, [pc, #4]	; (8006854 <__malloc_unlock+0x8>)
 800684e:	f000 b804 	b.w	800685a <__retarget_lock_release_recursive>
 8006852:	bf00      	nop
 8006854:	200007a4 	.word	0x200007a4

08006858 <__retarget_lock_acquire_recursive>:
 8006858:	4770      	bx	lr

0800685a <__retarget_lock_release_recursive>:
 800685a:	4770      	bx	lr

0800685c <_init>:
 800685c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685e:	bf00      	nop
 8006860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006862:	bc08      	pop	{r3}
 8006864:	469e      	mov	lr, r3
 8006866:	4770      	bx	lr

08006868 <_fini>:
 8006868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800686a:	bf00      	nop
 800686c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800686e:	bc08      	pop	{r3}
 8006870:	469e      	mov	lr, r3
 8006872:	4770      	bx	lr

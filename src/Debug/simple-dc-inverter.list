
simple-dc-inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007854  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  080079dc  080079dc  000179dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079f0  080079f0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080079f0  080079f0  000179f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079f8  080079f8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079f8  080079f8  000179f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079fc  080079fc  000179fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000007ac  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000083c  2000083c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017ab1  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033ae  00000000  00000000  00037b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd8  00000000  00000000  0003af20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e80  00000000  00000000  0003bef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002310f  00000000  00000000  0003cd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001494b  00000000  00000000  0005fe87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdb02  00000000  00000000  000747d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001422d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000043f4  00000000  00000000  00142328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080079c4 	.word	0x080079c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080079c4 	.word	0x080079c4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fbe7 	bl	8000c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f85b 	bl	8000584 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  int32_t TIM1_DC = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	607b      	str	r3, [r7, #4]
  int32_t TIM2_DC = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	603b      	str	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f9d5 	bl	8000884 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 80004da:	f006 fe6f 	bl	80071bc <MX_USB_HOST_Init>
  MX_TIM1_Init();
 80004de:	f000 f8bb 	bl	8000658 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004e2:	f000 f959 	bl	8000798 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004e6:	2100      	movs	r1, #0
 80004e8:	4823      	ldr	r0, [pc, #140]	; (8000578 <main+0xb8>)
 80004ea:	f003 f98b 	bl	8003804 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80004ee:	2104      	movs	r1, #4
 80004f0:	4822      	ldr	r0, [pc, #136]	; (800057c <main+0xbc>)
 80004f2:	f003 f987 	bl	8003804 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	while(TIM1_DC < 65535) {
 80004f6:	e009      	b.n	800050c <main+0x4c>
	  TIM1->CCR1 = TIM1_DC;
 80004f8:	4a21      	ldr	r2, [pc, #132]	; (8000580 <main+0xc0>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM1_DC += 280;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8000504:	607b      	str	r3, [r7, #4]
	  HAL_Delay(1);
 8000506:	2001      	movs	r0, #1
 8000508:	f000 fc38 	bl	8000d7c <HAL_Delay>
	while(TIM1_DC < 65535) {
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000512:	4293      	cmp	r3, r2
 8000514:	ddf0      	ble.n	80004f8 <main+0x38>
	}

	while(TIM1_DC > 0) {
 8000516:	e009      	b.n	800052c <main+0x6c>
	  TIM1->CCR1 = TIM1_DC;
 8000518:	4a19      	ldr	r2, [pc, #100]	; (8000580 <main+0xc0>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM1_DC -= 280;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000524:	607b      	str	r3, [r7, #4]
	  HAL_Delay(1);
 8000526:	2001      	movs	r0, #1
 8000528:	f000 fc28 	bl	8000d7c <HAL_Delay>
	while(TIM1_DC > 0) {
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b00      	cmp	r3, #0
 8000530:	dcf2      	bgt.n	8000518 <main+0x58>
	}

	while(TIM2_DC < 65535) {
 8000532:	e00a      	b.n	800054a <main+0x8a>
	  TIM2->CCR1 = TIM2_DC;
 8000534:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM2_DC += 280;
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8000542:	603b      	str	r3, [r7, #0]
	  HAL_Delay(1);
 8000544:	2001      	movs	r0, #1
 8000546:	f000 fc19 	bl	8000d7c <HAL_Delay>
	while(TIM2_DC < 65535) {
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000550:	4293      	cmp	r3, r2
 8000552:	ddef      	ble.n	8000534 <main+0x74>
	}

	while(TIM2_DC > 0) {
 8000554:	e00a      	b.n	800056c <main+0xac>
	  TIM2->CCR1 = TIM2_DC;
 8000556:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM2_DC -= 280;
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000564:	603b      	str	r3, [r7, #0]
	  HAL_Delay(1);
 8000566:	2001      	movs	r0, #1
 8000568:	f000 fc08 	bl	8000d7c <HAL_Delay>
	while(TIM2_DC > 0) {
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	dcf1      	bgt.n	8000556 <main+0x96>
	}

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000572:	f006 fe49 	bl	8007208 <MX_USB_HOST_Process>
	while(TIM1_DC < 65535) {
 8000576:	e7c9      	b.n	800050c <main+0x4c>
 8000578:	200000bc 	.word	0x200000bc
 800057c:	20000104 	.word	0x20000104
 8000580:	40010000 	.word	0x40010000

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	; 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f007 f946 	bl	8007824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	4b28      	ldr	r3, [pc, #160]	; (8000650 <SystemClock_Config+0xcc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	4a27      	ldr	r2, [pc, #156]	; (8000650 <SystemClock_Config+0xcc>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
 80005b8:	4b25      	ldr	r3, [pc, #148]	; (8000650 <SystemClock_Config+0xcc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <SystemClock_Config+0xd0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a21      	ldr	r2, [pc, #132]	; (8000654 <SystemClock_Config+0xd0>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <SystemClock_Config+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f4:	2308      	movs	r3, #8
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fe:	2302      	movs	r3, #2
 8000600:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000602:	2307      	movs	r3, #7
 8000604:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	4618      	mov	r0, r3
 800060c:	f002 fc12 	bl	8002e34 <HAL_RCC_OscConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000616:	f000 f9d5 	bl	80009c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	230f      	movs	r3, #15
 800061c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061e:	2302      	movs	r3, #2
 8000620:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000626:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800062a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000630:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	2105      	movs	r1, #5
 8000638:	4618      	mov	r0, r3
 800063a:	f002 fe73 	bl	8003324 <HAL_RCC_ClockConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000644:	f000 f9be 	bl	80009c4 <Error_Handler>
  }
}
 8000648:	bf00      	nop
 800064a:	3750      	adds	r7, #80	; 0x50
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b096      	sub	sp, #88	; 0x58
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800065e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]
 8000686:	615a      	str	r2, [r3, #20]
 8000688:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2220      	movs	r2, #32
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f007 f8c7 	bl	8007824 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000696:	4b3e      	ldr	r3, [pc, #248]	; (8000790 <MX_TIM1_Init+0x138>)
 8000698:	4a3e      	ldr	r2, [pc, #248]	; (8000794 <MX_TIM1_Init+0x13c>)
 800069a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800069c:	4b3c      	ldr	r3, [pc, #240]	; (8000790 <MX_TIM1_Init+0x138>)
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a2:	4b3b      	ldr	r3, [pc, #236]	; (8000790 <MX_TIM1_Init+0x138>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <MX_TIM1_Init+0x138>)
 80006aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b0:	4b37      	ldr	r3, [pc, #220]	; (8000790 <MX_TIM1_Init+0x138>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006b6:	4b36      	ldr	r3, [pc, #216]	; (8000790 <MX_TIM1_Init+0x138>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006bc:	4b34      	ldr	r3, [pc, #208]	; (8000790 <MX_TIM1_Init+0x138>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006c2:	4833      	ldr	r0, [pc, #204]	; (8000790 <MX_TIM1_Init+0x138>)
 80006c4:	f002 fff6 	bl	80036b4 <HAL_TIM_Base_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80006ce:	f000 f979 	bl	80009c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006dc:	4619      	mov	r1, r3
 80006de:	482c      	ldr	r0, [pc, #176]	; (8000790 <MX_TIM1_Init+0x138>)
 80006e0:	f003 fa1a 	bl	8003b18 <HAL_TIM_ConfigClockSource>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80006ea:	f000 f96b 	bl	80009c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006ee:	4828      	ldr	r0, [pc, #160]	; (8000790 <MX_TIM1_Init+0x138>)
 80006f0:	f003 f82f 	bl	8003752 <HAL_TIM_PWM_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80006fa:	f000 f963 	bl	80009c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fe:	2300      	movs	r3, #0
 8000700:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000702:	2300      	movs	r3, #0
 8000704:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000706:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800070a:	4619      	mov	r1, r3
 800070c:	4820      	ldr	r0, [pc, #128]	; (8000790 <MX_TIM1_Init+0x138>)
 800070e:	f003 fddb 	bl	80042c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000718:	f000 f954 	bl	80009c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800071c:	2360      	movs	r3, #96	; 0x60
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000724:	2300      	movs	r3, #0
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000728:	2300      	movs	r3, #0
 800072a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000730:	2300      	movs	r3, #0
 8000732:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000734:	2300      	movs	r3, #0
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073c:	2200      	movs	r2, #0
 800073e:	4619      	mov	r1, r3
 8000740:	4813      	ldr	r0, [pc, #76]	; (8000790 <MX_TIM1_Init+0x138>)
 8000742:	f003 f927 	bl	8003994 <HAL_TIM_PWM_ConfigChannel>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800074c:	f000 f93a 	bl	80009c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000768:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800076a:	2300      	movs	r3, #0
 800076c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	4619      	mov	r1, r3
 8000772:	4807      	ldr	r0, [pc, #28]	; (8000790 <MX_TIM1_Init+0x138>)
 8000774:	f003 fe24 	bl	80043c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800077e:	f000 f921 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000782:	4803      	ldr	r0, [pc, #12]	; (8000790 <MX_TIM1_Init+0x138>)
 8000784:	f000 f982 	bl	8000a8c <HAL_TIM_MspPostInit>

}
 8000788:	bf00      	nop
 800078a:	3758      	adds	r7, #88	; 0x58
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	200000bc 	.word	0x200000bc
 8000794:	40010000 	.word	0x40010000

08000798 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08e      	sub	sp, #56	; 0x38
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ac:	f107 0320 	add.w	r3, r7, #32
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
 80007c4:	615a      	str	r2, [r3, #20]
 80007c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007c8:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <MX_TIM2_Init+0xe8>)
 80007ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007d0:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <MX_TIM2_Init+0xe8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d6:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <MX_TIM2_Init+0xe8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007dc:	4b28      	ldr	r3, [pc, #160]	; (8000880 <MX_TIM2_Init+0xe8>)
 80007de:	f04f 32ff 	mov.w	r2, #4294967295
 80007e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e4:	4b26      	ldr	r3, [pc, #152]	; (8000880 <MX_TIM2_Init+0xe8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ea:	4b25      	ldr	r3, [pc, #148]	; (8000880 <MX_TIM2_Init+0xe8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007f0:	4823      	ldr	r0, [pc, #140]	; (8000880 <MX_TIM2_Init+0xe8>)
 80007f2:	f002 ff5f 	bl	80036b4 <HAL_TIM_Base_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80007fc:	f000 f8e2 	bl	80009c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000806:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800080a:	4619      	mov	r1, r3
 800080c:	481c      	ldr	r0, [pc, #112]	; (8000880 <MX_TIM2_Init+0xe8>)
 800080e:	f003 f983 	bl	8003b18 <HAL_TIM_ConfigClockSource>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000818:	f000 f8d4 	bl	80009c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800081c:	4818      	ldr	r0, [pc, #96]	; (8000880 <MX_TIM2_Init+0xe8>)
 800081e:	f002 ff98 	bl	8003752 <HAL_TIM_PWM_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000828:	f000 f8cc 	bl	80009c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000834:	f107 0320 	add.w	r3, r7, #32
 8000838:	4619      	mov	r1, r3
 800083a:	4811      	ldr	r0, [pc, #68]	; (8000880 <MX_TIM2_Init+0xe8>)
 800083c:	f003 fd44 	bl	80042c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000846:	f000 f8bd 	bl	80009c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800084a:	2360      	movs	r3, #96	; 0x60
 800084c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2200      	movs	r2, #0
 800085e:	4619      	mov	r1, r3
 8000860:	4807      	ldr	r0, [pc, #28]	; (8000880 <MX_TIM2_Init+0xe8>)
 8000862:	f003 f897 	bl	8003994 <HAL_TIM_PWM_ConfigChannel>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800086c:	f000 f8aa 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000870:	4803      	ldr	r0, [pc, #12]	; (8000880 <MX_TIM2_Init+0xe8>)
 8000872:	f000 f90b 	bl	8000a8c <HAL_TIM_MspPostInit>

}
 8000876:	bf00      	nop
 8000878:	3738      	adds	r7, #56	; 0x38
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000104 	.word	0x20000104

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	; 0x30
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	61bb      	str	r3, [r7, #24]
 800089e:	4b45      	ldr	r3, [pc, #276]	; (80009b4 <MX_GPIO_Init+0x130>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a44      	ldr	r2, [pc, #272]	; (80009b4 <MX_GPIO_Init+0x130>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b42      	ldr	r3, [pc, #264]	; (80009b4 <MX_GPIO_Init+0x130>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	61bb      	str	r3, [r7, #24]
 80008b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
 80008ba:	4b3e      	ldr	r3, [pc, #248]	; (80009b4 <MX_GPIO_Init+0x130>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a3d      	ldr	r2, [pc, #244]	; (80009b4 <MX_GPIO_Init+0x130>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b3b      	ldr	r3, [pc, #236]	; (80009b4 <MX_GPIO_Init+0x130>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	4b37      	ldr	r3, [pc, #220]	; (80009b4 <MX_GPIO_Init+0x130>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a36      	ldr	r2, [pc, #216]	; (80009b4 <MX_GPIO_Init+0x130>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b34      	ldr	r3, [pc, #208]	; (80009b4 <MX_GPIO_Init+0x130>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	4b30      	ldr	r3, [pc, #192]	; (80009b4 <MX_GPIO_Init+0x130>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a2f      	ldr	r2, [pc, #188]	; (80009b4 <MX_GPIO_Init+0x130>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b2d      	ldr	r3, [pc, #180]	; (80009b4 <MX_GPIO_Init+0x130>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	4b29      	ldr	r3, [pc, #164]	; (80009b4 <MX_GPIO_Init+0x130>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a28      	ldr	r2, [pc, #160]	; (80009b4 <MX_GPIO_Init+0x130>)
 8000914:	f043 0310 	orr.w	r3, r3, #16
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <MX_GPIO_Init+0x130>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0310 	and.w	r3, r3, #16
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <MX_GPIO_Init+0x130>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a21      	ldr	r2, [pc, #132]	; (80009b4 <MX_GPIO_Init+0x130>)
 8000930:	f043 0308 	orr.w	r3, r3, #8
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <MX_GPIO_Init+0x130>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0308 	and.w	r3, r3, #8
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000942:	2201      	movs	r2, #1
 8000944:	2101      	movs	r1, #1
 8000946:	481c      	ldr	r0, [pc, #112]	; (80009b8 <MX_GPIO_Init+0x134>)
 8000948:	f000 fcea 	bl	8001320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000952:	481a      	ldr	r0, [pc, #104]	; (80009bc <MX_GPIO_Init+0x138>)
 8000954:	f000 fce4 	bl	8001320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000958:	2301      	movs	r3, #1
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4812      	ldr	r0, [pc, #72]	; (80009b8 <MX_GPIO_Init+0x134>)
 8000970:	f000 fb3a 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000974:	2304      	movs	r3, #4
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	480e      	ldr	r0, [pc, #56]	; (80009c0 <MX_GPIO_Init+0x13c>)
 8000988:	f000 fb2e 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 800098c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_GPIO_Init+0x138>)
 80009a6:	f000 fb1f 	bl	8000fe8 <HAL_GPIO_Init>

}
 80009aa:	bf00      	nop
 80009ac:	3730      	adds	r7, #48	; 0x30
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020800 	.word	0x40020800
 80009bc:	40020c00 	.word	0x40020c00
 80009c0:	40020400 	.word	0x40020400

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	e7fe      	b.n	80009cc <Error_Handler+0x8>
	...

080009d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <HAL_MspInit+0x4c>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e4:	6453      	str	r3, [r2, #68]	; 0x44
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <HAL_MspInit+0x4c>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <HAL_MspInit+0x4c>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a00:	6413      	str	r3, [r2, #64]	; 0x40
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_MspInit+0x4c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a0e:	2007      	movs	r0, #7
 8000a10:	f000 faa8 	bl	8000f64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800

08000a20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a15      	ldr	r2, [pc, #84]	; (8000a84 <HAL_TIM_Base_MspInit+0x64>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d10e      	bne.n	8000a50 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <HAL_TIM_Base_MspInit+0x68>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a13      	ldr	r2, [pc, #76]	; (8000a88 <HAL_TIM_Base_MspInit+0x68>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <HAL_TIM_Base_MspInit+0x68>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a4e:	e012      	b.n	8000a76 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a58:	d10d      	bne.n	8000a76 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <HAL_TIM_Base_MspInit+0x68>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a09      	ldr	r2, [pc, #36]	; (8000a88 <HAL_TIM_Base_MspInit+0x68>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <HAL_TIM_Base_MspInit+0x68>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
}
 8000a76:	bf00      	nop
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40010000 	.word	0x40010000
 8000a88:	40023800 	.word	0x40023800

08000a8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a24      	ldr	r2, [pc, #144]	; (8000b3c <HAL_TIM_MspPostInit+0xb0>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d11f      	bne.n	8000aee <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <HAL_TIM_MspPostInit+0xb4>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a22      	ldr	r2, [pc, #136]	; (8000b40 <HAL_TIM_MspPostInit+0xb4>)
 8000ab8:	f043 0310 	orr.w	r3, r3, #16
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <HAL_TIM_MspPostInit+0xb4>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0310 	and.w	r3, r3, #16
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000aca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000adc:	2301      	movs	r3, #1
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4817      	ldr	r0, [pc, #92]	; (8000b44 <HAL_TIM_MspPostInit+0xb8>)
 8000ae8:	f000 fa7e 	bl	8000fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000aec:	e022      	b.n	8000b34 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000af6:	d11d      	bne.n	8000b34 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <HAL_TIM_MspPostInit+0xb4>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b00:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <HAL_TIM_MspPostInit+0xb4>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6313      	str	r3, [r2, #48]	; 0x30
 8000b08:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <HAL_TIM_MspPostInit+0xb4>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b14:	2301      	movs	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b24:	2301      	movs	r3, #1
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4806      	ldr	r0, [pc, #24]	; (8000b48 <HAL_TIM_MspPostInit+0xbc>)
 8000b30:	f000 fa5a 	bl	8000fe8 <HAL_GPIO_Init>
}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40010000 	.word	0x40010000
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40020000 	.word	0x40020000

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <NMI_Handler+0x4>

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b98:	f000 f8d0 	bl	8000d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <OTG_FS_IRQHandler+0x10>)
 8000ba6:	f000 fe3f 	bl	8001828 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000528 	.word	0x20000528

08000bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bbc:	4a14      	ldr	r2, [pc, #80]	; (8000c10 <_sbrk+0x5c>)
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <_sbrk+0x60>)
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <_sbrk+0x64>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d102      	bne.n	8000bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <_sbrk+0x64>)
 8000bd2:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <_sbrk+0x68>)
 8000bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d207      	bcs.n	8000bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be4:	f006 fde4 	bl	80077b0 <__errno>
 8000be8:	4603      	mov	r3, r0
 8000bea:	220c      	movs	r2, #12
 8000bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf2:	e009      	b.n	8000c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bfa:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <_sbrk+0x64>)
 8000c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c06:	68fb      	ldr	r3, [r7, #12]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20020000 	.word	0x20020000
 8000c14:	00000400 	.word	0x00000400
 8000c18:	200000ac 	.word	0x200000ac
 8000c1c:	20000840 	.word	0x20000840

08000c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <SystemInit+0x20>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <SystemInit+0x20>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c4a:	490e      	ldr	r1, [pc, #56]	; (8000c84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c4c:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c60:	4c0b      	ldr	r4, [pc, #44]	; (8000c90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c6e:	f7ff ffd7 	bl	8000c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c72:	f006 fda3 	bl	80077bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c76:	f7ff fc23 	bl	80004c0 <main>
  bx  lr    
 8000c7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c84:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000c88:	08007a00 	.word	0x08007a00
  ldr r2, =_sbss
 8000c8c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000c90:	2000083c 	.word	0x2000083c

08000c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC_IRQHandler>
	...

08000c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	; (8000cd8 <HAL_Init+0x40>)
 8000ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_Init+0x40>)
 8000cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <HAL_Init+0x40>)
 8000cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f94f 	bl	8000f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f000 f808 	bl	8000cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff fe80 	bl	80009d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023c00 	.word	0x40023c00

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_InitTick+0x54>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_InitTick+0x58>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4619      	mov	r1, r3
 8000cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 f967 	bl	8000fce <HAL_SYSTICK_Config>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00e      	b.n	8000d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d80a      	bhi.n	8000d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f000 f92f 	bl	8000f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d1c:	4a06      	ldr	r2, [pc, #24]	; (8000d38 <HAL_InitTick+0x5c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e000      	b.n	8000d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000000 	.word	0x20000000
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000004 	.word	0x20000004

08000d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_IncTick+0x20>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x24>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_IncTick+0x24>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	2000014c 	.word	0x2000014c

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <HAL_GetTick+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	2000014c 	.word	0x2000014c

08000d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d84:	f7ff ffee 	bl	8000d64 <HAL_GetTick>
 8000d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d94:	d005      	beq.n	8000da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_Delay+0x44>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4413      	add	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000da2:	bf00      	nop
 8000da4:	f7ff ffde 	bl	8000d64 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d8f7      	bhi.n	8000da4 <HAL_Delay+0x28>
  {
  }
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	db0b      	blt.n	8000e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	f003 021f 	and.w	r2, r3, #31
 8000e40:	4907      	ldr	r1, [pc, #28]	; (8000e60 <__NVIC_EnableIRQ+0x38>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	095b      	lsrs	r3, r3, #5
 8000e48:	2001      	movs	r0, #1
 8000e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000e100 	.word	0xe000e100

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	; (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	; (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	; 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f30:	d301      	bcc.n	8000f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00f      	b.n	8000f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <SysTick_Config+0x40>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3e:	210f      	movs	r1, #15
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f7ff ff8e 	bl	8000e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <SysTick_Config+0x40>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4e:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <SysTick_Config+0x40>)
 8000f50:	2207      	movs	r2, #7
 8000f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff29 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8c:	f7ff ff3e 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68b9      	ldr	r1, [r7, #8]
 8000f96:	6978      	ldr	r0, [r7, #20]
 8000f98:	f7ff ff8e 	bl	8000eb8 <NVIC_EncodePriority>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff5d 	bl	8000e64 <__NVIC_SetPriority>
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff31 	bl	8000e28 <__NVIC_EnableIRQ>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff ffa2 	bl	8000f20 <SysTick_Config>
 8000fdc:	4603      	mov	r3, r0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
 8001002:	e16b      	b.n	80012dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001004:	2201      	movs	r2, #1
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	429a      	cmp	r2, r3
 800101e:	f040 815a 	bne.w	80012d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	2b01      	cmp	r3, #1
 800102c:	d005      	beq.n	800103a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001036:	2b02      	cmp	r3, #2
 8001038:	d130      	bne.n	800109c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	2203      	movs	r2, #3
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	68da      	ldr	r2, [r3, #12]
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001070:	2201      	movs	r2, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	091b      	lsrs	r3, r3, #4
 8001086:	f003 0201 	and.w	r2, r3, #1
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	2b03      	cmp	r3, #3
 80010a6:	d017      	beq.n	80010d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d123      	bne.n	800112c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	08da      	lsrs	r2, r3, #3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3208      	adds	r2, #8
 80010ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	f003 0307 	and.w	r3, r3, #7
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	220f      	movs	r2, #15
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	691a      	ldr	r2, [r3, #16]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	08da      	lsrs	r2, r3, #3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3208      	adds	r2, #8
 8001126:	69b9      	ldr	r1, [r7, #24]
 8001128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0203 	and.w	r2, r3, #3
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001168:	2b00      	cmp	r3, #0
 800116a:	f000 80b4 	beq.w	80012d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b60      	ldr	r3, [pc, #384]	; (80012f4 <HAL_GPIO_Init+0x30c>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	4a5f      	ldr	r2, [pc, #380]	; (80012f4 <HAL_GPIO_Init+0x30c>)
 8001178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800117c:	6453      	str	r3, [r2, #68]	; 0x44
 800117e:	4b5d      	ldr	r3, [pc, #372]	; (80012f4 <HAL_GPIO_Init+0x30c>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800118a:	4a5b      	ldr	r2, [pc, #364]	; (80012f8 <HAL_GPIO_Init+0x310>)
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	089b      	lsrs	r3, r3, #2
 8001190:	3302      	adds	r3, #2
 8001192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	220f      	movs	r2, #15
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a52      	ldr	r2, [pc, #328]	; (80012fc <HAL_GPIO_Init+0x314>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d02b      	beq.n	800120e <HAL_GPIO_Init+0x226>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a51      	ldr	r2, [pc, #324]	; (8001300 <HAL_GPIO_Init+0x318>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d025      	beq.n	800120a <HAL_GPIO_Init+0x222>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a50      	ldr	r2, [pc, #320]	; (8001304 <HAL_GPIO_Init+0x31c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d01f      	beq.n	8001206 <HAL_GPIO_Init+0x21e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4f      	ldr	r2, [pc, #316]	; (8001308 <HAL_GPIO_Init+0x320>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d019      	beq.n	8001202 <HAL_GPIO_Init+0x21a>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4e      	ldr	r2, [pc, #312]	; (800130c <HAL_GPIO_Init+0x324>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d013      	beq.n	80011fe <HAL_GPIO_Init+0x216>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4d      	ldr	r2, [pc, #308]	; (8001310 <HAL_GPIO_Init+0x328>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d00d      	beq.n	80011fa <HAL_GPIO_Init+0x212>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a4c      	ldr	r2, [pc, #304]	; (8001314 <HAL_GPIO_Init+0x32c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d007      	beq.n	80011f6 <HAL_GPIO_Init+0x20e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4b      	ldr	r2, [pc, #300]	; (8001318 <HAL_GPIO_Init+0x330>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d101      	bne.n	80011f2 <HAL_GPIO_Init+0x20a>
 80011ee:	2307      	movs	r3, #7
 80011f0:	e00e      	b.n	8001210 <HAL_GPIO_Init+0x228>
 80011f2:	2308      	movs	r3, #8
 80011f4:	e00c      	b.n	8001210 <HAL_GPIO_Init+0x228>
 80011f6:	2306      	movs	r3, #6
 80011f8:	e00a      	b.n	8001210 <HAL_GPIO_Init+0x228>
 80011fa:	2305      	movs	r3, #5
 80011fc:	e008      	b.n	8001210 <HAL_GPIO_Init+0x228>
 80011fe:	2304      	movs	r3, #4
 8001200:	e006      	b.n	8001210 <HAL_GPIO_Init+0x228>
 8001202:	2303      	movs	r3, #3
 8001204:	e004      	b.n	8001210 <HAL_GPIO_Init+0x228>
 8001206:	2302      	movs	r3, #2
 8001208:	e002      	b.n	8001210 <HAL_GPIO_Init+0x228>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <HAL_GPIO_Init+0x228>
 800120e:	2300      	movs	r3, #0
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	f002 0203 	and.w	r2, r2, #3
 8001216:	0092      	lsls	r2, r2, #2
 8001218:	4093      	lsls	r3, r2
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001220:	4935      	ldr	r1, [pc, #212]	; (80012f8 <HAL_GPIO_Init+0x310>)
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	3302      	adds	r3, #2
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800122e:	4b3b      	ldr	r3, [pc, #236]	; (800131c <HAL_GPIO_Init+0x334>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001252:	4a32      	ldr	r2, [pc, #200]	; (800131c <HAL_GPIO_Init+0x334>)
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001258:	4b30      	ldr	r3, [pc, #192]	; (800131c <HAL_GPIO_Init+0x334>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800127c:	4a27      	ldr	r2, [pc, #156]	; (800131c <HAL_GPIO_Init+0x334>)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001282:	4b26      	ldr	r3, [pc, #152]	; (800131c <HAL_GPIO_Init+0x334>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012a6:	4a1d      	ldr	r2, [pc, #116]	; (800131c <HAL_GPIO_Init+0x334>)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	; (800131c <HAL_GPIO_Init+0x334>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d0:	4a12      	ldr	r2, [pc, #72]	; (800131c <HAL_GPIO_Init+0x334>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3301      	adds	r3, #1
 80012da:	61fb      	str	r3, [r7, #28]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	2b0f      	cmp	r3, #15
 80012e0:	f67f ae90 	bls.w	8001004 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3724      	adds	r7, #36	; 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40013800 	.word	0x40013800
 80012fc:	40020000 	.word	0x40020000
 8001300:	40020400 	.word	0x40020400
 8001304:	40020800 	.word	0x40020800
 8001308:	40020c00 	.word	0x40020c00
 800130c:	40021000 	.word	0x40021000
 8001310:	40021400 	.word	0x40021400
 8001314:	40021800 	.word	0x40021800
 8001318:	40021c00 	.word	0x40021c00
 800131c:	40013c00 	.word	0x40013c00

08001320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	807b      	strh	r3, [r7, #2]
 800132c:	4613      	mov	r3, r2
 800132e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001330:	787b      	ldrb	r3, [r7, #1]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001336:	887a      	ldrh	r2, [r7, #2]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800133c:	e003      	b.n	8001346 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800133e:	887b      	ldrh	r3, [r7, #2]
 8001340:	041a      	lsls	r2, r3, #16
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	619a      	str	r2, [r3, #24]
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001352:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001354:	b08f      	sub	sp, #60	; 0x3c
 8001356:	af0a      	add	r7, sp, #40	; 0x28
 8001358:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d101      	bne.n	8001364 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e054      	b.n	800140e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d106      	bne.n	8001384 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f005 ff7a 	bl	8007278 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2203      	movs	r2, #3
 8001388:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001394:	2b00      	cmp	r3, #0
 8001396:	d102      	bne.n	800139e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f003 f8d0 	bl	8004548 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	687e      	ldr	r6, [r7, #4]
 80013b0:	466d      	mov	r5, sp
 80013b2:	f106 0410 	add.w	r4, r6, #16
 80013b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80013c6:	1d33      	adds	r3, r6, #4
 80013c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ca:	6838      	ldr	r0, [r7, #0]
 80013cc:	f003 f84a 	bl	8004464 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2101      	movs	r1, #1
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 f8c7 	bl	800456a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	687e      	ldr	r6, [r7, #4]
 80013e4:	466d      	mov	r5, sp
 80013e6:	f106 0410 	add.w	r4, r6, #16
 80013ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80013fa:	1d33      	adds	r3, r6, #4
 80013fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013fe:	6838      	ldr	r0, [r7, #0]
 8001400:	f003 fa2e 	bl	8004860 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001416 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001416:	b590      	push	{r4, r7, lr}
 8001418:	b089      	sub	sp, #36	; 0x24
 800141a:	af04      	add	r7, sp, #16
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	4608      	mov	r0, r1
 8001420:	4611      	mov	r1, r2
 8001422:	461a      	mov	r2, r3
 8001424:	4603      	mov	r3, r0
 8001426:	70fb      	strb	r3, [r7, #3]
 8001428:	460b      	mov	r3, r1
 800142a:	70bb      	strb	r3, [r7, #2]
 800142c:	4613      	mov	r3, r2
 800142e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001436:	2b01      	cmp	r3, #1
 8001438:	d101      	bne.n	800143e <HAL_HCD_HC_Init+0x28>
 800143a:	2302      	movs	r3, #2
 800143c:	e076      	b.n	800152c <HAL_HCD_HC_Init+0x116>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001446:	78fb      	ldrb	r3, [r7, #3]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	212c      	movs	r1, #44	; 0x2c
 800144c:	fb01 f303 	mul.w	r3, r1, r3
 8001450:	4413      	add	r3, r2
 8001452:	333d      	adds	r3, #61	; 0x3d
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	212c      	movs	r1, #44	; 0x2c
 800145e:	fb01 f303 	mul.w	r3, r1, r3
 8001462:	4413      	add	r3, r2
 8001464:	3338      	adds	r3, #56	; 0x38
 8001466:	787a      	ldrb	r2, [r7, #1]
 8001468:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800146a:	78fb      	ldrb	r3, [r7, #3]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	212c      	movs	r1, #44	; 0x2c
 8001470:	fb01 f303 	mul.w	r3, r1, r3
 8001474:	4413      	add	r3, r2
 8001476:	3340      	adds	r3, #64	; 0x40
 8001478:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800147a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	212c      	movs	r1, #44	; 0x2c
 8001482:	fb01 f303 	mul.w	r3, r1, r3
 8001486:	4413      	add	r3, r2
 8001488:	3339      	adds	r3, #57	; 0x39
 800148a:	78fa      	ldrb	r2, [r7, #3]
 800148c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800148e:	78fb      	ldrb	r3, [r7, #3]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	212c      	movs	r1, #44	; 0x2c
 8001494:	fb01 f303 	mul.w	r3, r1, r3
 8001498:	4413      	add	r3, r2
 800149a:	333f      	adds	r3, #63	; 0x3f
 800149c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80014a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	78ba      	ldrb	r2, [r7, #2]
 80014a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80014aa:	b2d0      	uxtb	r0, r2
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	212c      	movs	r1, #44	; 0x2c
 80014b0:	fb01 f303 	mul.w	r3, r1, r3
 80014b4:	4413      	add	r3, r2
 80014b6:	333a      	adds	r3, #58	; 0x3a
 80014b8:	4602      	mov	r2, r0
 80014ba:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80014bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	da09      	bge.n	80014d8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80014c4:	78fb      	ldrb	r3, [r7, #3]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	212c      	movs	r1, #44	; 0x2c
 80014ca:	fb01 f303 	mul.w	r3, r1, r3
 80014ce:	4413      	add	r3, r2
 80014d0:	333b      	adds	r3, #59	; 0x3b
 80014d2:	2201      	movs	r2, #1
 80014d4:	701a      	strb	r2, [r3, #0]
 80014d6:	e008      	b.n	80014ea <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80014d8:	78fb      	ldrb	r3, [r7, #3]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	212c      	movs	r1, #44	; 0x2c
 80014de:	fb01 f303 	mul.w	r3, r1, r3
 80014e2:	4413      	add	r3, r2
 80014e4:	333b      	adds	r3, #59	; 0x3b
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80014ea:	78fb      	ldrb	r3, [r7, #3]
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	212c      	movs	r1, #44	; 0x2c
 80014f0:	fb01 f303 	mul.w	r3, r1, r3
 80014f4:	4413      	add	r3, r2
 80014f6:	333c      	adds	r3, #60	; 0x3c
 80014f8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80014fc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6818      	ldr	r0, [r3, #0]
 8001502:	787c      	ldrb	r4, [r7, #1]
 8001504:	78ba      	ldrb	r2, [r7, #2]
 8001506:	78f9      	ldrb	r1, [r7, #3]
 8001508:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800150a:	9302      	str	r3, [sp, #8]
 800150c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	4623      	mov	r3, r4
 800151a:	f003 fb1b 	bl	8004b54 <USB_HC_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bd90      	pop	{r4, r7, pc}

08001534 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800154a:	2b01      	cmp	r3, #1
 800154c:	d101      	bne.n	8001552 <HAL_HCD_HC_Halt+0x1e>
 800154e:	2302      	movs	r3, #2
 8001550:	e00f      	b.n	8001572 <HAL_HCD_HC_Halt+0x3e>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	78fa      	ldrb	r2, [r7, #3]
 8001560:	4611      	mov	r1, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f003 fd57 	bl	8005016 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	4608      	mov	r0, r1
 8001586:	4611      	mov	r1, r2
 8001588:	461a      	mov	r2, r3
 800158a:	4603      	mov	r3, r0
 800158c:	70fb      	strb	r3, [r7, #3]
 800158e:	460b      	mov	r3, r1
 8001590:	70bb      	strb	r3, [r7, #2]
 8001592:	4613      	mov	r3, r2
 8001594:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	212c      	movs	r1, #44	; 0x2c
 800159c:	fb01 f303 	mul.w	r3, r1, r3
 80015a0:	4413      	add	r3, r2
 80015a2:	333b      	adds	r3, #59	; 0x3b
 80015a4:	78ba      	ldrb	r2, [r7, #2]
 80015a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80015a8:	78fb      	ldrb	r3, [r7, #3]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	212c      	movs	r1, #44	; 0x2c
 80015ae:	fb01 f303 	mul.w	r3, r1, r3
 80015b2:	4413      	add	r3, r2
 80015b4:	333f      	adds	r3, #63	; 0x3f
 80015b6:	787a      	ldrb	r2, [r7, #1]
 80015b8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80015ba:	7c3b      	ldrb	r3, [r7, #16]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d112      	bne.n	80015e6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80015c0:	78fb      	ldrb	r3, [r7, #3]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	212c      	movs	r1, #44	; 0x2c
 80015c6:	fb01 f303 	mul.w	r3, r1, r3
 80015ca:	4413      	add	r3, r2
 80015cc:	3342      	adds	r3, #66	; 0x42
 80015ce:	2203      	movs	r2, #3
 80015d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80015d2:	78fb      	ldrb	r3, [r7, #3]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	212c      	movs	r1, #44	; 0x2c
 80015d8:	fb01 f303 	mul.w	r3, r1, r3
 80015dc:	4413      	add	r3, r2
 80015de:	333d      	adds	r3, #61	; 0x3d
 80015e0:	7f3a      	ldrb	r2, [r7, #28]
 80015e2:	701a      	strb	r2, [r3, #0]
 80015e4:	e008      	b.n	80015f8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	212c      	movs	r1, #44	; 0x2c
 80015ec:	fb01 f303 	mul.w	r3, r1, r3
 80015f0:	4413      	add	r3, r2
 80015f2:	3342      	adds	r3, #66	; 0x42
 80015f4:	2202      	movs	r2, #2
 80015f6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80015f8:	787b      	ldrb	r3, [r7, #1]
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	f200 80c6 	bhi.w	800178c <HAL_HCD_HC_SubmitRequest+0x210>
 8001600:	a201      	add	r2, pc, #4	; (adr r2, 8001608 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001606:	bf00      	nop
 8001608:	08001619 	.word	0x08001619
 800160c:	08001779 	.word	0x08001779
 8001610:	0800167d 	.word	0x0800167d
 8001614:	080016fb 	.word	0x080016fb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001618:	7c3b      	ldrb	r3, [r7, #16]
 800161a:	2b01      	cmp	r3, #1
 800161c:	f040 80b8 	bne.w	8001790 <HAL_HCD_HC_SubmitRequest+0x214>
 8001620:	78bb      	ldrb	r3, [r7, #2]
 8001622:	2b00      	cmp	r3, #0
 8001624:	f040 80b4 	bne.w	8001790 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001628:	8b3b      	ldrh	r3, [r7, #24]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d108      	bne.n	8001640 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800162e:	78fb      	ldrb	r3, [r7, #3]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	212c      	movs	r1, #44	; 0x2c
 8001634:	fb01 f303 	mul.w	r3, r1, r3
 8001638:	4413      	add	r3, r2
 800163a:	3355      	adds	r3, #85	; 0x55
 800163c:	2201      	movs	r2, #1
 800163e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001640:	78fb      	ldrb	r3, [r7, #3]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	212c      	movs	r1, #44	; 0x2c
 8001646:	fb01 f303 	mul.w	r3, r1, r3
 800164a:	4413      	add	r3, r2
 800164c:	3355      	adds	r3, #85	; 0x55
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d109      	bne.n	8001668 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	212c      	movs	r1, #44	; 0x2c
 800165a:	fb01 f303 	mul.w	r3, r1, r3
 800165e:	4413      	add	r3, r2
 8001660:	3342      	adds	r3, #66	; 0x42
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001666:	e093      	b.n	8001790 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	212c      	movs	r1, #44	; 0x2c
 800166e:	fb01 f303 	mul.w	r3, r1, r3
 8001672:	4413      	add	r3, r2
 8001674:	3342      	adds	r3, #66	; 0x42
 8001676:	2202      	movs	r2, #2
 8001678:	701a      	strb	r2, [r3, #0]
      break;
 800167a:	e089      	b.n	8001790 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800167c:	78bb      	ldrb	r3, [r7, #2]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d11d      	bne.n	80016be <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	212c      	movs	r1, #44	; 0x2c
 8001688:	fb01 f303 	mul.w	r3, r1, r3
 800168c:	4413      	add	r3, r2
 800168e:	3355      	adds	r3, #85	; 0x55
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d109      	bne.n	80016aa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	212c      	movs	r1, #44	; 0x2c
 800169c:	fb01 f303 	mul.w	r3, r1, r3
 80016a0:	4413      	add	r3, r2
 80016a2:	3342      	adds	r3, #66	; 0x42
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80016a8:	e073      	b.n	8001792 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016aa:	78fb      	ldrb	r3, [r7, #3]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	212c      	movs	r1, #44	; 0x2c
 80016b0:	fb01 f303 	mul.w	r3, r1, r3
 80016b4:	4413      	add	r3, r2
 80016b6:	3342      	adds	r3, #66	; 0x42
 80016b8:	2202      	movs	r2, #2
 80016ba:	701a      	strb	r2, [r3, #0]
      break;
 80016bc:	e069      	b.n	8001792 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	212c      	movs	r1, #44	; 0x2c
 80016c4:	fb01 f303 	mul.w	r3, r1, r3
 80016c8:	4413      	add	r3, r2
 80016ca:	3354      	adds	r3, #84	; 0x54
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d109      	bne.n	80016e6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016d2:	78fb      	ldrb	r3, [r7, #3]
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	212c      	movs	r1, #44	; 0x2c
 80016d8:	fb01 f303 	mul.w	r3, r1, r3
 80016dc:	4413      	add	r3, r2
 80016de:	3342      	adds	r3, #66	; 0x42
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
      break;
 80016e4:	e055      	b.n	8001792 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016e6:	78fb      	ldrb	r3, [r7, #3]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	212c      	movs	r1, #44	; 0x2c
 80016ec:	fb01 f303 	mul.w	r3, r1, r3
 80016f0:	4413      	add	r3, r2
 80016f2:	3342      	adds	r3, #66	; 0x42
 80016f4:	2202      	movs	r2, #2
 80016f6:	701a      	strb	r2, [r3, #0]
      break;
 80016f8:	e04b      	b.n	8001792 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80016fa:	78bb      	ldrb	r3, [r7, #2]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d11d      	bne.n	800173c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	212c      	movs	r1, #44	; 0x2c
 8001706:	fb01 f303 	mul.w	r3, r1, r3
 800170a:	4413      	add	r3, r2
 800170c:	3355      	adds	r3, #85	; 0x55
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d109      	bne.n	8001728 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	212c      	movs	r1, #44	; 0x2c
 800171a:	fb01 f303 	mul.w	r3, r1, r3
 800171e:	4413      	add	r3, r2
 8001720:	3342      	adds	r3, #66	; 0x42
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001726:	e034      	b.n	8001792 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	212c      	movs	r1, #44	; 0x2c
 800172e:	fb01 f303 	mul.w	r3, r1, r3
 8001732:	4413      	add	r3, r2
 8001734:	3342      	adds	r3, #66	; 0x42
 8001736:	2202      	movs	r2, #2
 8001738:	701a      	strb	r2, [r3, #0]
      break;
 800173a:	e02a      	b.n	8001792 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800173c:	78fb      	ldrb	r3, [r7, #3]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	212c      	movs	r1, #44	; 0x2c
 8001742:	fb01 f303 	mul.w	r3, r1, r3
 8001746:	4413      	add	r3, r2
 8001748:	3354      	adds	r3, #84	; 0x54
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d109      	bne.n	8001764 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001750:	78fb      	ldrb	r3, [r7, #3]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	212c      	movs	r1, #44	; 0x2c
 8001756:	fb01 f303 	mul.w	r3, r1, r3
 800175a:	4413      	add	r3, r2
 800175c:	3342      	adds	r3, #66	; 0x42
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
      break;
 8001762:	e016      	b.n	8001792 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001764:	78fb      	ldrb	r3, [r7, #3]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	212c      	movs	r1, #44	; 0x2c
 800176a:	fb01 f303 	mul.w	r3, r1, r3
 800176e:	4413      	add	r3, r2
 8001770:	3342      	adds	r3, #66	; 0x42
 8001772:	2202      	movs	r2, #2
 8001774:	701a      	strb	r2, [r3, #0]
      break;
 8001776:	e00c      	b.n	8001792 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001778:	78fb      	ldrb	r3, [r7, #3]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	212c      	movs	r1, #44	; 0x2c
 800177e:	fb01 f303 	mul.w	r3, r1, r3
 8001782:	4413      	add	r3, r2
 8001784:	3342      	adds	r3, #66	; 0x42
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
      break;
 800178a:	e002      	b.n	8001792 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800178c:	bf00      	nop
 800178e:	e000      	b.n	8001792 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001790:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	212c      	movs	r1, #44	; 0x2c
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	4413      	add	r3, r2
 800179e:	3344      	adds	r3, #68	; 0x44
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	8b3a      	ldrh	r2, [r7, #24]
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	202c      	movs	r0, #44	; 0x2c
 80017ac:	fb00 f303 	mul.w	r3, r0, r3
 80017b0:	440b      	add	r3, r1
 80017b2:	334c      	adds	r3, #76	; 0x4c
 80017b4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	212c      	movs	r1, #44	; 0x2c
 80017bc:	fb01 f303 	mul.w	r3, r1, r3
 80017c0:	4413      	add	r3, r2
 80017c2:	3360      	adds	r3, #96	; 0x60
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	212c      	movs	r1, #44	; 0x2c
 80017ce:	fb01 f303 	mul.w	r3, r1, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	3350      	adds	r3, #80	; 0x50
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	212c      	movs	r1, #44	; 0x2c
 80017e0:	fb01 f303 	mul.w	r3, r1, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	3339      	adds	r3, #57	; 0x39
 80017e8:	78fa      	ldrb	r2, [r7, #3]
 80017ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	212c      	movs	r1, #44	; 0x2c
 80017f2:	fb01 f303 	mul.w	r3, r1, r3
 80017f6:	4413      	add	r3, r2
 80017f8:	3361      	adds	r3, #97	; 0x61
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	78fb      	ldrb	r3, [r7, #3]
 8001804:	222c      	movs	r2, #44	; 0x2c
 8001806:	fb02 f303 	mul.w	r3, r2, r3
 800180a:	3338      	adds	r3, #56	; 0x38
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	18d1      	adds	r1, r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	461a      	mov	r2, r3
 8001818:	f003 faaa 	bl	8004d70 <USB_HC_StartXfer>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop

08001828 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f002 ffcd 	bl	80047de <USB_GetMode>
 8001844:	4603      	mov	r3, r0
 8001846:	2b01      	cmp	r3, #1
 8001848:	f040 80f6 	bne.w	8001a38 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f002 ffb1 	bl	80047b8 <USB_ReadInterrupts>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80ec 	beq.w	8001a36 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f002 ffa8 	bl	80047b8 <USB_ReadInterrupts>
 8001868:	4603      	mov	r3, r0
 800186a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800186e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001872:	d104      	bne.n	800187e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800187c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f002 ff98 	bl	80047b8 <USB_ReadInterrupts>
 8001888:	4603      	mov	r3, r0
 800188a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800188e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001892:	d104      	bne.n	800189e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800189c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f002 ff88 	bl	80047b8 <USB_ReadInterrupts>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80018b2:	d104      	bne.n	80018be <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f002 ff78 	bl	80047b8 <USB_ReadInterrupts>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d103      	bne.n	80018da <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2202      	movs	r2, #2
 80018d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f002 ff6a 	bl	80047b8 <USB_ReadInterrupts>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018ee:	d11c      	bne.n	800192a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80018f8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10f      	bne.n	800192a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800190a:	2110      	movs	r1, #16
 800190c:	6938      	ldr	r0, [r7, #16]
 800190e:	f002 fe79 	bl	8004604 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001912:	6938      	ldr	r0, [r7, #16]
 8001914:	f002 fe9a 	bl	800464c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2101      	movs	r1, #1
 800191e:	4618      	mov	r0, r3
 8001920:	f003 f852 	bl	80049c8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f005 fd17 	bl	8007358 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f002 ff42 	bl	80047b8 <USB_ReadInterrupts>
 8001934:	4603      	mov	r3, r0
 8001936:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800193a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800193e:	d102      	bne.n	8001946 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f001 fa03 	bl	8002d4c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f002 ff34 	bl	80047b8 <USB_ReadInterrupts>
 8001950:	4603      	mov	r3, r0
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b08      	cmp	r3, #8
 8001958:	d106      	bne.n	8001968 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f005 fce0 	bl	8007320 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2208      	movs	r2, #8
 8001966:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f002 ff23 	bl	80047b8 <USB_ReadInterrupts>
 8001972:	4603      	mov	r3, r0
 8001974:	f003 0310 	and.w	r3, r3, #16
 8001978:	2b10      	cmp	r3, #16
 800197a:	d101      	bne.n	8001980 <HAL_HCD_IRQHandler+0x158>
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <HAL_HCD_IRQHandler+0x15a>
 8001980:	2300      	movs	r3, #0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d012      	beq.n	80019ac <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	699a      	ldr	r2, [r3, #24]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 0210 	bic.w	r2, r2, #16
 8001994:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f001 f906 	bl	8002ba8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	699a      	ldr	r2, [r3, #24]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0210 	orr.w	r2, r2, #16
 80019aa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f002 ff01 	bl	80047b8 <USB_ReadInterrupts>
 80019b6:	4603      	mov	r3, r0
 80019b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019c0:	d13a      	bne.n	8001a38 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f003 fb14 	bl	8004ff4 <USB_HC_ReadInterrupt>
 80019cc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	e025      	b.n	8001a20 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	fa22 f303 	lsr.w	r3, r2, r3
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d018      	beq.n	8001a1a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	015a      	lsls	r2, r3, #5
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4413      	add	r3, r2
 80019f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019fe:	d106      	bne.n	8001a0e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	4619      	mov	r1, r3
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f8ab 	bl	8001b62 <HCD_HC_IN_IRQHandler>
 8001a0c:	e005      	b.n	8001a1a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	4619      	mov	r1, r3
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 fcc6 	bl	80023a6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d3d4      	bcc.n	80019d4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a32:	615a      	str	r2, [r3, #20]
 8001a34:	e000      	b.n	8001a38 <HAL_HCD_IRQHandler+0x210>
      return;
 8001a36:	bf00      	nop
    }
  }
}
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_HCD_Start+0x16>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e013      	b.n	8001a7c <HAL_HCD_Start+0x3e>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2101      	movs	r1, #1
 8001a62:	4618      	mov	r0, r3
 8001a64:	f003 f814 	bl	8004a90 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f002 fd5a 	bl	8004526 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d101      	bne.n	8001a9a <HAL_HCD_Stop+0x16>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e00d      	b.n	8001ab6 <HAL_HCD_Stop+0x32>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f003 fc0e 	bl	80052c8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f002 ffb6 	bl	8004a3c <USB_ResetPort>
 8001ad0:	4603      	mov	r3, r0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	212c      	movs	r1, #44	; 0x2c
 8001aec:	fb01 f303 	mul.w	r3, r1, r3
 8001af0:	4413      	add	r3, r2
 8001af2:	3360      	adds	r3, #96	; 0x60
 8001af4:	781b      	ldrb	r3, [r3, #0]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b0e:	78fb      	ldrb	r3, [r7, #3]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	212c      	movs	r1, #44	; 0x2c
 8001b14:	fb01 f303 	mul.w	r3, r1, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	3350      	adds	r3, #80	; 0x50
 8001b1c:	681b      	ldr	r3, [r3, #0]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 fffa 	bl	8004b30 <USB_GetCurrentFrame>
 8001b3c:	4603      	mov	r3, r0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f002 ffd5 	bl	8004b02 <USB_GetHostSpeed>
 8001b58:	4603      	mov	r3, r0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	015a      	lsls	r2, r3, #5
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4413      	add	r3, r2
 8001b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d119      	bne.n	8001bc6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	015a      	lsls	r2, r3, #5
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	015a      	lsls	r2, r3, #5
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4413      	add	r3, r2
 8001bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	0151      	lsls	r1, r2, #5
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	440a      	add	r2, r1
 8001bba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bbe:	f043 0302 	orr.w	r3, r3, #2
 8001bc2:	60d3      	str	r3, [r2, #12]
 8001bc4:	e101      	b.n	8001dca <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	015a      	lsls	r2, r3, #5
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4413      	add	r3, r2
 8001bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bdc:	d12b      	bne.n	8001c36 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	015a      	lsls	r2, r3, #5
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	4413      	add	r3, r2
 8001be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bea:	461a      	mov	r2, r3
 8001bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bf0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	212c      	movs	r1, #44	; 0x2c
 8001bf8:	fb01 f303 	mul.w	r3, r1, r3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3361      	adds	r3, #97	; 0x61
 8001c00:	2207      	movs	r2, #7
 8001c02:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	015a      	lsls	r2, r3, #5
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	0151      	lsls	r1, r2, #5
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	440a      	add	r2, r1
 8001c1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f003 f9f1 	bl	8005016 <USB_HC_Halt>
 8001c34:	e0c9      	b.n	8001dca <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	015a      	lsls	r2, r3, #5
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 0320 	and.w	r3, r3, #32
 8001c48:	2b20      	cmp	r3, #32
 8001c4a:	d109      	bne.n	8001c60 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	015a      	lsls	r2, r3, #5
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4413      	add	r3, r2
 8001c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c58:	461a      	mov	r2, r3
 8001c5a:	2320      	movs	r3, #32
 8001c5c:	6093      	str	r3, [r2, #8]
 8001c5e:	e0b4      	b.n	8001dca <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	015a      	lsls	r2, r3, #5
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4413      	add	r3, r2
 8001c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d133      	bne.n	8001cde <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	015a      	lsls	r2, r3, #5
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	0151      	lsls	r1, r2, #5
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	440a      	add	r2, r1
 8001c8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	212c      	movs	r1, #44	; 0x2c
 8001c9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3361      	adds	r3, #97	; 0x61
 8001ca4:	2205      	movs	r2, #5
 8001ca6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	015a      	lsls	r2, r3, #5
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4413      	add	r3, r2
 8001cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	2310      	movs	r3, #16
 8001cb8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	015a      	lsls	r2, r3, #5
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	2308      	movs	r3, #8
 8001cca:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f003 f99d 	bl	8005016 <USB_HC_Halt>
 8001cdc:	e075      	b.n	8001dca <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	015a      	lsls	r2, r3, #5
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf4:	d134      	bne.n	8001d60 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	015a      	lsls	r2, r3, #5
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	0151      	lsls	r1, r2, #5
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	440a      	add	r2, r1
 8001d0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	212c      	movs	r1, #44	; 0x2c
 8001d1c:	fb01 f303 	mul.w	r3, r1, r3
 8001d20:	4413      	add	r3, r2
 8001d22:	3361      	adds	r3, #97	; 0x61
 8001d24:	2208      	movs	r2, #8
 8001d26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	015a      	lsls	r2, r3, #5
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4413      	add	r3, r2
 8001d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d34:	461a      	mov	r2, r3
 8001d36:	2310      	movs	r3, #16
 8001d38:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	015a      	lsls	r2, r3, #5
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4413      	add	r3, r2
 8001d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d46:	461a      	mov	r2, r3
 8001d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d4c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	4611      	mov	r1, r2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 f95c 	bl	8005016 <USB_HC_Halt>
 8001d5e:	e034      	b.n	8001dca <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	015a      	lsls	r2, r3, #5
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4413      	add	r3, r2
 8001d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d72:	2b80      	cmp	r3, #128	; 0x80
 8001d74:	d129      	bne.n	8001dca <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	015a      	lsls	r2, r3, #5
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	0151      	lsls	r1, r2, #5
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	440a      	add	r2, r1
 8001d8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	212c      	movs	r1, #44	; 0x2c
 8001d9c:	fb01 f303 	mul.w	r3, r1, r3
 8001da0:	4413      	add	r3, r2
 8001da2:	3361      	adds	r3, #97	; 0x61
 8001da4:	2206      	movs	r2, #6
 8001da6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	4611      	mov	r1, r2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 f92f 	bl	8005016 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001de0:	d122      	bne.n	8001e28 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	0151      	lsls	r1, r2, #5
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	440a      	add	r2, r1
 8001df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f003 f902 	bl	8005016 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	015a      	lsls	r2, r3, #5
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1e:	461a      	mov	r2, r3
 8001e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e24:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e26:	e2ba      	b.n	800239e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	015a      	lsls	r2, r3, #5
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4413      	add	r3, r2
 8001e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	f040 811b 	bne.w	8002076 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d019      	beq.n	8001e7c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	212c      	movs	r1, #44	; 0x2c
 8001e4e:	fb01 f303 	mul.w	r3, r1, r3
 8001e52:	4413      	add	r3, r2
 8001e54:	3348      	adds	r3, #72	; 0x48
 8001e56:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	0159      	lsls	r1, r3, #5
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	440b      	add	r3, r1
 8001e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e6a:	1ad2      	subs	r2, r2, r3
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	202c      	movs	r0, #44	; 0x2c
 8001e72:	fb00 f303 	mul.w	r3, r0, r3
 8001e76:	440b      	add	r3, r1
 8001e78:	3350      	adds	r3, #80	; 0x50
 8001e7a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	212c      	movs	r1, #44	; 0x2c
 8001e82:	fb01 f303 	mul.w	r3, r1, r3
 8001e86:	4413      	add	r3, r2
 8001e88:	3361      	adds	r3, #97	; 0x61
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	212c      	movs	r1, #44	; 0x2c
 8001e94:	fb01 f303 	mul.w	r3, r1, r3
 8001e98:	4413      	add	r3, r2
 8001e9a:	335c      	adds	r3, #92	; 0x5c
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	015a      	lsls	r2, r3, #5
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eac:	461a      	mov	r2, r3
 8001eae:	2301      	movs	r3, #1
 8001eb0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	212c      	movs	r1, #44	; 0x2c
 8001eb8:	fb01 f303 	mul.w	r3, r1, r3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	333f      	adds	r3, #63	; 0x3f
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d009      	beq.n	8001eda <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	212c      	movs	r1, #44	; 0x2c
 8001ecc:	fb01 f303 	mul.w	r3, r1, r3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	333f      	adds	r3, #63	; 0x3f
 8001ed4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d121      	bne.n	8001f1e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	0151      	lsls	r1, r2, #5
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	440a      	add	r2, r1
 8001ef0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ef4:	f043 0302 	orr.w	r3, r3, #2
 8001ef8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f003 f886 	bl	8005016 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	015a      	lsls	r2, r3, #5
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f16:	461a      	mov	r2, r3
 8001f18:	2310      	movs	r3, #16
 8001f1a:	6093      	str	r3, [r2, #8]
 8001f1c:	e066      	b.n	8001fec <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	212c      	movs	r1, #44	; 0x2c
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	4413      	add	r3, r2
 8001f2a:	333f      	adds	r3, #63	; 0x3f
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d127      	bne.n	8001f82 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	0151      	lsls	r1, r2, #5
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	440a      	add	r2, r1
 8001f48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f50:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	212c      	movs	r1, #44	; 0x2c
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3360      	adds	r3, #96	; 0x60
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	b2d9      	uxtb	r1, r3
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	202c      	movs	r0, #44	; 0x2c
 8001f6e:	fb00 f303 	mul.w	r3, r0, r3
 8001f72:	4413      	add	r3, r2
 8001f74:	3360      	adds	r3, #96	; 0x60
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f005 f9fa 	bl	8007374 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001f80:	e034      	b.n	8001fec <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	212c      	movs	r1, #44	; 0x2c
 8001f88:	fb01 f303 	mul.w	r3, r1, r3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	333f      	adds	r3, #63	; 0x3f
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d12a      	bne.n	8001fec <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	212c      	movs	r1, #44	; 0x2c
 8001f9c:	fb01 f303 	mul.w	r3, r1, r3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3360      	adds	r3, #96	; 0x60
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	212c      	movs	r1, #44	; 0x2c
 8001fae:	fb01 f303 	mul.w	r3, r1, r3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3354      	adds	r3, #84	; 0x54
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	f083 0301 	eor.w	r3, r3, #1
 8001fbc:	b2d8      	uxtb	r0, r3
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	212c      	movs	r1, #44	; 0x2c
 8001fc4:	fb01 f303 	mul.w	r3, r1, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	3354      	adds	r3, #84	; 0x54
 8001fcc:	4602      	mov	r2, r0
 8001fce:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	b2d9      	uxtb	r1, r3
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	202c      	movs	r0, #44	; 0x2c
 8001fda:	fb00 f303 	mul.w	r3, r0, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	3360      	adds	r3, #96	; 0x60
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f005 f9c4 	bl	8007374 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d12b      	bne.n	800204c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	212c      	movs	r1, #44	; 0x2c
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	3348      	adds	r3, #72	; 0x48
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	202c      	movs	r0, #44	; 0x2c
 800200a:	fb00 f202 	mul.w	r2, r0, r2
 800200e:	440a      	add	r2, r1
 8002010:	3240      	adds	r2, #64	; 0x40
 8002012:	8812      	ldrh	r2, [r2, #0]
 8002014:	fbb3 f3f2 	udiv	r3, r3, r2
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 81be 	beq.w	800239e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	212c      	movs	r1, #44	; 0x2c
 8002028:	fb01 f303 	mul.w	r3, r1, r3
 800202c:	4413      	add	r3, r2
 800202e:	3354      	adds	r3, #84	; 0x54
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	f083 0301 	eor.w	r3, r3, #1
 8002036:	b2d8      	uxtb	r0, r3
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	212c      	movs	r1, #44	; 0x2c
 800203e:	fb01 f303 	mul.w	r3, r1, r3
 8002042:	4413      	add	r3, r2
 8002044:	3354      	adds	r3, #84	; 0x54
 8002046:	4602      	mov	r2, r0
 8002048:	701a      	strb	r2, [r3, #0]
}
 800204a:	e1a8      	b.n	800239e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	212c      	movs	r1, #44	; 0x2c
 8002052:	fb01 f303 	mul.w	r3, r1, r3
 8002056:	4413      	add	r3, r2
 8002058:	3354      	adds	r3, #84	; 0x54
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	f083 0301 	eor.w	r3, r3, #1
 8002060:	b2d8      	uxtb	r0, r3
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	212c      	movs	r1, #44	; 0x2c
 8002068:	fb01 f303 	mul.w	r3, r1, r3
 800206c:	4413      	add	r3, r2
 800206e:	3354      	adds	r3, #84	; 0x54
 8002070:	4602      	mov	r2, r0
 8002072:	701a      	strb	r2, [r3, #0]
}
 8002074:	e193      	b.n	800239e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	015a      	lsls	r2, r3, #5
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4413      	add	r3, r2
 800207e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b02      	cmp	r3, #2
 800208a:	f040 8106 	bne.w	800229a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4413      	add	r3, r2
 8002096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	0151      	lsls	r1, r2, #5
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	440a      	add	r2, r1
 80020a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020a8:	f023 0302 	bic.w	r3, r3, #2
 80020ac:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	212c      	movs	r1, #44	; 0x2c
 80020b4:	fb01 f303 	mul.w	r3, r1, r3
 80020b8:	4413      	add	r3, r2
 80020ba:	3361      	adds	r3, #97	; 0x61
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d109      	bne.n	80020d6 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	212c      	movs	r1, #44	; 0x2c
 80020c8:	fb01 f303 	mul.w	r3, r1, r3
 80020cc:	4413      	add	r3, r2
 80020ce:	3360      	adds	r3, #96	; 0x60
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]
 80020d4:	e0c9      	b.n	800226a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	212c      	movs	r1, #44	; 0x2c
 80020dc:	fb01 f303 	mul.w	r3, r1, r3
 80020e0:	4413      	add	r3, r2
 80020e2:	3361      	adds	r3, #97	; 0x61
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b05      	cmp	r3, #5
 80020e8:	d109      	bne.n	80020fe <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	212c      	movs	r1, #44	; 0x2c
 80020f0:	fb01 f303 	mul.w	r3, r1, r3
 80020f4:	4413      	add	r3, r2
 80020f6:	3360      	adds	r3, #96	; 0x60
 80020f8:	2205      	movs	r2, #5
 80020fa:	701a      	strb	r2, [r3, #0]
 80020fc:	e0b5      	b.n	800226a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	212c      	movs	r1, #44	; 0x2c
 8002104:	fb01 f303 	mul.w	r3, r1, r3
 8002108:	4413      	add	r3, r2
 800210a:	3361      	adds	r3, #97	; 0x61
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b06      	cmp	r3, #6
 8002110:	d009      	beq.n	8002126 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	212c      	movs	r1, #44	; 0x2c
 8002118:	fb01 f303 	mul.w	r3, r1, r3
 800211c:	4413      	add	r3, r2
 800211e:	3361      	adds	r3, #97	; 0x61
 8002120:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002122:	2b08      	cmp	r3, #8
 8002124:	d150      	bne.n	80021c8 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	212c      	movs	r1, #44	; 0x2c
 800212c:	fb01 f303 	mul.w	r3, r1, r3
 8002130:	4413      	add	r3, r2
 8002132:	335c      	adds	r3, #92	; 0x5c
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	202c      	movs	r0, #44	; 0x2c
 800213e:	fb00 f303 	mul.w	r3, r0, r3
 8002142:	440b      	add	r3, r1
 8002144:	335c      	adds	r3, #92	; 0x5c
 8002146:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	212c      	movs	r1, #44	; 0x2c
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4413      	add	r3, r2
 8002154:	335c      	adds	r3, #92	; 0x5c
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d912      	bls.n	8002182 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	212c      	movs	r1, #44	; 0x2c
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	335c      	adds	r3, #92	; 0x5c
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	212c      	movs	r1, #44	; 0x2c
 8002174:	fb01 f303 	mul.w	r3, r1, r3
 8002178:	4413      	add	r3, r2
 800217a:	3360      	adds	r3, #96	; 0x60
 800217c:	2204      	movs	r2, #4
 800217e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002180:	e073      	b.n	800226a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	212c      	movs	r1, #44	; 0x2c
 8002188:	fb01 f303 	mul.w	r3, r1, r3
 800218c:	4413      	add	r3, r2
 800218e:	3360      	adds	r3, #96	; 0x60
 8002190:	2202      	movs	r2, #2
 8002192:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	015a      	lsls	r2, r3, #5
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4413      	add	r3, r2
 800219c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021aa:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021b2:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c0:	461a      	mov	r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021c6:	e050      	b.n	800226a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	212c      	movs	r1, #44	; 0x2c
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	3361      	adds	r3, #97	; 0x61
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d122      	bne.n	8002222 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	212c      	movs	r1, #44	; 0x2c
 80021e2:	fb01 f303 	mul.w	r3, r1, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	3360      	adds	r3, #96	; 0x60
 80021ea:	2202      	movs	r2, #2
 80021ec:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002204:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800220c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4413      	add	r3, r2
 8002216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221a:	461a      	mov	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	e023      	b.n	800226a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	212c      	movs	r1, #44	; 0x2c
 8002228:	fb01 f303 	mul.w	r3, r1, r3
 800222c:	4413      	add	r3, r2
 800222e:	3361      	adds	r3, #97	; 0x61
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b07      	cmp	r3, #7
 8002234:	d119      	bne.n	800226a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	212c      	movs	r1, #44	; 0x2c
 800223c:	fb01 f303 	mul.w	r3, r1, r3
 8002240:	4413      	add	r3, r2
 8002242:	335c      	adds	r3, #92	; 0x5c
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	202c      	movs	r0, #44	; 0x2c
 800224e:	fb00 f303 	mul.w	r3, r0, r3
 8002252:	440b      	add	r3, r1
 8002254:	335c      	adds	r3, #92	; 0x5c
 8002256:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	212c      	movs	r1, #44	; 0x2c
 800225e:	fb01 f303 	mul.w	r3, r1, r3
 8002262:	4413      	add	r3, r2
 8002264:	3360      	adds	r3, #96	; 0x60
 8002266:	2204      	movs	r2, #4
 8002268:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4413      	add	r3, r2
 8002272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002276:	461a      	mov	r2, r3
 8002278:	2302      	movs	r3, #2
 800227a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	b2d9      	uxtb	r1, r3
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	202c      	movs	r0, #44	; 0x2c
 8002286:	fb00 f303 	mul.w	r3, r0, r3
 800228a:	4413      	add	r3, r2
 800228c:	3360      	adds	r3, #96	; 0x60
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f005 f86e 	bl	8007374 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002298:	e081      	b.n	800239e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	015a      	lsls	r2, r3, #5
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0310 	and.w	r3, r3, #16
 80022ac:	2b10      	cmp	r3, #16
 80022ae:	d176      	bne.n	800239e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	212c      	movs	r1, #44	; 0x2c
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	333f      	adds	r3, #63	; 0x3f
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d121      	bne.n	8002308 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	212c      	movs	r1, #44	; 0x2c
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	335c      	adds	r3, #92	; 0x5c
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	0151      	lsls	r1, r2, #5
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	440a      	add	r2, r1
 80022ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022f0:	f043 0302 	orr.w	r3, r3, #2
 80022f4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	4611      	mov	r1, r2
 8002300:	4618      	mov	r0, r3
 8002302:	f002 fe88 	bl	8005016 <USB_HC_Halt>
 8002306:	e041      	b.n	800238c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	212c      	movs	r1, #44	; 0x2c
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	333f      	adds	r3, #63	; 0x3f
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d009      	beq.n	8002330 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	212c      	movs	r1, #44	; 0x2c
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	4413      	add	r3, r2
 8002328:	333f      	adds	r3, #63	; 0x3f
 800232a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800232c:	2b02      	cmp	r3, #2
 800232e:	d12d      	bne.n	800238c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	212c      	movs	r1, #44	; 0x2c
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	4413      	add	r3, r2
 800233c:	335c      	adds	r3, #92	; 0x5c
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d120      	bne.n	800238c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	212c      	movs	r1, #44	; 0x2c
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	4413      	add	r3, r2
 8002356:	3361      	adds	r3, #97	; 0x61
 8002358:	2203      	movs	r2, #3
 800235a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	015a      	lsls	r2, r3, #5
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4413      	add	r3, r2
 8002364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	0151      	lsls	r1, r2, #5
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	440a      	add	r2, r1
 8002372:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002376:	f043 0302 	orr.w	r3, r3, #2
 800237a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	4611      	mov	r1, r2
 8002386:	4618      	mov	r0, r3
 8002388:	f002 fe45 	bl	8005016 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4413      	add	r3, r2
 8002394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002398:	461a      	mov	r2, r3
 800239a:	2310      	movs	r3, #16
 800239c:	6093      	str	r3, [r2, #8]
}
 800239e:	bf00      	nop
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b088      	sub	sp, #32
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	460b      	mov	r3, r1
 80023b0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	015a      	lsls	r2, r3, #5
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d119      	bne.n	800240a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e2:	461a      	mov	r2, r3
 80023e4:	2304      	movs	r3, #4
 80023e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	0151      	lsls	r1, r2, #5
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	440a      	add	r2, r1
 80023fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002402:	f043 0302 	orr.w	r3, r3, #2
 8002406:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002408:	e3ca      	b.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	015a      	lsls	r2, r3, #5
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	4413      	add	r3, r2
 8002412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 0320 	and.w	r3, r3, #32
 800241c:	2b20      	cmp	r3, #32
 800241e:	d13e      	bne.n	800249e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	4413      	add	r3, r2
 8002428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242c:	461a      	mov	r2, r3
 800242e:	2320      	movs	r3, #32
 8002430:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	212c      	movs	r1, #44	; 0x2c
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	4413      	add	r3, r2
 800243e:	333d      	adds	r3, #61	; 0x3d
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b01      	cmp	r3, #1
 8002444:	f040 83ac 	bne.w	8002ba0 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	212c      	movs	r1, #44	; 0x2c
 800244e:	fb01 f303 	mul.w	r3, r1, r3
 8002452:	4413      	add	r3, r2
 8002454:	333d      	adds	r3, #61	; 0x3d
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	212c      	movs	r1, #44	; 0x2c
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	4413      	add	r3, r2
 8002466:	3360      	adds	r3, #96	; 0x60
 8002468:	2202      	movs	r2, #2
 800246a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	4413      	add	r3, r2
 8002474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	0151      	lsls	r1, r2, #5
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	440a      	add	r2, r1
 8002482:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002486:	f043 0302 	orr.w	r3, r3, #2
 800248a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	4611      	mov	r1, r2
 8002496:	4618      	mov	r0, r3
 8002498:	f002 fdbd 	bl	8005016 <USB_HC_Halt>
}
 800249c:	e380      	b.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024b4:	d122      	bne.n	80024fc <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	0151      	lsls	r1, r2, #5
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	440a      	add	r2, r1
 80024cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	4611      	mov	r1, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f002 fd98 	bl	8005016 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f2:	461a      	mov	r2, r3
 80024f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024f8:	6093      	str	r3, [r2, #8]
}
 80024fa:	e351      	b.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	015a      	lsls	r2, r3, #5
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	4413      	add	r3, r2
 8002504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b01      	cmp	r3, #1
 8002510:	d150      	bne.n	80025b4 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	212c      	movs	r1, #44	; 0x2c
 8002518:	fb01 f303 	mul.w	r3, r1, r3
 800251c:	4413      	add	r3, r2
 800251e:	335c      	adds	r3, #92	; 0x5c
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	4413      	add	r3, r2
 800252c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002536:	2b40      	cmp	r3, #64	; 0x40
 8002538:	d111      	bne.n	800255e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	212c      	movs	r1, #44	; 0x2c
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	4413      	add	r3, r2
 8002546:	333d      	adds	r3, #61	; 0x3d
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002558:	461a      	mov	r2, r3
 800255a:	2340      	movs	r3, #64	; 0x40
 800255c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	4413      	add	r3, r2
 8002566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	0151      	lsls	r1, r2, #5
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	440a      	add	r2, r1
 8002574:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002578:	f043 0302 	orr.w	r3, r3, #2
 800257c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f002 fd44 	bl	8005016 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	015a      	lsls	r2, r3, #5
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	4413      	add	r3, r2
 8002596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259a:	461a      	mov	r2, r3
 800259c:	2301      	movs	r3, #1
 800259e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	212c      	movs	r1, #44	; 0x2c
 80025a6:	fb01 f303 	mul.w	r3, r1, r3
 80025aa:	4413      	add	r3, r2
 80025ac:	3361      	adds	r3, #97	; 0x61
 80025ae:	2201      	movs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]
}
 80025b2:	e2f5      	b.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c6:	2b40      	cmp	r3, #64	; 0x40
 80025c8:	d13c      	bne.n	8002644 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	212c      	movs	r1, #44	; 0x2c
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	3361      	adds	r3, #97	; 0x61
 80025d8:	2204      	movs	r2, #4
 80025da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	212c      	movs	r1, #44	; 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	333d      	adds	r3, #61	; 0x3d
 80025ea:	2201      	movs	r2, #1
 80025ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	212c      	movs	r1, #44	; 0x2c
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	335c      	adds	r3, #92	; 0x5c
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	4413      	add	r3, r2
 8002608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	0151      	lsls	r1, r2, #5
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	440a      	add	r2, r1
 8002616:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800261a:	f043 0302 	orr.w	r3, r3, #2
 800261e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	4611      	mov	r1, r2
 800262a:	4618      	mov	r0, r3
 800262c:	f002 fcf3 	bl	8005016 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	4413      	add	r3, r2
 8002638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263c:	461a      	mov	r2, r3
 800263e:	2340      	movs	r3, #64	; 0x40
 8002640:	6093      	str	r3, [r2, #8]
}
 8002642:	e2ad      	b.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	4413      	add	r3, r2
 800264c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b08      	cmp	r3, #8
 8002658:	d12a      	bne.n	80026b0 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	015a      	lsls	r2, r3, #5
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	4413      	add	r3, r2
 8002662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002666:	461a      	mov	r2, r3
 8002668:	2308      	movs	r3, #8
 800266a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	4413      	add	r3, r2
 8002674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	0151      	lsls	r1, r2, #5
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	440a      	add	r2, r1
 8002682:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002686:	f043 0302 	orr.w	r3, r3, #2
 800268a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f002 fcbd 	bl	8005016 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	212c      	movs	r1, #44	; 0x2c
 80026a2:	fb01 f303 	mul.w	r3, r1, r3
 80026a6:	4413      	add	r3, r2
 80026a8:	3361      	adds	r3, #97	; 0x61
 80026aa:	2205      	movs	r2, #5
 80026ac:	701a      	strb	r2, [r3, #0]
}
 80026ae:	e277      	b.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 0310 	and.w	r3, r3, #16
 80026c2:	2b10      	cmp	r3, #16
 80026c4:	d150      	bne.n	8002768 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	212c      	movs	r1, #44	; 0x2c
 80026cc:	fb01 f303 	mul.w	r3, r1, r3
 80026d0:	4413      	add	r3, r2
 80026d2:	335c      	adds	r3, #92	; 0x5c
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	212c      	movs	r1, #44	; 0x2c
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	3361      	adds	r3, #97	; 0x61
 80026e6:	2203      	movs	r2, #3
 80026e8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	212c      	movs	r1, #44	; 0x2c
 80026f0:	fb01 f303 	mul.w	r3, r1, r3
 80026f4:	4413      	add	r3, r2
 80026f6:	333d      	adds	r3, #61	; 0x3d
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d112      	bne.n	8002724 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	212c      	movs	r1, #44	; 0x2c
 8002704:	fb01 f303 	mul.w	r3, r1, r3
 8002708:	4413      	add	r3, r2
 800270a:	333c      	adds	r3, #60	; 0x3c
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d108      	bne.n	8002724 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	212c      	movs	r1, #44	; 0x2c
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	4413      	add	r3, r2
 800271e:	333d      	adds	r3, #61	; 0x3d
 8002720:	2201      	movs	r2, #1
 8002722:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	0151      	lsls	r1, r2, #5
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	440a      	add	r2, r1
 800273a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800273e:	f043 0302 	orr.w	r3, r3, #2
 8002742:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f002 fc61 	bl	8005016 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	4413      	add	r3, r2
 800275c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002760:	461a      	mov	r2, r3
 8002762:	2310      	movs	r3, #16
 8002764:	6093      	str	r3, [r2, #8]
}
 8002766:	e21b      	b.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	4413      	add	r3, r2
 8002770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277a:	2b80      	cmp	r3, #128	; 0x80
 800277c:	d174      	bne.n	8002868 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d121      	bne.n	80027ca <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	212c      	movs	r1, #44	; 0x2c
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	3361      	adds	r3, #97	; 0x61
 8002794:	2206      	movs	r2, #6
 8002796:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	0151      	lsls	r1, r2, #5
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	440a      	add	r2, r1
 80027ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027b2:	f043 0302 	orr.w	r3, r3, #2
 80027b6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f002 fc27 	bl	8005016 <USB_HC_Halt>
 80027c8:	e044      	b.n	8002854 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	212c      	movs	r1, #44	; 0x2c
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	335c      	adds	r3, #92	; 0x5c
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	202c      	movs	r0, #44	; 0x2c
 80027e2:	fb00 f303 	mul.w	r3, r0, r3
 80027e6:	440b      	add	r3, r1
 80027e8:	335c      	adds	r3, #92	; 0x5c
 80027ea:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	212c      	movs	r1, #44	; 0x2c
 80027f2:	fb01 f303 	mul.w	r3, r1, r3
 80027f6:	4413      	add	r3, r2
 80027f8:	335c      	adds	r3, #92	; 0x5c
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d920      	bls.n	8002842 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	212c      	movs	r1, #44	; 0x2c
 8002806:	fb01 f303 	mul.w	r3, r1, r3
 800280a:	4413      	add	r3, r2
 800280c:	335c      	adds	r3, #92	; 0x5c
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	212c      	movs	r1, #44	; 0x2c
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	4413      	add	r3, r2
 800281e:	3360      	adds	r3, #96	; 0x60
 8002820:	2204      	movs	r2, #4
 8002822:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	b2d9      	uxtb	r1, r3
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	202c      	movs	r0, #44	; 0x2c
 800282e:	fb00 f303 	mul.w	r3, r0, r3
 8002832:	4413      	add	r3, r2
 8002834:	3360      	adds	r3, #96	; 0x60
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f004 fd9a 	bl	8007374 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002840:	e008      	b.n	8002854 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	212c      	movs	r1, #44	; 0x2c
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	3360      	adds	r3, #96	; 0x60
 8002850:	2202      	movs	r2, #2
 8002852:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	4413      	add	r3, r2
 800285c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002860:	461a      	mov	r2, r3
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	6093      	str	r3, [r2, #8]
}
 8002866:	e19b      	b.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	4413      	add	r3, r2
 8002870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800287e:	d134      	bne.n	80028ea <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	015a      	lsls	r2, r3, #5
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	4413      	add	r3, r2
 8002888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	0151      	lsls	r1, r2, #5
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	440a      	add	r2, r1
 8002896:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800289a:	f043 0302 	orr.w	r3, r3, #2
 800289e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f002 fbb3 	bl	8005016 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028bc:	461a      	mov	r2, r3
 80028be:	2310      	movs	r3, #16
 80028c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ce:	461a      	mov	r2, r3
 80028d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	212c      	movs	r1, #44	; 0x2c
 80028dc:	fb01 f303 	mul.w	r3, r1, r3
 80028e0:	4413      	add	r3, r2
 80028e2:	3361      	adds	r3, #97	; 0x61
 80028e4:	2208      	movs	r2, #8
 80028e6:	701a      	strb	r2, [r3, #0]
}
 80028e8:	e15a      	b.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	f040 814f 	bne.w	8002ba0 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	015a      	lsls	r2, r3, #5
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	4413      	add	r3, r2
 800290a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	0151      	lsls	r1, r2, #5
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	440a      	add	r2, r1
 8002918:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800291c:	f023 0302 	bic.w	r3, r3, #2
 8002920:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	212c      	movs	r1, #44	; 0x2c
 8002928:	fb01 f303 	mul.w	r3, r1, r3
 800292c:	4413      	add	r3, r2
 800292e:	3361      	adds	r3, #97	; 0x61
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d17d      	bne.n	8002a32 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	212c      	movs	r1, #44	; 0x2c
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	4413      	add	r3, r2
 8002942:	3360      	adds	r3, #96	; 0x60
 8002944:	2201      	movs	r2, #1
 8002946:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	212c      	movs	r1, #44	; 0x2c
 800294e:	fb01 f303 	mul.w	r3, r1, r3
 8002952:	4413      	add	r3, r2
 8002954:	333f      	adds	r3, #63	; 0x3f
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b02      	cmp	r3, #2
 800295a:	d00a      	beq.n	8002972 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	212c      	movs	r1, #44	; 0x2c
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	4413      	add	r3, r2
 8002968:	333f      	adds	r3, #63	; 0x3f
 800296a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800296c:	2b03      	cmp	r3, #3
 800296e:	f040 8100 	bne.w	8002b72 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d113      	bne.n	80029a2 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	212c      	movs	r1, #44	; 0x2c
 8002980:	fb01 f303 	mul.w	r3, r1, r3
 8002984:	4413      	add	r3, r2
 8002986:	3355      	adds	r3, #85	; 0x55
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	f083 0301 	eor.w	r3, r3, #1
 800298e:	b2d8      	uxtb	r0, r3
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	3355      	adds	r3, #85	; 0x55
 800299e:	4602      	mov	r2, r0
 80029a0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	f040 80e3 	bne.w	8002b72 <HCD_HC_OUT_IRQHandler+0x7cc>
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	334c      	adds	r3, #76	; 0x4c
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80d8 	beq.w	8002b72 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	334c      	adds	r3, #76	; 0x4c
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	202c      	movs	r0, #44	; 0x2c
 80029d8:	fb00 f202 	mul.w	r2, r0, r2
 80029dc:	440a      	add	r2, r1
 80029de:	3240      	adds	r2, #64	; 0x40
 80029e0:	8812      	ldrh	r2, [r2, #0]
 80029e2:	4413      	add	r3, r2
 80029e4:	3b01      	subs	r3, #1
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	202c      	movs	r0, #44	; 0x2c
 80029ec:	fb00 f202 	mul.w	r2, r0, r2
 80029f0:	440a      	add	r2, r1
 80029f2:	3240      	adds	r2, #64	; 0x40
 80029f4:	8812      	ldrh	r2, [r2, #0]
 80029f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 80b5 	beq.w	8002b72 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3355      	adds	r3, #85	; 0x55
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	f083 0301 	eor.w	r3, r3, #1
 8002a1c:	b2d8      	uxtb	r0, r3
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	212c      	movs	r1, #44	; 0x2c
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	3355      	adds	r3, #85	; 0x55
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	701a      	strb	r2, [r3, #0]
 8002a30:	e09f      	b.n	8002b72 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	212c      	movs	r1, #44	; 0x2c
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3361      	adds	r3, #97	; 0x61
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d109      	bne.n	8002a5a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	212c      	movs	r1, #44	; 0x2c
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	3360      	adds	r3, #96	; 0x60
 8002a54:	2202      	movs	r2, #2
 8002a56:	701a      	strb	r2, [r3, #0]
 8002a58:	e08b      	b.n	8002b72 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	212c      	movs	r1, #44	; 0x2c
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	3361      	adds	r3, #97	; 0x61
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d109      	bne.n	8002a82 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	212c      	movs	r1, #44	; 0x2c
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	4413      	add	r3, r2
 8002a7a:	3360      	adds	r3, #96	; 0x60
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	e077      	b.n	8002b72 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	212c      	movs	r1, #44	; 0x2c
 8002a88:	fb01 f303 	mul.w	r3, r1, r3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3361      	adds	r3, #97	; 0x61
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b05      	cmp	r3, #5
 8002a94:	d109      	bne.n	8002aaa <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	212c      	movs	r1, #44	; 0x2c
 8002a9c:	fb01 f303 	mul.w	r3, r1, r3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3360      	adds	r3, #96	; 0x60
 8002aa4:	2205      	movs	r2, #5
 8002aa6:	701a      	strb	r2, [r3, #0]
 8002aa8:	e063      	b.n	8002b72 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3361      	adds	r3, #97	; 0x61
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b06      	cmp	r3, #6
 8002abc:	d009      	beq.n	8002ad2 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	3361      	adds	r3, #97	; 0x61
 8002acc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d14f      	bne.n	8002b72 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	335c      	adds	r3, #92	; 0x5c
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	202c      	movs	r0, #44	; 0x2c
 8002aea:	fb00 f303 	mul.w	r3, r0, r3
 8002aee:	440b      	add	r3, r1
 8002af0:	335c      	adds	r3, #92	; 0x5c
 8002af2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	212c      	movs	r1, #44	; 0x2c
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	335c      	adds	r3, #92	; 0x5c
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d912      	bls.n	8002b2e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	212c      	movs	r1, #44	; 0x2c
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	335c      	adds	r3, #92	; 0x5c
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	212c      	movs	r1, #44	; 0x2c
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	3360      	adds	r3, #96	; 0x60
 8002b28:	2204      	movs	r2, #4
 8002b2a:	701a      	strb	r2, [r3, #0]
 8002b2c:	e021      	b.n	8002b72 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3360      	adds	r3, #96	; 0x60
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b56:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b5e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7e:	461a      	mov	r2, r3
 8002b80:	2302      	movs	r3, #2
 8002b82:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	b2d9      	uxtb	r1, r3
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	202c      	movs	r0, #44	; 0x2c
 8002b8e:	fb00 f303 	mul.w	r3, r0, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	3360      	adds	r3, #96	; 0x60
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f004 fbea 	bl	8007374 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ba0:	bf00      	nop
 8002ba2:	3720      	adds	r7, #32
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08a      	sub	sp, #40	; 0x28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f003 030f 	and.w	r3, r3, #15
 8002bc8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	0c5b      	lsrs	r3, r3, #17
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	091b      	lsrs	r3, r3, #4
 8002bd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bdc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d004      	beq.n	8002bee <HCD_RXQLVL_IRQHandler+0x46>
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2b05      	cmp	r3, #5
 8002be8:	f000 80a9 	beq.w	8002d3e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002bec:	e0aa      	b.n	8002d44 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 80a6 	beq.w	8002d42 <HCD_RXQLVL_IRQHandler+0x19a>
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	212c      	movs	r1, #44	; 0x2c
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	3344      	adds	r3, #68	; 0x44
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 809b 	beq.w	8002d42 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	212c      	movs	r1, #44	; 0x2c
 8002c12:	fb01 f303 	mul.w	r3, r1, r3
 8002c16:	4413      	add	r3, r2
 8002c18:	3350      	adds	r3, #80	; 0x50
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	441a      	add	r2, r3
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	202c      	movs	r0, #44	; 0x2c
 8002c26:	fb00 f303 	mul.w	r3, r0, r3
 8002c2a:	440b      	add	r3, r1
 8002c2c:	334c      	adds	r3, #76	; 0x4c
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d87a      	bhi.n	8002d2a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6818      	ldr	r0, [r3, #0]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	212c      	movs	r1, #44	; 0x2c
 8002c3e:	fb01 f303 	mul.w	r3, r1, r3
 8002c42:	4413      	add	r3, r2
 8002c44:	3344      	adds	r3, #68	; 0x44
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	b292      	uxth	r2, r2
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	f001 fd5b 	bl	8004708 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	212c      	movs	r1, #44	; 0x2c
 8002c58:	fb01 f303 	mul.w	r3, r1, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3344      	adds	r3, #68	; 0x44
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	441a      	add	r2, r3
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	202c      	movs	r0, #44	; 0x2c
 8002c6c:	fb00 f303 	mul.w	r3, r0, r3
 8002c70:	440b      	add	r3, r1
 8002c72:	3344      	adds	r3, #68	; 0x44
 8002c74:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	212c      	movs	r1, #44	; 0x2c
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	3350      	adds	r3, #80	; 0x50
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	441a      	add	r2, r3
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	202c      	movs	r0, #44	; 0x2c
 8002c90:	fb00 f303 	mul.w	r3, r0, r3
 8002c94:	440b      	add	r3, r1
 8002c96:	3350      	adds	r3, #80	; 0x50
 8002c98:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	0cdb      	lsrs	r3, r3, #19
 8002caa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cae:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	212c      	movs	r1, #44	; 0x2c
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	3340      	adds	r3, #64	; 0x40
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d13c      	bne.n	8002d42 <HCD_RXQLVL_IRQHandler+0x19a>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d039      	beq.n	8002d42 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	015a      	lsls	r2, r3, #5
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ce4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cec:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	212c      	movs	r1, #44	; 0x2c
 8002d06:	fb01 f303 	mul.w	r3, r1, r3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3354      	adds	r3, #84	; 0x54
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	f083 0301 	eor.w	r3, r3, #1
 8002d14:	b2d8      	uxtb	r0, r3
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	212c      	movs	r1, #44	; 0x2c
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	4413      	add	r3, r2
 8002d22:	3354      	adds	r3, #84	; 0x54
 8002d24:	4602      	mov	r2, r0
 8002d26:	701a      	strb	r2, [r3, #0]
      break;
 8002d28:	e00b      	b.n	8002d42 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	212c      	movs	r1, #44	; 0x2c
 8002d30:	fb01 f303 	mul.w	r3, r1, r3
 8002d34:	4413      	add	r3, r2
 8002d36:	3360      	adds	r3, #96	; 0x60
 8002d38:	2204      	movs	r2, #4
 8002d3a:	701a      	strb	r2, [r3, #0]
      break;
 8002d3c:	e001      	b.n	8002d42 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002d3e:	bf00      	nop
 8002d40:	e000      	b.n	8002d44 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002d42:	bf00      	nop
  }
}
 8002d44:	bf00      	nop
 8002d46:	3728      	adds	r7, #40	; 0x28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d78:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d10b      	bne.n	8002d9c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d102      	bne.n	8002d94 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f004 fad4 	bl	800733c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f043 0302 	orr.w	r3, r3, #2
 8002d9a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d132      	bne.n	8002e0c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	f043 0308 	orr.w	r3, r3, #8
 8002dac:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b04      	cmp	r3, #4
 8002db6:	d126      	bne.n	8002e06 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d113      	bne.n	8002de8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002dc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dca:	d106      	bne.n	8002dda <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2102      	movs	r1, #2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f001 fdf8 	bl	80049c8 <USB_InitFSLSPClkSel>
 8002dd8:	e011      	b.n	8002dfe <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2101      	movs	r1, #1
 8002de0:	4618      	mov	r0, r3
 8002de2:	f001 fdf1 	bl	80049c8 <USB_InitFSLSPClkSel>
 8002de6:	e00a      	b.n	8002dfe <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d106      	bne.n	8002dfe <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002df6:	461a      	mov	r2, r3
 8002df8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002dfc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f004 fac6 	bl	8007390 <HAL_HCD_PortEnabled_Callback>
 8002e04:	e002      	b.n	8002e0c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f004 fad0 	bl	80073ac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d103      	bne.n	8002e1e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	f043 0320 	orr.w	r3, r3, #32
 8002e1c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e24:	461a      	mov	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	6013      	str	r3, [r2, #0]
}
 8002e2a:	bf00      	nop
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e264      	b.n	8003310 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d075      	beq.n	8002f3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e52:	4ba3      	ldr	r3, [pc, #652]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d00c      	beq.n	8002e78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e5e:	4ba0      	ldr	r3, [pc, #640]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d112      	bne.n	8002e90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e6a:	4b9d      	ldr	r3, [pc, #628]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e76:	d10b      	bne.n	8002e90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	4b99      	ldr	r3, [pc, #612]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d05b      	beq.n	8002f3c <HAL_RCC_OscConfig+0x108>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d157      	bne.n	8002f3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e23f      	b.n	8003310 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e98:	d106      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x74>
 8002e9a:	4b91      	ldr	r3, [pc, #580]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a90      	ldr	r2, [pc, #576]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	e01d      	b.n	8002ee4 <HAL_RCC_OscConfig+0xb0>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x98>
 8002eb2:	4b8b      	ldr	r3, [pc, #556]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a8a      	ldr	r2, [pc, #552]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	4b88      	ldr	r3, [pc, #544]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a87      	ldr	r2, [pc, #540]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8002ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e00b      	b.n	8002ee4 <HAL_RCC_OscConfig+0xb0>
 8002ecc:	4b84      	ldr	r3, [pc, #528]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a83      	ldr	r2, [pc, #524]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8002ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	4b81      	ldr	r3, [pc, #516]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a80      	ldr	r2, [pc, #512]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8002ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d013      	beq.n	8002f14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fd ff3a 	bl	8000d64 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7fd ff36 	bl	8000d64 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	; 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e204      	b.n	8003310 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	4b76      	ldr	r3, [pc, #472]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0xc0>
 8002f12:	e014      	b.n	8002f3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fd ff26 	bl	8000d64 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f1c:	f7fd ff22 	bl	8000d64 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b64      	cmp	r3, #100	; 0x64
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e1f0      	b.n	8003310 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2e:	4b6c      	ldr	r3, [pc, #432]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0xe8>
 8002f3a:	e000      	b.n	8002f3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d063      	beq.n	8003012 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f4a:	4b65      	ldr	r3, [pc, #404]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00b      	beq.n	8002f6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f56:	4b62      	ldr	r3, [pc, #392]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d11c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f62:	4b5f      	ldr	r3, [pc, #380]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d116      	bne.n	8002f9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f6e:	4b5c      	ldr	r3, [pc, #368]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <HAL_RCC_OscConfig+0x152>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d001      	beq.n	8002f86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e1c4      	b.n	8003310 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f86:	4b56      	ldr	r3, [pc, #344]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4952      	ldr	r1, [pc, #328]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9a:	e03a      	b.n	8003012 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d020      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fa4:	4b4f      	ldr	r3, [pc, #316]	; (80030e4 <HAL_RCC_OscConfig+0x2b0>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002faa:	f7fd fedb 	bl	8000d64 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fb2:	f7fd fed7 	bl	8000d64 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e1a5      	b.n	8003310 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc4:	4b46      	ldr	r3, [pc, #280]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd0:	4b43      	ldr	r3, [pc, #268]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4940      	ldr	r1, [pc, #256]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	600b      	str	r3, [r1, #0]
 8002fe4:	e015      	b.n	8003012 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fe6:	4b3f      	ldr	r3, [pc, #252]	; (80030e4 <HAL_RCC_OscConfig+0x2b0>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fec:	f7fd feba 	bl	8000d64 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ff4:	f7fd feb6 	bl	8000d64 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e184      	b.n	8003310 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003006:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d030      	beq.n	8003080 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d016      	beq.n	8003054 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003026:	4b30      	ldr	r3, [pc, #192]	; (80030e8 <HAL_RCC_OscConfig+0x2b4>)
 8003028:	2201      	movs	r2, #1
 800302a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302c:	f7fd fe9a 	bl	8000d64 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003034:	f7fd fe96 	bl	8000d64 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e164      	b.n	8003310 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003046:	4b26      	ldr	r3, [pc, #152]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8003048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x200>
 8003052:	e015      	b.n	8003080 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003054:	4b24      	ldr	r3, [pc, #144]	; (80030e8 <HAL_RCC_OscConfig+0x2b4>)
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305a:	f7fd fe83 	bl	8000d64 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003062:	f7fd fe7f 	bl	8000d64 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e14d      	b.n	8003310 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003074:	4b1a      	ldr	r3, [pc, #104]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8003076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1f0      	bne.n	8003062 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80a0 	beq.w	80031ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308e:	2300      	movs	r3, #0
 8003090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003092:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10f      	bne.n	80030be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	4a0e      	ldr	r2, [pc, #56]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 80030a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ac:	6413      	str	r3, [r2, #64]	; 0x40
 80030ae:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ba:	2301      	movs	r3, #1
 80030bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030be:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <HAL_RCC_OscConfig+0x2b8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d121      	bne.n	800310e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ca:	4b08      	ldr	r3, [pc, #32]	; (80030ec <HAL_RCC_OscConfig+0x2b8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a07      	ldr	r2, [pc, #28]	; (80030ec <HAL_RCC_OscConfig+0x2b8>)
 80030d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d6:	f7fd fe45 	bl	8000d64 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030dc:	e011      	b.n	8003102 <HAL_RCC_OscConfig+0x2ce>
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800
 80030e4:	42470000 	.word	0x42470000
 80030e8:	42470e80 	.word	0x42470e80
 80030ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f0:	f7fd fe38 	bl	8000d64 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e106      	b.n	8003310 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003102:	4b85      	ldr	r3, [pc, #532]	; (8003318 <HAL_RCC_OscConfig+0x4e4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d106      	bne.n	8003124 <HAL_RCC_OscConfig+0x2f0>
 8003116:	4b81      	ldr	r3, [pc, #516]	; (800331c <HAL_RCC_OscConfig+0x4e8>)
 8003118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311a:	4a80      	ldr	r2, [pc, #512]	; (800331c <HAL_RCC_OscConfig+0x4e8>)
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	6713      	str	r3, [r2, #112]	; 0x70
 8003122:	e01c      	b.n	800315e <HAL_RCC_OscConfig+0x32a>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	2b05      	cmp	r3, #5
 800312a:	d10c      	bne.n	8003146 <HAL_RCC_OscConfig+0x312>
 800312c:	4b7b      	ldr	r3, [pc, #492]	; (800331c <HAL_RCC_OscConfig+0x4e8>)
 800312e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003130:	4a7a      	ldr	r2, [pc, #488]	; (800331c <HAL_RCC_OscConfig+0x4e8>)
 8003132:	f043 0304 	orr.w	r3, r3, #4
 8003136:	6713      	str	r3, [r2, #112]	; 0x70
 8003138:	4b78      	ldr	r3, [pc, #480]	; (800331c <HAL_RCC_OscConfig+0x4e8>)
 800313a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313c:	4a77      	ldr	r2, [pc, #476]	; (800331c <HAL_RCC_OscConfig+0x4e8>)
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	6713      	str	r3, [r2, #112]	; 0x70
 8003144:	e00b      	b.n	800315e <HAL_RCC_OscConfig+0x32a>
 8003146:	4b75      	ldr	r3, [pc, #468]	; (800331c <HAL_RCC_OscConfig+0x4e8>)
 8003148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314a:	4a74      	ldr	r2, [pc, #464]	; (800331c <HAL_RCC_OscConfig+0x4e8>)
 800314c:	f023 0301 	bic.w	r3, r3, #1
 8003150:	6713      	str	r3, [r2, #112]	; 0x70
 8003152:	4b72      	ldr	r3, [pc, #456]	; (800331c <HAL_RCC_OscConfig+0x4e8>)
 8003154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003156:	4a71      	ldr	r2, [pc, #452]	; (800331c <HAL_RCC_OscConfig+0x4e8>)
 8003158:	f023 0304 	bic.w	r3, r3, #4
 800315c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d015      	beq.n	8003192 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003166:	f7fd fdfd 	bl	8000d64 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316c:	e00a      	b.n	8003184 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800316e:	f7fd fdf9 	bl	8000d64 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f241 3288 	movw	r2, #5000	; 0x1388
 800317c:	4293      	cmp	r3, r2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e0c5      	b.n	8003310 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003184:	4b65      	ldr	r3, [pc, #404]	; (800331c <HAL_RCC_OscConfig+0x4e8>)
 8003186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0ee      	beq.n	800316e <HAL_RCC_OscConfig+0x33a>
 8003190:	e014      	b.n	80031bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003192:	f7fd fde7 	bl	8000d64 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003198:	e00a      	b.n	80031b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800319a:	f7fd fde3 	bl	8000d64 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e0af      	b.n	8003310 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b0:	4b5a      	ldr	r3, [pc, #360]	; (800331c <HAL_RCC_OscConfig+0x4e8>)
 80031b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1ee      	bne.n	800319a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031bc:	7dfb      	ldrb	r3, [r7, #23]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d105      	bne.n	80031ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c2:	4b56      	ldr	r3, [pc, #344]	; (800331c <HAL_RCC_OscConfig+0x4e8>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	4a55      	ldr	r2, [pc, #340]	; (800331c <HAL_RCC_OscConfig+0x4e8>)
 80031c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 809b 	beq.w	800330e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031d8:	4b50      	ldr	r3, [pc, #320]	; (800331c <HAL_RCC_OscConfig+0x4e8>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 030c 	and.w	r3, r3, #12
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d05c      	beq.n	800329e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d141      	bne.n	8003270 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ec:	4b4c      	ldr	r3, [pc, #304]	; (8003320 <HAL_RCC_OscConfig+0x4ec>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f2:	f7fd fdb7 	bl	8000d64 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031fa:	f7fd fdb3 	bl	8000d64 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e081      	b.n	8003310 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320c:	4b43      	ldr	r3, [pc, #268]	; (800331c <HAL_RCC_OscConfig+0x4e8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f0      	bne.n	80031fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69da      	ldr	r2, [r3, #28]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	431a      	orrs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	019b      	lsls	r3, r3, #6
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	3b01      	subs	r3, #1
 8003232:	041b      	lsls	r3, r3, #16
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323a:	061b      	lsls	r3, r3, #24
 800323c:	4937      	ldr	r1, [pc, #220]	; (800331c <HAL_RCC_OscConfig+0x4e8>)
 800323e:	4313      	orrs	r3, r2
 8003240:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003242:	4b37      	ldr	r3, [pc, #220]	; (8003320 <HAL_RCC_OscConfig+0x4ec>)
 8003244:	2201      	movs	r2, #1
 8003246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003248:	f7fd fd8c 	bl	8000d64 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003250:	f7fd fd88 	bl	8000d64 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e056      	b.n	8003310 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003262:	4b2e      	ldr	r3, [pc, #184]	; (800331c <HAL_RCC_OscConfig+0x4e8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0x41c>
 800326e:	e04e      	b.n	800330e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003270:	4b2b      	ldr	r3, [pc, #172]	; (8003320 <HAL_RCC_OscConfig+0x4ec>)
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003276:	f7fd fd75 	bl	8000d64 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800327e:	f7fd fd71 	bl	8000d64 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e03f      	b.n	8003310 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003290:	4b22      	ldr	r3, [pc, #136]	; (800331c <HAL_RCC_OscConfig+0x4e8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1f0      	bne.n	800327e <HAL_RCC_OscConfig+0x44a>
 800329c:	e037      	b.n	800330e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e032      	b.n	8003310 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032aa:	4b1c      	ldr	r3, [pc, #112]	; (800331c <HAL_RCC_OscConfig+0x4e8>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d028      	beq.n	800330a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d121      	bne.n	800330a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d11a      	bne.n	800330a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032da:	4013      	ands	r3, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032e0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d111      	bne.n	800330a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f0:	085b      	lsrs	r3, r3, #1
 80032f2:	3b01      	subs	r3, #1
 80032f4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d107      	bne.n	800330a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003306:	429a      	cmp	r2, r3
 8003308:	d001      	beq.n	800330e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40007000 	.word	0x40007000
 800331c:	40023800 	.word	0x40023800
 8003320:	42470060 	.word	0x42470060

08003324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0cc      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003338:	4b68      	ldr	r3, [pc, #416]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d90c      	bls.n	8003360 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003346:	4b65      	ldr	r3, [pc, #404]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800334e:	4b63      	ldr	r3, [pc, #396]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0b8      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d020      	beq.n	80033ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003378:	4b59      	ldr	r3, [pc, #356]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	4a58      	ldr	r2, [pc, #352]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003382:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003390:	4b53      	ldr	r3, [pc, #332]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	4a52      	ldr	r2, [pc, #328]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800339a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800339c:	4b50      	ldr	r3, [pc, #320]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	494d      	ldr	r1, [pc, #308]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d044      	beq.n	8003444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d107      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c2:	4b47      	ldr	r3, [pc, #284]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d119      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e07f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d107      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e2:	4b3f      	ldr	r3, [pc, #252]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d109      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e06f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f2:	4b3b      	ldr	r3, [pc, #236]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e067      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003402:	4b37      	ldr	r3, [pc, #220]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f023 0203 	bic.w	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	4934      	ldr	r1, [pc, #208]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	4313      	orrs	r3, r2
 8003412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003414:	f7fd fca6 	bl	8000d64 <HAL_GetTick>
 8003418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341a:	e00a      	b.n	8003432 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800341c:	f7fd fca2 	bl	8000d64 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	f241 3288 	movw	r2, #5000	; 0x1388
 800342a:	4293      	cmp	r3, r2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e04f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003432:	4b2b      	ldr	r3, [pc, #172]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 020c 	and.w	r2, r3, #12
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	429a      	cmp	r2, r3
 8003442:	d1eb      	bne.n	800341c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003444:	4b25      	ldr	r3, [pc, #148]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d20c      	bcs.n	800346c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003452:	4b22      	ldr	r3, [pc, #136]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800345a:	4b20      	ldr	r3, [pc, #128]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d001      	beq.n	800346c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e032      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003478:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4916      	ldr	r1, [pc, #88]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	4313      	orrs	r3, r2
 8003488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003496:	4b12      	ldr	r3, [pc, #72]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	490e      	ldr	r1, [pc, #56]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034aa:	f000 f821 	bl	80034f0 <HAL_RCC_GetSysClockFreq>
 80034ae:	4602      	mov	r2, r0
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	490a      	ldr	r1, [pc, #40]	; (80034e4 <HAL_RCC_ClockConfig+0x1c0>)
 80034bc:	5ccb      	ldrb	r3, [r1, r3]
 80034be:	fa22 f303 	lsr.w	r3, r2, r3
 80034c2:	4a09      	ldr	r2, [pc, #36]	; (80034e8 <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034c6:	4b09      	ldr	r3, [pc, #36]	; (80034ec <HAL_RCC_ClockConfig+0x1c8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fd fc06 	bl	8000cdc <HAL_InitTick>

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40023c00 	.word	0x40023c00
 80034e0:	40023800 	.word	0x40023800
 80034e4:	080079e0 	.word	0x080079e0
 80034e8:	20000000 	.word	0x20000000
 80034ec:	20000004 	.word	0x20000004

080034f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	607b      	str	r3, [r7, #4]
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	2300      	movs	r3, #0
 8003502:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003508:	4b67      	ldr	r3, [pc, #412]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 030c 	and.w	r3, r3, #12
 8003510:	2b08      	cmp	r3, #8
 8003512:	d00d      	beq.n	8003530 <HAL_RCC_GetSysClockFreq+0x40>
 8003514:	2b08      	cmp	r3, #8
 8003516:	f200 80bd 	bhi.w	8003694 <HAL_RCC_GetSysClockFreq+0x1a4>
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_RCC_GetSysClockFreq+0x34>
 800351e:	2b04      	cmp	r3, #4
 8003520:	d003      	beq.n	800352a <HAL_RCC_GetSysClockFreq+0x3a>
 8003522:	e0b7      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003524:	4b61      	ldr	r3, [pc, #388]	; (80036ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003526:	60bb      	str	r3, [r7, #8]
       break;
 8003528:	e0b7      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800352a:	4b61      	ldr	r3, [pc, #388]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800352c:	60bb      	str	r3, [r7, #8]
      break;
 800352e:	e0b4      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003530:	4b5d      	ldr	r3, [pc, #372]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003538:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800353a:	4b5b      	ldr	r3, [pc, #364]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d04d      	beq.n	80035e2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003546:	4b58      	ldr	r3, [pc, #352]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	099b      	lsrs	r3, r3, #6
 800354c:	461a      	mov	r2, r3
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003556:	f04f 0100 	mov.w	r1, #0
 800355a:	ea02 0800 	and.w	r8, r2, r0
 800355e:	ea03 0901 	and.w	r9, r3, r1
 8003562:	4640      	mov	r0, r8
 8003564:	4649      	mov	r1, r9
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	014b      	lsls	r3, r1, #5
 8003570:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003574:	0142      	lsls	r2, r0, #5
 8003576:	4610      	mov	r0, r2
 8003578:	4619      	mov	r1, r3
 800357a:	ebb0 0008 	subs.w	r0, r0, r8
 800357e:	eb61 0109 	sbc.w	r1, r1, r9
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	018b      	lsls	r3, r1, #6
 800358c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003590:	0182      	lsls	r2, r0, #6
 8003592:	1a12      	subs	r2, r2, r0
 8003594:	eb63 0301 	sbc.w	r3, r3, r1
 8003598:	f04f 0000 	mov.w	r0, #0
 800359c:	f04f 0100 	mov.w	r1, #0
 80035a0:	00d9      	lsls	r1, r3, #3
 80035a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035a6:	00d0      	lsls	r0, r2, #3
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	eb12 0208 	adds.w	r2, r2, r8
 80035b0:	eb43 0309 	adc.w	r3, r3, r9
 80035b4:	f04f 0000 	mov.w	r0, #0
 80035b8:	f04f 0100 	mov.w	r1, #0
 80035bc:	0259      	lsls	r1, r3, #9
 80035be:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80035c2:	0250      	lsls	r0, r2, #9
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4610      	mov	r0, r2
 80035ca:	4619      	mov	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	461a      	mov	r2, r3
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	f7fc fdf8 	bl	80001c8 <__aeabi_uldivmod>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4613      	mov	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	e04a      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e2:	4b31      	ldr	r3, [pc, #196]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	099b      	lsrs	r3, r3, #6
 80035e8:	461a      	mov	r2, r3
 80035ea:	f04f 0300 	mov.w	r3, #0
 80035ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035f2:	f04f 0100 	mov.w	r1, #0
 80035f6:	ea02 0400 	and.w	r4, r2, r0
 80035fa:	ea03 0501 	and.w	r5, r3, r1
 80035fe:	4620      	mov	r0, r4
 8003600:	4629      	mov	r1, r5
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	014b      	lsls	r3, r1, #5
 800360c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003610:	0142      	lsls	r2, r0, #5
 8003612:	4610      	mov	r0, r2
 8003614:	4619      	mov	r1, r3
 8003616:	1b00      	subs	r0, r0, r4
 8003618:	eb61 0105 	sbc.w	r1, r1, r5
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	018b      	lsls	r3, r1, #6
 8003626:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800362a:	0182      	lsls	r2, r0, #6
 800362c:	1a12      	subs	r2, r2, r0
 800362e:	eb63 0301 	sbc.w	r3, r3, r1
 8003632:	f04f 0000 	mov.w	r0, #0
 8003636:	f04f 0100 	mov.w	r1, #0
 800363a:	00d9      	lsls	r1, r3, #3
 800363c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003640:	00d0      	lsls	r0, r2, #3
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	1912      	adds	r2, r2, r4
 8003648:	eb45 0303 	adc.w	r3, r5, r3
 800364c:	f04f 0000 	mov.w	r0, #0
 8003650:	f04f 0100 	mov.w	r1, #0
 8003654:	0299      	lsls	r1, r3, #10
 8003656:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800365a:	0290      	lsls	r0, r2, #10
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4610      	mov	r0, r2
 8003662:	4619      	mov	r1, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	461a      	mov	r2, r3
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	f7fc fdac 	bl	80001c8 <__aeabi_uldivmod>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4613      	mov	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	0c1b      	lsrs	r3, r3, #16
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	3301      	adds	r3, #1
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003690:	60bb      	str	r3, [r7, #8]
      break;
 8003692:	e002      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003694:	4b05      	ldr	r3, [pc, #20]	; (80036ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003696:	60bb      	str	r3, [r7, #8]
      break;
 8003698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800369a:	68bb      	ldr	r3, [r7, #8]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036a6:	bf00      	nop
 80036a8:	40023800 	.word	0x40023800
 80036ac:	00f42400 	.word	0x00f42400
 80036b0:	007a1200 	.word	0x007a1200

080036b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e041      	b.n	800374a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d106      	bne.n	80036e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fd f9a0 	bl	8000a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3304      	adds	r3, #4
 80036f0:	4619      	mov	r1, r3
 80036f2:	4610      	mov	r0, r2
 80036f4:	f000 fad8 	bl	8003ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e041      	b.n	80037e8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d106      	bne.n	800377e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f839 	bl	80037f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2202      	movs	r2, #2
 8003782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3304      	adds	r3, #4
 800378e:	4619      	mov	r1, r3
 8003790:	4610      	mov	r0, r2
 8003792:	f000 fa89 	bl	8003ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d109      	bne.n	8003828 <HAL_TIM_PWM_Start+0x24>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b01      	cmp	r3, #1
 800381e:	bf14      	ite	ne
 8003820:	2301      	movne	r3, #1
 8003822:	2300      	moveq	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	e022      	b.n	800386e <HAL_TIM_PWM_Start+0x6a>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	2b04      	cmp	r3, #4
 800382c:	d109      	bne.n	8003842 <HAL_TIM_PWM_Start+0x3e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b01      	cmp	r3, #1
 8003838:	bf14      	ite	ne
 800383a:	2301      	movne	r3, #1
 800383c:	2300      	moveq	r3, #0
 800383e:	b2db      	uxtb	r3, r3
 8003840:	e015      	b.n	800386e <HAL_TIM_PWM_Start+0x6a>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b08      	cmp	r3, #8
 8003846:	d109      	bne.n	800385c <HAL_TIM_PWM_Start+0x58>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b01      	cmp	r3, #1
 8003852:	bf14      	ite	ne
 8003854:	2301      	movne	r3, #1
 8003856:	2300      	moveq	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	e008      	b.n	800386e <HAL_TIM_PWM_Start+0x6a>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b01      	cmp	r3, #1
 8003866:	bf14      	ite	ne
 8003868:	2301      	movne	r3, #1
 800386a:	2300      	moveq	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e07c      	b.n	8003970 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d104      	bne.n	8003886 <HAL_TIM_PWM_Start+0x82>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003884:	e013      	b.n	80038ae <HAL_TIM_PWM_Start+0xaa>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b04      	cmp	r3, #4
 800388a:	d104      	bne.n	8003896 <HAL_TIM_PWM_Start+0x92>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003894:	e00b      	b.n	80038ae <HAL_TIM_PWM_Start+0xaa>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b08      	cmp	r3, #8
 800389a:	d104      	bne.n	80038a6 <HAL_TIM_PWM_Start+0xa2>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038a4:	e003      	b.n	80038ae <HAL_TIM_PWM_Start+0xaa>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2202      	movs	r2, #2
 80038aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2201      	movs	r2, #1
 80038b4:	6839      	ldr	r1, [r7, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 fce0 	bl	800427c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a2d      	ldr	r2, [pc, #180]	; (8003978 <HAL_TIM_PWM_Start+0x174>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d004      	beq.n	80038d0 <HAL_TIM_PWM_Start+0xcc>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a2c      	ldr	r2, [pc, #176]	; (800397c <HAL_TIM_PWM_Start+0x178>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d101      	bne.n	80038d4 <HAL_TIM_PWM_Start+0xd0>
 80038d0:	2301      	movs	r3, #1
 80038d2:	e000      	b.n	80038d6 <HAL_TIM_PWM_Start+0xd2>
 80038d4:	2300      	movs	r3, #0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d007      	beq.n	80038ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a22      	ldr	r2, [pc, #136]	; (8003978 <HAL_TIM_PWM_Start+0x174>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d022      	beq.n	800393a <HAL_TIM_PWM_Start+0x136>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fc:	d01d      	beq.n	800393a <HAL_TIM_PWM_Start+0x136>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a1f      	ldr	r2, [pc, #124]	; (8003980 <HAL_TIM_PWM_Start+0x17c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d018      	beq.n	800393a <HAL_TIM_PWM_Start+0x136>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a1d      	ldr	r2, [pc, #116]	; (8003984 <HAL_TIM_PWM_Start+0x180>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d013      	beq.n	800393a <HAL_TIM_PWM_Start+0x136>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a1c      	ldr	r2, [pc, #112]	; (8003988 <HAL_TIM_PWM_Start+0x184>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d00e      	beq.n	800393a <HAL_TIM_PWM_Start+0x136>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a16      	ldr	r2, [pc, #88]	; (800397c <HAL_TIM_PWM_Start+0x178>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d009      	beq.n	800393a <HAL_TIM_PWM_Start+0x136>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a18      	ldr	r2, [pc, #96]	; (800398c <HAL_TIM_PWM_Start+0x188>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d004      	beq.n	800393a <HAL_TIM_PWM_Start+0x136>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a16      	ldr	r2, [pc, #88]	; (8003990 <HAL_TIM_PWM_Start+0x18c>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d111      	bne.n	800395e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2b06      	cmp	r3, #6
 800394a:	d010      	beq.n	800396e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800395c:	e007      	b.n	800396e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f042 0201 	orr.w	r2, r2, #1
 800396c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40010000 	.word	0x40010000
 800397c:	40010400 	.word	0x40010400
 8003980:	40000400 	.word	0x40000400
 8003984:	40000800 	.word	0x40000800
 8003988:	40000c00 	.word	0x40000c00
 800398c:	40014000 	.word	0x40014000
 8003990:	40001800 	.word	0x40001800

08003994 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e0ae      	b.n	8003b10 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b0c      	cmp	r3, #12
 80039be:	f200 809f 	bhi.w	8003b00 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039c2:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c8:	080039fd 	.word	0x080039fd
 80039cc:	08003b01 	.word	0x08003b01
 80039d0:	08003b01 	.word	0x08003b01
 80039d4:	08003b01 	.word	0x08003b01
 80039d8:	08003a3d 	.word	0x08003a3d
 80039dc:	08003b01 	.word	0x08003b01
 80039e0:	08003b01 	.word	0x08003b01
 80039e4:	08003b01 	.word	0x08003b01
 80039e8:	08003a7f 	.word	0x08003a7f
 80039ec:	08003b01 	.word	0x08003b01
 80039f0:	08003b01 	.word	0x08003b01
 80039f4:	08003b01 	.word	0x08003b01
 80039f8:	08003abf 	.word	0x08003abf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68b9      	ldr	r1, [r7, #8]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 f9f0 	bl	8003de8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0208 	orr.w	r2, r2, #8
 8003a16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699a      	ldr	r2, [r3, #24]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0204 	bic.w	r2, r2, #4
 8003a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6999      	ldr	r1, [r3, #24]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	619a      	str	r2, [r3, #24]
      break;
 8003a3a:	e064      	b.n	8003b06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68b9      	ldr	r1, [r7, #8]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fa40 	bl	8003ec8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699a      	ldr	r2, [r3, #24]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6999      	ldr	r1, [r3, #24]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	021a      	lsls	r2, r3, #8
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	619a      	str	r2, [r3, #24]
      break;
 8003a7c:	e043      	b.n	8003b06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 fa95 	bl	8003fb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	69da      	ldr	r2, [r3, #28]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f042 0208 	orr.w	r2, r2, #8
 8003a98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69da      	ldr	r2, [r3, #28]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0204 	bic.w	r2, r2, #4
 8003aa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	69d9      	ldr	r1, [r3, #28]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	691a      	ldr	r2, [r3, #16]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	61da      	str	r2, [r3, #28]
      break;
 8003abc:	e023      	b.n	8003b06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68b9      	ldr	r1, [r7, #8]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fae9 	bl	800409c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	69da      	ldr	r2, [r3, #28]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ad8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69da      	ldr	r2, [r3, #28]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69d9      	ldr	r1, [r3, #28]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	021a      	lsls	r2, r3, #8
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	61da      	str	r2, [r3, #28]
      break;
 8003afe:	e002      	b.n	8003b06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	75fb      	strb	r3, [r7, #23]
      break;
 8003b04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <HAL_TIM_ConfigClockSource+0x1c>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e0b4      	b.n	8003c9e <HAL_TIM_ConfigClockSource+0x186>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b6c:	d03e      	beq.n	8003bec <HAL_TIM_ConfigClockSource+0xd4>
 8003b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b72:	f200 8087 	bhi.w	8003c84 <HAL_TIM_ConfigClockSource+0x16c>
 8003b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b7a:	f000 8086 	beq.w	8003c8a <HAL_TIM_ConfigClockSource+0x172>
 8003b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b82:	d87f      	bhi.n	8003c84 <HAL_TIM_ConfigClockSource+0x16c>
 8003b84:	2b70      	cmp	r3, #112	; 0x70
 8003b86:	d01a      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0xa6>
 8003b88:	2b70      	cmp	r3, #112	; 0x70
 8003b8a:	d87b      	bhi.n	8003c84 <HAL_TIM_ConfigClockSource+0x16c>
 8003b8c:	2b60      	cmp	r3, #96	; 0x60
 8003b8e:	d050      	beq.n	8003c32 <HAL_TIM_ConfigClockSource+0x11a>
 8003b90:	2b60      	cmp	r3, #96	; 0x60
 8003b92:	d877      	bhi.n	8003c84 <HAL_TIM_ConfigClockSource+0x16c>
 8003b94:	2b50      	cmp	r3, #80	; 0x50
 8003b96:	d03c      	beq.n	8003c12 <HAL_TIM_ConfigClockSource+0xfa>
 8003b98:	2b50      	cmp	r3, #80	; 0x50
 8003b9a:	d873      	bhi.n	8003c84 <HAL_TIM_ConfigClockSource+0x16c>
 8003b9c:	2b40      	cmp	r3, #64	; 0x40
 8003b9e:	d058      	beq.n	8003c52 <HAL_TIM_ConfigClockSource+0x13a>
 8003ba0:	2b40      	cmp	r3, #64	; 0x40
 8003ba2:	d86f      	bhi.n	8003c84 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba4:	2b30      	cmp	r3, #48	; 0x30
 8003ba6:	d064      	beq.n	8003c72 <HAL_TIM_ConfigClockSource+0x15a>
 8003ba8:	2b30      	cmp	r3, #48	; 0x30
 8003baa:	d86b      	bhi.n	8003c84 <HAL_TIM_ConfigClockSource+0x16c>
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d060      	beq.n	8003c72 <HAL_TIM_ConfigClockSource+0x15a>
 8003bb0:	2b20      	cmp	r3, #32
 8003bb2:	d867      	bhi.n	8003c84 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d05c      	beq.n	8003c72 <HAL_TIM_ConfigClockSource+0x15a>
 8003bb8:	2b10      	cmp	r3, #16
 8003bba:	d05a      	beq.n	8003c72 <HAL_TIM_ConfigClockSource+0x15a>
 8003bbc:	e062      	b.n	8003c84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6818      	ldr	r0, [r3, #0]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	6899      	ldr	r1, [r3, #8]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f000 fb35 	bl	800423c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003be0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	609a      	str	r2, [r3, #8]
      break;
 8003bea:	e04f      	b.n	8003c8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6818      	ldr	r0, [r3, #0]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	6899      	ldr	r1, [r3, #8]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f000 fb1e 	bl	800423c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c0e:	609a      	str	r2, [r3, #8]
      break;
 8003c10:	e03c      	b.n	8003c8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	6859      	ldr	r1, [r3, #4]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f000 fa92 	bl	8004148 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2150      	movs	r1, #80	; 0x50
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 faeb 	bl	8004206 <TIM_ITRx_SetConfig>
      break;
 8003c30:	e02c      	b.n	8003c8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6818      	ldr	r0, [r3, #0]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	6859      	ldr	r1, [r3, #4]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	f000 fab1 	bl	80041a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2160      	movs	r1, #96	; 0x60
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fadb 	bl	8004206 <TIM_ITRx_SetConfig>
      break;
 8003c50:	e01c      	b.n	8003c8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6818      	ldr	r0, [r3, #0]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	6859      	ldr	r1, [r3, #4]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f000 fa72 	bl	8004148 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2140      	movs	r1, #64	; 0x40
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 facb 	bl	8004206 <TIM_ITRx_SetConfig>
      break;
 8003c70:	e00c      	b.n	8003c8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	f000 fac2 	bl	8004206 <TIM_ITRx_SetConfig>
      break;
 8003c82:	e003      	b.n	8003c8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	73fb      	strb	r3, [r7, #15]
      break;
 8003c88:	e000      	b.n	8003c8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a40      	ldr	r2, [pc, #256]	; (8003dbc <TIM_Base_SetConfig+0x114>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d013      	beq.n	8003ce8 <TIM_Base_SetConfig+0x40>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc6:	d00f      	beq.n	8003ce8 <TIM_Base_SetConfig+0x40>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a3d      	ldr	r2, [pc, #244]	; (8003dc0 <TIM_Base_SetConfig+0x118>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00b      	beq.n	8003ce8 <TIM_Base_SetConfig+0x40>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a3c      	ldr	r2, [pc, #240]	; (8003dc4 <TIM_Base_SetConfig+0x11c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d007      	beq.n	8003ce8 <TIM_Base_SetConfig+0x40>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a3b      	ldr	r2, [pc, #236]	; (8003dc8 <TIM_Base_SetConfig+0x120>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d003      	beq.n	8003ce8 <TIM_Base_SetConfig+0x40>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a3a      	ldr	r2, [pc, #232]	; (8003dcc <TIM_Base_SetConfig+0x124>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d108      	bne.n	8003cfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a2f      	ldr	r2, [pc, #188]	; (8003dbc <TIM_Base_SetConfig+0x114>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d02b      	beq.n	8003d5a <TIM_Base_SetConfig+0xb2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d08:	d027      	beq.n	8003d5a <TIM_Base_SetConfig+0xb2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a2c      	ldr	r2, [pc, #176]	; (8003dc0 <TIM_Base_SetConfig+0x118>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d023      	beq.n	8003d5a <TIM_Base_SetConfig+0xb2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a2b      	ldr	r2, [pc, #172]	; (8003dc4 <TIM_Base_SetConfig+0x11c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d01f      	beq.n	8003d5a <TIM_Base_SetConfig+0xb2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a2a      	ldr	r2, [pc, #168]	; (8003dc8 <TIM_Base_SetConfig+0x120>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d01b      	beq.n	8003d5a <TIM_Base_SetConfig+0xb2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a29      	ldr	r2, [pc, #164]	; (8003dcc <TIM_Base_SetConfig+0x124>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d017      	beq.n	8003d5a <TIM_Base_SetConfig+0xb2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a28      	ldr	r2, [pc, #160]	; (8003dd0 <TIM_Base_SetConfig+0x128>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d013      	beq.n	8003d5a <TIM_Base_SetConfig+0xb2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a27      	ldr	r2, [pc, #156]	; (8003dd4 <TIM_Base_SetConfig+0x12c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00f      	beq.n	8003d5a <TIM_Base_SetConfig+0xb2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a26      	ldr	r2, [pc, #152]	; (8003dd8 <TIM_Base_SetConfig+0x130>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00b      	beq.n	8003d5a <TIM_Base_SetConfig+0xb2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a25      	ldr	r2, [pc, #148]	; (8003ddc <TIM_Base_SetConfig+0x134>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d007      	beq.n	8003d5a <TIM_Base_SetConfig+0xb2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a24      	ldr	r2, [pc, #144]	; (8003de0 <TIM_Base_SetConfig+0x138>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d003      	beq.n	8003d5a <TIM_Base_SetConfig+0xb2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a23      	ldr	r2, [pc, #140]	; (8003de4 <TIM_Base_SetConfig+0x13c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d108      	bne.n	8003d6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a0a      	ldr	r2, [pc, #40]	; (8003dbc <TIM_Base_SetConfig+0x114>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d003      	beq.n	8003da0 <TIM_Base_SetConfig+0xf8>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a0c      	ldr	r2, [pc, #48]	; (8003dcc <TIM_Base_SetConfig+0x124>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d103      	bne.n	8003da8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	691a      	ldr	r2, [r3, #16]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	615a      	str	r2, [r3, #20]
}
 8003dae:	bf00      	nop
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40010000 	.word	0x40010000
 8003dc0:	40000400 	.word	0x40000400
 8003dc4:	40000800 	.word	0x40000800
 8003dc8:	40000c00 	.word	0x40000c00
 8003dcc:	40010400 	.word	0x40010400
 8003dd0:	40014000 	.word	0x40014000
 8003dd4:	40014400 	.word	0x40014400
 8003dd8:	40014800 	.word	0x40014800
 8003ddc:	40001800 	.word	0x40001800
 8003de0:	40001c00 	.word	0x40001c00
 8003de4:	40002000 	.word	0x40002000

08003de8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	f023 0201 	bic.w	r2, r3, #1
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0303 	bic.w	r3, r3, #3
 8003e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f023 0302 	bic.w	r3, r3, #2
 8003e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a20      	ldr	r2, [pc, #128]	; (8003ec0 <TIM_OC1_SetConfig+0xd8>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d003      	beq.n	8003e4c <TIM_OC1_SetConfig+0x64>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a1f      	ldr	r2, [pc, #124]	; (8003ec4 <TIM_OC1_SetConfig+0xdc>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d10c      	bne.n	8003e66 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f023 0308 	bic.w	r3, r3, #8
 8003e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f023 0304 	bic.w	r3, r3, #4
 8003e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a15      	ldr	r2, [pc, #84]	; (8003ec0 <TIM_OC1_SetConfig+0xd8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d003      	beq.n	8003e76 <TIM_OC1_SetConfig+0x8e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a14      	ldr	r2, [pc, #80]	; (8003ec4 <TIM_OC1_SetConfig+0xdc>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d111      	bne.n	8003e9a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	621a      	str	r2, [r3, #32]
}
 8003eb4:	bf00      	nop
 8003eb6:	371c      	adds	r7, #28
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	40010000 	.word	0x40010000
 8003ec4:	40010400 	.word	0x40010400

08003ec8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	f023 0210 	bic.w	r2, r3, #16
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	021b      	lsls	r3, r3, #8
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f023 0320 	bic.w	r3, r3, #32
 8003f12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a22      	ldr	r2, [pc, #136]	; (8003fac <TIM_OC2_SetConfig+0xe4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d003      	beq.n	8003f30 <TIM_OC2_SetConfig+0x68>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a21      	ldr	r2, [pc, #132]	; (8003fb0 <TIM_OC2_SetConfig+0xe8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d10d      	bne.n	8003f4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a17      	ldr	r2, [pc, #92]	; (8003fac <TIM_OC2_SetConfig+0xe4>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d003      	beq.n	8003f5c <TIM_OC2_SetConfig+0x94>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a16      	ldr	r2, [pc, #88]	; (8003fb0 <TIM_OC2_SetConfig+0xe8>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d113      	bne.n	8003f84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	621a      	str	r2, [r3, #32]
}
 8003f9e:	bf00      	nop
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40010000 	.word	0x40010000
 8003fb0:	40010400 	.word	0x40010400

08003fb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0303 	bic.w	r3, r3, #3
 8003fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	021b      	lsls	r3, r3, #8
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	4313      	orrs	r3, r2
 8004008:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a21      	ldr	r2, [pc, #132]	; (8004094 <TIM_OC3_SetConfig+0xe0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d003      	beq.n	800401a <TIM_OC3_SetConfig+0x66>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a20      	ldr	r2, [pc, #128]	; (8004098 <TIM_OC3_SetConfig+0xe4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d10d      	bne.n	8004036 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004020:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	021b      	lsls	r3, r3, #8
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a16      	ldr	r2, [pc, #88]	; (8004094 <TIM_OC3_SetConfig+0xe0>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d003      	beq.n	8004046 <TIM_OC3_SetConfig+0x92>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a15      	ldr	r2, [pc, #84]	; (8004098 <TIM_OC3_SetConfig+0xe4>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d113      	bne.n	800406e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800404c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	621a      	str	r2, [r3, #32]
}
 8004088:	bf00      	nop
 800408a:	371c      	adds	r7, #28
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	40010000 	.word	0x40010000
 8004098:	40010400 	.word	0x40010400

0800409c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	031b      	lsls	r3, r3, #12
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a12      	ldr	r2, [pc, #72]	; (8004140 <TIM_OC4_SetConfig+0xa4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d003      	beq.n	8004104 <TIM_OC4_SetConfig+0x68>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a11      	ldr	r2, [pc, #68]	; (8004144 <TIM_OC4_SetConfig+0xa8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d109      	bne.n	8004118 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800410a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	019b      	lsls	r3, r3, #6
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	4313      	orrs	r3, r2
 8004116:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	621a      	str	r2, [r3, #32]
}
 8004132:	bf00      	nop
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40010000 	.word	0x40010000
 8004144:	40010400 	.word	0x40010400

08004148 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	f023 0201 	bic.w	r2, r3, #1
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4313      	orrs	r3, r2
 800417c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f023 030a 	bic.w	r3, r3, #10
 8004184:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4313      	orrs	r3, r2
 800418c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	621a      	str	r2, [r3, #32]
}
 800419a:	bf00      	nop
 800419c:	371c      	adds	r7, #28
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b087      	sub	sp, #28
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	f023 0210 	bic.w	r2, r3, #16
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	031b      	lsls	r3, r3, #12
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	621a      	str	r2, [r3, #32]
}
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004206:	b480      	push	{r7}
 8004208:	b085      	sub	sp, #20
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	f043 0307 	orr.w	r3, r3, #7
 8004228:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	609a      	str	r2, [r3, #8]
}
 8004230:	bf00      	nop
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004256:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	021a      	lsls	r2, r3, #8
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	431a      	orrs	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4313      	orrs	r3, r2
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	609a      	str	r2, [r3, #8]
}
 8004270:	bf00      	nop
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f003 031f 	and.w	r3, r3, #31
 800428e:	2201      	movs	r2, #1
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a1a      	ldr	r2, [r3, #32]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	43db      	mvns	r3, r3
 800429e:	401a      	ands	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a1a      	ldr	r2, [r3, #32]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f003 031f 	and.w	r3, r3, #31
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	fa01 f303 	lsl.w	r3, r1, r3
 80042b4:	431a      	orrs	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	621a      	str	r2, [r3, #32]
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
	...

080042c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042dc:	2302      	movs	r3, #2
 80042de:	e05a      	b.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004306:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a21      	ldr	r2, [pc, #132]	; (80043a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d022      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432c:	d01d      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a1d      	ldr	r2, [pc, #116]	; (80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d018      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1b      	ldr	r2, [pc, #108]	; (80043ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d013      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a1a      	ldr	r2, [pc, #104]	; (80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00e      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a18      	ldr	r2, [pc, #96]	; (80043b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d009      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a17      	ldr	r2, [pc, #92]	; (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d004      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a15      	ldr	r2, [pc, #84]	; (80043bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d10c      	bne.n	8004384 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004370:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	4313      	orrs	r3, r2
 800437a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40010000 	.word	0x40010000
 80043a8:	40000400 	.word	0x40000400
 80043ac:	40000800 	.word	0x40000800
 80043b0:	40000c00 	.word	0x40000c00
 80043b4:	40010400 	.word	0x40010400
 80043b8:	40014000 	.word	0x40014000
 80043bc:	40001800 	.word	0x40001800

080043c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043d8:	2302      	movs	r3, #2
 80043da:	e03d      	b.n	8004458 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004464:	b084      	sub	sp, #16
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	f107 001c 	add.w	r0, r7, #28
 8004472:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004478:	2b01      	cmp	r3, #1
 800447a:	d122      	bne.n	80044c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004480:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d105      	bne.n	80044b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f9a0 	bl	80047fc <USB_CoreReset>
 80044bc:	4603      	mov	r3, r0
 80044be:	73fb      	strb	r3, [r7, #15]
 80044c0:	e01a      	b.n	80044f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f994 	bl	80047fc <USB_CoreReset>
 80044d4:	4603      	mov	r3, r0
 80044d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80044d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d106      	bne.n	80044ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	639a      	str	r2, [r3, #56]	; 0x38
 80044ea:	e005      	b.n	80044f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80044f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d10b      	bne.n	8004516 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f043 0206 	orr.w	r2, r3, #6
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f043 0220 	orr.w	r2, r3, #32
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004516:	7bfb      	ldrb	r3, [r7, #15]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004522:	b004      	add	sp, #16
 8004524:	4770      	bx	lr

08004526 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f043 0201 	orr.w	r2, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f023 0201 	bic.w	r2, r3, #1
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b084      	sub	sp, #16
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	460b      	mov	r3, r1
 8004574:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004586:	78fb      	ldrb	r3, [r7, #3]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d115      	bne.n	80045b8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004598:	2001      	movs	r0, #1
 800459a:	f7fc fbef 	bl	8000d7c <HAL_Delay>
      ms++;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	3301      	adds	r3, #1
 80045a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f91a 	bl	80047de <USB_GetMode>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d01e      	beq.n	80045ee <USB_SetCurrentMode+0x84>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b31      	cmp	r3, #49	; 0x31
 80045b4:	d9f0      	bls.n	8004598 <USB_SetCurrentMode+0x2e>
 80045b6:	e01a      	b.n	80045ee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045b8:	78fb      	ldrb	r3, [r7, #3]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d115      	bne.n	80045ea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045ca:	2001      	movs	r0, #1
 80045cc:	f7fc fbd6 	bl	8000d7c <HAL_Delay>
      ms++;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	3301      	adds	r3, #1
 80045d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f901 	bl	80047de <USB_GetMode>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <USB_SetCurrentMode+0x84>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b31      	cmp	r3, #49	; 0x31
 80045e6:	d9f0      	bls.n	80045ca <USB_SetCurrentMode+0x60>
 80045e8:	e001      	b.n	80045ee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e005      	b.n	80045fa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b32      	cmp	r3, #50	; 0x32
 80045f2:	d101      	bne.n	80045f8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e000      	b.n	80045fa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	019b      	lsls	r3, r3, #6
 8004616:	f043 0220 	orr.w	r2, r3, #32
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3301      	adds	r3, #1
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	4a08      	ldr	r2, [pc, #32]	; (8004648 <USB_FlushTxFifo+0x44>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d901      	bls.n	800462e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e006      	b.n	800463c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b20      	cmp	r3, #32
 8004638:	d0f1      	beq.n	800461e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	00030d40 	.word	0x00030d40

0800464c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2210      	movs	r2, #16
 800465c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	3301      	adds	r3, #1
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	4a08      	ldr	r2, [pc, #32]	; (8004688 <USB_FlushRxFifo+0x3c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d901      	bls.n	800466e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e006      	b.n	800467c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f003 0310 	and.w	r3, r3, #16
 8004676:	2b10      	cmp	r3, #16
 8004678:	d0f1      	beq.n	800465e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	00030d40 	.word	0x00030d40

0800468c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800468c:	b480      	push	{r7}
 800468e:	b089      	sub	sp, #36	; 0x24
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	4611      	mov	r1, r2
 8004698:	461a      	mov	r2, r3
 800469a:	460b      	mov	r3, r1
 800469c:	71fb      	strb	r3, [r7, #7]
 800469e:	4613      	mov	r3, r2
 80046a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80046aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d123      	bne.n	80046fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80046b2:	88bb      	ldrh	r3, [r7, #4]
 80046b4:	3303      	adds	r3, #3
 80046b6:	089b      	lsrs	r3, r3, #2
 80046b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80046ba:	2300      	movs	r3, #0
 80046bc:	61bb      	str	r3, [r7, #24]
 80046be:	e018      	b.n	80046f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80046c0:	79fb      	ldrb	r3, [r7, #7]
 80046c2:	031a      	lsls	r2, r3, #12
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046cc:	461a      	mov	r2, r3
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	3301      	adds	r3, #1
 80046d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	3301      	adds	r3, #1
 80046de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	3301      	adds	r3, #1
 80046e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	3301      	adds	r3, #1
 80046ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	3301      	adds	r3, #1
 80046f0:	61bb      	str	r3, [r7, #24]
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d3e2      	bcc.n	80046c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3724      	adds	r7, #36	; 0x24
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004708:	b480      	push	{r7}
 800470a:	b08b      	sub	sp, #44	; 0x2c
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	4613      	mov	r3, r2
 8004714:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800471e:	88fb      	ldrh	r3, [r7, #6]
 8004720:	089b      	lsrs	r3, r3, #2
 8004722:	b29b      	uxth	r3, r3
 8004724:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004726:	88fb      	ldrh	r3, [r7, #6]
 8004728:	f003 0303 	and.w	r3, r3, #3
 800472c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800472e:	2300      	movs	r3, #0
 8004730:	623b      	str	r3, [r7, #32]
 8004732:	e014      	b.n	800475e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	3301      	adds	r3, #1
 8004744:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	3301      	adds	r3, #1
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	3301      	adds	r3, #1
 8004750:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	3301      	adds	r3, #1
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	3301      	adds	r3, #1
 800475c:	623b      	str	r3, [r7, #32]
 800475e:	6a3a      	ldr	r2, [r7, #32]
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	429a      	cmp	r2, r3
 8004764:	d3e6      	bcc.n	8004734 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004766:	8bfb      	ldrh	r3, [r7, #30]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d01e      	beq.n	80047aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004776:	461a      	mov	r2, r3
 8004778:	f107 0310 	add.w	r3, r7, #16
 800477c:	6812      	ldr	r2, [r2, #0]
 800477e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	b2db      	uxtb	r3, r3
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	fa22 f303 	lsr.w	r3, r2, r3
 800478c:	b2da      	uxtb	r2, r3
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	701a      	strb	r2, [r3, #0]
      i++;
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	3301      	adds	r3, #1
 8004796:	623b      	str	r3, [r7, #32]
      pDest++;
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	3301      	adds	r3, #1
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800479e:	8bfb      	ldrh	r3, [r7, #30]
 80047a0:	3b01      	subs	r3, #1
 80047a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80047a4:	8bfb      	ldrh	r3, [r7, #30]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1ea      	bne.n	8004780 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	372c      	adds	r7, #44	; 0x2c
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	4013      	ands	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80047d0:	68fb      	ldr	r3, [r7, #12]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	f003 0301 	and.w	r3, r3, #1
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
	...

080047fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	3301      	adds	r3, #1
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	4a13      	ldr	r2, [pc, #76]	; (800485c <USB_CoreReset+0x60>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d901      	bls.n	8004818 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e01a      	b.n	800484e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	daf3      	bge.n	8004808 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	f043 0201 	orr.w	r2, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	3301      	adds	r3, #1
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	4a09      	ldr	r2, [pc, #36]	; (800485c <USB_CoreReset+0x60>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d901      	bls.n	8004840 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e006      	b.n	800484e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b01      	cmp	r3, #1
 800484a:	d0f1      	beq.n	8004830 <USB_CoreReset+0x34>

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	00030d40 	.word	0x00030d40

08004860 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004860:	b084      	sub	sp, #16
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	f107 001c 	add.w	r0, r7, #28
 800486e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800487c:	461a      	mov	r2, r3
 800487e:	2300      	movs	r3, #0
 8004880:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004886:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004892:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d018      	beq.n	80048e4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d10a      	bne.n	80048ce <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048c6:	f043 0304 	orr.w	r3, r3, #4
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	e014      	b.n	80048f8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048dc:	f023 0304 	bic.w	r3, r3, #4
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	e009      	b.n	80048f8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048f2:	f023 0304 	bic.w	r3, r3, #4
 80048f6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80048f8:	2110      	movs	r1, #16
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff fe82 	bl	8004604 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff fea3 	bl	800464c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004906:	2300      	movs	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	e015      	b.n	8004938 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4413      	add	r3, r2
 8004914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004918:	461a      	mov	r2, r3
 800491a:	f04f 33ff 	mov.w	r3, #4294967295
 800491e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	4413      	add	r3, r2
 8004928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800492c:	461a      	mov	r2, r3
 800492e:	2300      	movs	r3, #0
 8004930:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	3301      	adds	r3, #1
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	429a      	cmp	r2, r3
 800493e:	d3e5      	bcc.n	800490c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f04f 32ff 	mov.w	r2, #4294967295
 800494c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00b      	beq.n	8004972 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004960:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a13      	ldr	r2, [pc, #76]	; (80049b4 <USB_HostInit+0x154>)
 8004966:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a13      	ldr	r2, [pc, #76]	; (80049b8 <USB_HostInit+0x158>)
 800496c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004970:	e009      	b.n	8004986 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2280      	movs	r2, #128	; 0x80
 8004976:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a10      	ldr	r2, [pc, #64]	; (80049bc <USB_HostInit+0x15c>)
 800497c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a0f      	ldr	r2, [pc, #60]	; (80049c0 <USB_HostInit+0x160>)
 8004982:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004988:	2b00      	cmp	r3, #0
 800498a:	d105      	bne.n	8004998 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	f043 0210 	orr.w	r2, r3, #16
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	699a      	ldr	r2, [r3, #24]
 800499c:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <USB_HostInit+0x164>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049b0:	b004      	add	sp, #16
 80049b2:	4770      	bx	lr
 80049b4:	01000200 	.word	0x01000200
 80049b8:	00e00300 	.word	0x00e00300
 80049bc:	00600080 	.word	0x00600080
 80049c0:	004000e0 	.word	0x004000e0
 80049c4:	a3200008 	.word	0xa3200008

080049c8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049e6:	f023 0303 	bic.w	r3, r3, #3
 80049ea:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	68f9      	ldr	r1, [r7, #12]
 80049fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004a00:	4313      	orrs	r3, r2
 8004a02:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d107      	bne.n	8004a1a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a10:	461a      	mov	r2, r3
 8004a12:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004a16:	6053      	str	r3, [r2, #4]
 8004a18:	e009      	b.n	8004a2e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004a1a:	78fb      	ldrb	r3, [r7, #3]
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d106      	bne.n	8004a2e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a26:	461a      	mov	r2, r3
 8004a28:	f241 7370 	movw	r3, #6000	; 0x1770
 8004a2c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004a5c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a6a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004a6c:	2064      	movs	r0, #100	; 0x64
 8004a6e:	f7fc f985 	bl	8000d7c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004a7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a7e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004a80:	200a      	movs	r0, #10
 8004a82:	f7fc f97b 	bl	8000d7c <HAL_Delay>

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004ab4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d109      	bne.n	8004ad4 <USB_DriveVbus+0x44>
 8004ac0:	78fb      	ldrb	r3, [r7, #3]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d106      	bne.n	8004ad4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004ace:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ad2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ade:	d109      	bne.n	8004af4 <USB_DriveVbus+0x64>
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004aee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004af2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b085      	sub	sp, #20
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	0c5b      	lsrs	r3, r3, #17
 8004b20:	f003 0303 	and.w	r3, r3, #3
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	b29b      	uxth	r3, r3
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
	...

08004b54 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	4608      	mov	r0, r1
 8004b5e:	4611      	mov	r1, r2
 8004b60:	461a      	mov	r2, r3
 8004b62:	4603      	mov	r3, r0
 8004b64:	70fb      	strb	r3, [r7, #3]
 8004b66:	460b      	mov	r3, r1
 8004b68:	70bb      	strb	r3, [r7, #2]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004b76:	78fb      	ldrb	r3, [r7, #3]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b82:	461a      	mov	r2, r3
 8004b84:	f04f 33ff 	mov.w	r3, #4294967295
 8004b88:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004b8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d87e      	bhi.n	8004c90 <USB_HC_Init+0x13c>
 8004b92:	a201      	add	r2, pc, #4	; (adr r2, 8004b98 <USB_HC_Init+0x44>)
 8004b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b98:	08004ba9 	.word	0x08004ba9
 8004b9c:	08004c53 	.word	0x08004c53
 8004ba0:	08004ba9 	.word	0x08004ba9
 8004ba4:	08004c15 	.word	0x08004c15
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ba8:	78fb      	ldrb	r3, [r7, #3]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f240 439d 	movw	r3, #1181	; 0x49d
 8004bba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004bbc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	da10      	bge.n	8004be6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004bc4:	78fb      	ldrb	r3, [r7, #3]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	78fa      	ldrb	r2, [r7, #3]
 8004bd4:	0151      	lsls	r1, r2, #5
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	440a      	add	r2, r1
 8004bda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004be4:	e057      	b.n	8004c96 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d051      	beq.n	8004c96 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004bf2:	78fb      	ldrb	r3, [r7, #3]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	78fa      	ldrb	r2, [r7, #3]
 8004c02:	0151      	lsls	r1, r2, #5
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	440a      	add	r2, r1
 8004c08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c0c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004c10:	60d3      	str	r3, [r2, #12]
      break;
 8004c12:	e040      	b.n	8004c96 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c20:	461a      	mov	r2, r3
 8004c22:	f240 639d 	movw	r3, #1693	; 0x69d
 8004c26:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004c28:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	da34      	bge.n	8004c9a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004c30:	78fb      	ldrb	r3, [r7, #3]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	78fa      	ldrb	r2, [r7, #3]
 8004c40:	0151      	lsls	r1, r2, #5
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	440a      	add	r2, r1
 8004c46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c4e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004c50:	e023      	b.n	8004c9a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c52:	78fb      	ldrb	r3, [r7, #3]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f240 2325 	movw	r3, #549	; 0x225
 8004c64:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004c66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	da17      	bge.n	8004c9e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004c6e:	78fb      	ldrb	r3, [r7, #3]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	78fa      	ldrb	r2, [r7, #3]
 8004c7e:	0151      	lsls	r1, r2, #5
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	440a      	add	r2, r1
 8004c84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c88:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004c8c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004c8e:	e006      	b.n	8004c9e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	77fb      	strb	r3, [r7, #31]
      break;
 8004c94:	e004      	b.n	8004ca0 <USB_HC_Init+0x14c>
      break;
 8004c96:	bf00      	nop
 8004c98:	e002      	b.n	8004ca0 <USB_HC_Init+0x14c>
      break;
 8004c9a:	bf00      	nop
 8004c9c:	e000      	b.n	8004ca0 <USB_HC_Init+0x14c>
      break;
 8004c9e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ca6:	699a      	ldr	r2, [r3, #24]
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	2101      	movs	r1, #1
 8004cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb4:	6939      	ldr	r1, [r7, #16]
 8004cb6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004cca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	da03      	bge.n	8004cda <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cd6:	61bb      	str	r3, [r7, #24]
 8004cd8:	e001      	b.n	8004cde <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7ff ff0f 	bl	8004b02 <USB_GetHostSpeed>
 8004ce4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004ce6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d106      	bne.n	8004cfc <USB_HC_Init+0x1a8>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d003      	beq.n	8004cfc <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004cf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	e001      	b.n	8004d00 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d00:	787b      	ldrb	r3, [r7, #1]
 8004d02:	059b      	lsls	r3, r3, #22
 8004d04:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004d08:	78bb      	ldrb	r3, [r7, #2]
 8004d0a:	02db      	lsls	r3, r3, #11
 8004d0c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d10:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004d12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d16:	049b      	lsls	r3, r3, #18
 8004d18:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004d1c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004d1e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004d20:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004d24:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d2a:	78fb      	ldrb	r3, [r7, #3]
 8004d2c:	0159      	lsls	r1, r3, #5
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	440b      	add	r3, r1
 8004d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d36:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d3c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004d3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d10f      	bne.n	8004d66 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004d46:	78fb      	ldrb	r3, [r7, #3]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	78fa      	ldrb	r2, [r7, #3]
 8004d56:	0151      	lsls	r1, r2, #5
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	440a      	add	r2, r1
 8004d5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d64:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004d66:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3720      	adds	r7, #32
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08c      	sub	sp, #48	; 0x30
 8004d74:	af02      	add	r7, sp, #8
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	785b      	ldrb	r3, [r3, #1]
 8004d86:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004d88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d8c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d02d      	beq.n	8004df6 <USB_HC_StartXfer+0x86>
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	791b      	ldrb	r3, [r3, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d129      	bne.n	8004df6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004da2:	79fb      	ldrb	r3, [r7, #7]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d117      	bne.n	8004dd8 <USB_HC_StartXfer+0x68>
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	79db      	ldrb	r3, [r3, #7]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <USB_HC_StartXfer+0x48>
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	79db      	ldrb	r3, [r3, #7]
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d10f      	bne.n	8004dd8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	0151      	lsls	r1, r2, #5
 8004dca:	6a3a      	ldr	r2, [r7, #32]
 8004dcc:	440a      	add	r2, r1
 8004dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004dd8:	79fb      	ldrb	r3, [r7, #7]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10b      	bne.n	8004df6 <USB_HC_StartXfer+0x86>
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	795b      	ldrb	r3, [r3, #5]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d107      	bne.n	8004df6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	785b      	ldrb	r3, [r3, #1]
 8004dea:	4619      	mov	r1, r3
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 fa2f 	bl	8005250 <USB_DoPing>
      return HAL_OK;
 8004df2:	2300      	movs	r3, #0
 8004df4:	e0f8      	b.n	8004fe8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d018      	beq.n	8004e30 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	8912      	ldrh	r2, [r2, #8]
 8004e06:	4413      	add	r3, r2
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	8912      	ldrh	r2, [r2, #8]
 8004e0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e12:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004e14:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004e16:	8b7b      	ldrh	r3, [r7, #26]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d90b      	bls.n	8004e34 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004e1c:	8b7b      	ldrh	r3, [r7, #26]
 8004e1e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004e20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	8912      	ldrh	r2, [r2, #8]
 8004e26:	fb02 f203 	mul.w	r2, r2, r3
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	611a      	str	r2, [r3, #16]
 8004e2e:	e001      	b.n	8004e34 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004e30:	2301      	movs	r3, #1
 8004e32:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	78db      	ldrb	r3, [r3, #3]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d007      	beq.n	8004e4c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004e3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	8912      	ldrh	r2, [r2, #8]
 8004e42:	fb02 f203 	mul.w	r2, r2, r3
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	611a      	str	r2, [r3, #16]
 8004e4a:	e003      	b.n	8004e54 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	695a      	ldr	r2, [r3, #20]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004e5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e5e:	04d9      	lsls	r1, r3, #19
 8004e60:	4b63      	ldr	r3, [pc, #396]	; (8004ff0 <USB_HC_StartXfer+0x280>)
 8004e62:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004e64:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	7a9b      	ldrb	r3, [r3, #10]
 8004e6a:	075b      	lsls	r3, r3, #29
 8004e6c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004e70:	69f9      	ldr	r1, [r7, #28]
 8004e72:	0148      	lsls	r0, r1, #5
 8004e74:	6a39      	ldr	r1, [r7, #32]
 8004e76:	4401      	add	r1, r0
 8004e78:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004e7c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004e7e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004e80:	79fb      	ldrb	r3, [r7, #7]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d009      	beq.n	8004e9a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	68d9      	ldr	r1, [r3, #12]
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e96:	460a      	mov	r2, r1
 8004e98:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	bf0c      	ite	eq
 8004eaa:	2301      	moveq	r3, #1
 8004eac:	2300      	movne	r3, #0
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	69fa      	ldr	r2, [r7, #28]
 8004ec2:	0151      	lsls	r1, r2, #5
 8004ec4:	6a3a      	ldr	r2, [r7, #32]
 8004ec6:	440a      	add	r2, r1
 8004ec8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ecc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004ed0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	7e7b      	ldrb	r3, [r7, #25]
 8004ee2:	075b      	lsls	r3, r3, #29
 8004ee4:	69f9      	ldr	r1, [r7, #28]
 8004ee6:	0148      	lsls	r0, r1, #5
 8004ee8:	6a39      	ldr	r1, [r7, #32]
 8004eea:	4401      	add	r1, r0
 8004eec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f0a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	78db      	ldrb	r3, [r3, #3]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d004      	beq.n	8004f1e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f1a:	613b      	str	r3, [r7, #16]
 8004f1c:	e003      	b.n	8004f26 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f24:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f2c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004f40:	79fb      	ldrb	r3, [r7, #7]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8004f46:	2300      	movs	r3, #0
 8004f48:	e04e      	b.n	8004fe8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	78db      	ldrb	r3, [r3, #3]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d149      	bne.n	8004fe6 <USB_HC_StartXfer+0x276>
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d045      	beq.n	8004fe6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	79db      	ldrb	r3, [r3, #7]
 8004f5e:	2b03      	cmp	r3, #3
 8004f60:	d830      	bhi.n	8004fc4 <USB_HC_StartXfer+0x254>
 8004f62:	a201      	add	r2, pc, #4	; (adr r2, 8004f68 <USB_HC_StartXfer+0x1f8>)
 8004f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f68:	08004f79 	.word	0x08004f79
 8004f6c:	08004f9d 	.word	0x08004f9d
 8004f70:	08004f79 	.word	0x08004f79
 8004f74:	08004f9d 	.word	0x08004f9d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	3303      	adds	r3, #3
 8004f7e:	089b      	lsrs	r3, r3, #2
 8004f80:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004f82:	8afa      	ldrh	r2, [r7, #22]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d91c      	bls.n	8004fc8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	f043 0220 	orr.w	r2, r3, #32
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	619a      	str	r2, [r3, #24]
        }
        break;
 8004f9a:	e015      	b.n	8004fc8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	3303      	adds	r3, #3
 8004fa2:	089b      	lsrs	r3, r3, #2
 8004fa4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004fa6:	8afa      	ldrh	r2, [r7, #22]
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d90a      	bls.n	8004fcc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	619a      	str	r2, [r3, #24]
        }
        break;
 8004fc2:	e003      	b.n	8004fcc <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004fc4:	bf00      	nop
 8004fc6:	e002      	b.n	8004fce <USB_HC_StartXfer+0x25e>
        break;
 8004fc8:	bf00      	nop
 8004fca:	e000      	b.n	8004fce <USB_HC_StartXfer+0x25e>
        break;
 8004fcc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	68d9      	ldr	r1, [r3, #12]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	785a      	ldrb	r2, [r3, #1]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	2000      	movs	r0, #0
 8004fde:	9000      	str	r0, [sp, #0]
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f7ff fb53 	bl	800468c <USB_WritePacket>
  }

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3728      	adds	r7, #40	; 0x28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	1ff80000 	.word	0x1ff80000

08004ff4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	b29b      	uxth	r3, r3
}
 800500a:	4618      	mov	r0, r3
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005016:	b480      	push	{r7}
 8005018:	b089      	sub	sp, #36	; 0x24
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	460b      	mov	r3, r1
 8005020:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005026:	78fb      	ldrb	r3, [r7, #3]
 8005028:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	4413      	add	r3, r2
 8005036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	0c9b      	lsrs	r3, r3, #18
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	4413      	add	r3, r2
 800504c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	0fdb      	lsrs	r3, r3, #31
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b20      	cmp	r3, #32
 8005064:	d104      	bne.n	8005070 <USB_HC_Halt+0x5a>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	e0e8      	b.n	8005242 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <USB_HC_Halt+0x66>
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	2b02      	cmp	r3, #2
 800507a:	d173      	bne.n	8005164 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	4413      	add	r3, r2
 8005084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	0151      	lsls	r1, r2, #5
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	440a      	add	r2, r1
 8005092:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005096:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800509a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 0320 	and.w	r3, r3, #32
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f040 80cb 	bne.w	8005240 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d143      	bne.n	800513e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	0151      	lsls	r1, r2, #5
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	440a      	add	r2, r1
 80050cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050d4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	0151      	lsls	r1, r2, #5
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	440a      	add	r2, r1
 80050ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050f4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	0151      	lsls	r1, r2, #5
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	440a      	add	r2, r1
 800510c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005110:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005114:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	3301      	adds	r3, #1
 800511a:	61fb      	str	r3, [r7, #28]
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005122:	d81d      	bhi.n	8005160 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	4413      	add	r3, r2
 800512c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005136:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800513a:	d0ec      	beq.n	8005116 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800513c:	e080      	b.n	8005240 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	4413      	add	r3, r2
 8005146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	0151      	lsls	r1, r2, #5
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	440a      	add	r2, r1
 8005154:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800515c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800515e:	e06f      	b.n	8005240 <USB_HC_Halt+0x22a>
            break;
 8005160:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005162:	e06d      	b.n	8005240 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	4413      	add	r3, r2
 800516c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	0151      	lsls	r1, r2, #5
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	440a      	add	r2, r1
 800517a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800517e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005182:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d143      	bne.n	800521c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	4413      	add	r3, r2
 800519c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	0151      	lsls	r1, r2, #5
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	440a      	add	r2, r1
 80051aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051b2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	0151      	lsls	r1, r2, #5
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	440a      	add	r2, r1
 80051ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	0151      	lsls	r1, r2, #5
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	440a      	add	r2, r1
 80051ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051f2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	3301      	adds	r3, #1
 80051f8:	61fb      	str	r3, [r7, #28]
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005200:	d81d      	bhi.n	800523e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	4413      	add	r3, r2
 800520a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005218:	d0ec      	beq.n	80051f4 <USB_HC_Halt+0x1de>
 800521a:	e011      	b.n	8005240 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	4413      	add	r3, r2
 8005224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	0151      	lsls	r1, r2, #5
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	440a      	add	r2, r1
 8005232:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005236:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800523a:	6013      	str	r3, [r2, #0]
 800523c:	e000      	b.n	8005240 <USB_HC_Halt+0x22a>
          break;
 800523e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3724      	adds	r7, #36	; 0x24
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
	...

08005250 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	460b      	mov	r3, r1
 800525a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005260:	78fb      	ldrb	r3, [r7, #3]
 8005262:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005264:	2301      	movs	r3, #1
 8005266:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	04da      	lsls	r2, r3, #19
 800526c:	4b15      	ldr	r3, [pc, #84]	; (80052c4 <USB_DoPing+0x74>)
 800526e:	4013      	ands	r3, r2
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	0151      	lsls	r1, r2, #5
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	440a      	add	r2, r1
 8005278:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800527c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005280:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	4413      	add	r3, r2
 800528a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005298:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052a0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ae:	461a      	mov	r2, r3
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	371c      	adds	r7, #28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	1ff80000 	.word	0x1ff80000

080052c8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f7ff f935 	bl	8004548 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80052de:	2110      	movs	r1, #16
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7ff f98f 	bl	8004604 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7ff f9b0 	bl	800464c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80052ec:	2300      	movs	r3, #0
 80052ee:	613b      	str	r3, [r7, #16]
 80052f0:	e01f      	b.n	8005332 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005308:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005310:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005318:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4413      	add	r3, r2
 8005322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005326:	461a      	mov	r2, r3
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	3301      	adds	r3, #1
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b0f      	cmp	r3, #15
 8005336:	d9dc      	bls.n	80052f2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005338:	2300      	movs	r3, #0
 800533a:	613b      	str	r3, [r7, #16]
 800533c:	e034      	b.n	80053a8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4413      	add	r3, r2
 8005346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005354:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800535c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005364:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4413      	add	r3, r2
 800536e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005372:	461a      	mov	r2, r3
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	3301      	adds	r3, #1
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005384:	d80c      	bhi.n	80053a0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4413      	add	r3, r2
 800538e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005398:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800539c:	d0ec      	beq.n	8005378 <USB_StopHost+0xb0>
 800539e:	e000      	b.n	80053a2 <USB_StopHost+0xda>
        break;
 80053a0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	3301      	adds	r3, #1
 80053a6:	613b      	str	r3, [r7, #16]
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	2b0f      	cmp	r3, #15
 80053ac:	d9c7      	bls.n	800533e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053b4:	461a      	mov	r2, r3
 80053b6:	f04f 33ff 	mov.w	r3, #4294967295
 80053ba:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f04f 32ff 	mov.w	r2, #4294967295
 80053c2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7ff f8ae 	bl	8004526 <USB_EnableGlobalInt>

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3718      	adds	r7, #24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80053d4:	b590      	push	{r4, r7, lr}
 80053d6:	b089      	sub	sp, #36	; 0x24
 80053d8:	af04      	add	r7, sp, #16
 80053da:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80053dc:	2301      	movs	r3, #1
 80053de:	2202      	movs	r2, #2
 80053e0:	2102      	movs	r1, #2
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fc66 	bl	8005cb4 <USBH_FindInterface>
 80053e8:	4603      	mov	r3, r0
 80053ea:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
 80053ee:	2bff      	cmp	r3, #255	; 0xff
 80053f0:	d002      	beq.n	80053f8 <USBH_CDC_InterfaceInit+0x24>
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d901      	bls.n	80053fc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80053f8:	2302      	movs	r3, #2
 80053fa:	e13d      	b.n	8005678 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
 80053fe:	4619      	mov	r1, r3
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fc3b 	bl	8005c7c <USBH_SelectInterface>
 8005406:	4603      	mov	r3, r0
 8005408:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800540a:	7bbb      	ldrb	r3, [r7, #14]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005410:	2302      	movs	r3, #2
 8005412:	e131      	b.n	8005678 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800541a:	2050      	movs	r0, #80	; 0x50
 800541c:	f002 f9f2 	bl	8007804 <malloc>
 8005420:	4603      	mov	r3, r0
 8005422:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005434:	2302      	movs	r3, #2
 8005436:	e11f      	b.n	8005678 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005438:	2250      	movs	r2, #80	; 0x50
 800543a:	2100      	movs	r1, #0
 800543c:	68b8      	ldr	r0, [r7, #8]
 800543e:	f002 f9f1 	bl	8007824 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005442:	7bfb      	ldrb	r3, [r7, #15]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	211a      	movs	r1, #26
 8005448:	fb01 f303 	mul.w	r3, r1, r3
 800544c:	4413      	add	r3, r2
 800544e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	b25b      	sxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	da15      	bge.n	8005486 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800545a:	7bfb      	ldrb	r3, [r7, #15]
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	211a      	movs	r1, #26
 8005460:	fb01 f303 	mul.w	r3, r1, r3
 8005464:	4413      	add	r3, r2
 8005466:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800546a:	781a      	ldrb	r2, [r3, #0]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005470:	7bfb      	ldrb	r3, [r7, #15]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	211a      	movs	r1, #26
 8005476:	fb01 f303 	mul.w	r3, r1, r3
 800547a:	4413      	add	r3, r2
 800547c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005480:	881a      	ldrh	r2, [r3, #0]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	785b      	ldrb	r3, [r3, #1]
 800548a:	4619      	mov	r1, r3
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f001 fe32 	bl	80070f6 <USBH_AllocPipe>
 8005492:	4603      	mov	r3, r0
 8005494:	461a      	mov	r2, r3
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	7819      	ldrb	r1, [r3, #0]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	7858      	ldrb	r0, [r3, #1]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	8952      	ldrh	r2, [r2, #10]
 80054b2:	9202      	str	r2, [sp, #8]
 80054b4:	2203      	movs	r2, #3
 80054b6:	9201      	str	r2, [sp, #4]
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	4623      	mov	r3, r4
 80054bc:	4602      	mov	r2, r0
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f001 fdea 	bl	8007098 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2200      	movs	r2, #0
 80054ca:	4619      	mov	r1, r3
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f002 f8eb 	bl	80076a8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80054d2:	2300      	movs	r3, #0
 80054d4:	2200      	movs	r2, #0
 80054d6:	210a      	movs	r1, #10
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fbeb 	bl	8005cb4 <USBH_FindInterface>
 80054de:	4603      	mov	r3, r0
 80054e0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
 80054e4:	2bff      	cmp	r3, #255	; 0xff
 80054e6:	d002      	beq.n	80054ee <USBH_CDC_InterfaceInit+0x11a>
 80054e8:	7bfb      	ldrb	r3, [r7, #15]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d901      	bls.n	80054f2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80054ee:	2302      	movs	r3, #2
 80054f0:	e0c2      	b.n	8005678 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80054f2:	7bfb      	ldrb	r3, [r7, #15]
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	211a      	movs	r1, #26
 80054f8:	fb01 f303 	mul.w	r3, r1, r3
 80054fc:	4413      	add	r3, r2
 80054fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	b25b      	sxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	da16      	bge.n	8005538 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800550a:	7bfb      	ldrb	r3, [r7, #15]
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	211a      	movs	r1, #26
 8005510:	fb01 f303 	mul.w	r3, r1, r3
 8005514:	4413      	add	r3, r2
 8005516:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800551a:	781a      	ldrb	r2, [r3, #0]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005520:	7bfb      	ldrb	r3, [r7, #15]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	211a      	movs	r1, #26
 8005526:	fb01 f303 	mul.w	r3, r1, r3
 800552a:	4413      	add	r3, r2
 800552c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005530:	881a      	ldrh	r2, [r3, #0]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	835a      	strh	r2, [r3, #26]
 8005536:	e015      	b.n	8005564 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	211a      	movs	r1, #26
 800553e:	fb01 f303 	mul.w	r3, r1, r3
 8005542:	4413      	add	r3, r2
 8005544:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005548:	781a      	ldrb	r2, [r3, #0]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800554e:	7bfb      	ldrb	r3, [r7, #15]
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	211a      	movs	r1, #26
 8005554:	fb01 f303 	mul.w	r3, r1, r3
 8005558:	4413      	add	r3, r2
 800555a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800555e:	881a      	ldrh	r2, [r3, #0]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005564:	7bfb      	ldrb	r3, [r7, #15]
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	211a      	movs	r1, #26
 800556a:	fb01 f303 	mul.w	r3, r1, r3
 800556e:	4413      	add	r3, r2
 8005570:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	b25b      	sxtb	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	da16      	bge.n	80055aa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800557c:	7bfb      	ldrb	r3, [r7, #15]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	211a      	movs	r1, #26
 8005582:	fb01 f303 	mul.w	r3, r1, r3
 8005586:	4413      	add	r3, r2
 8005588:	f203 3356 	addw	r3, r3, #854	; 0x356
 800558c:	781a      	ldrb	r2, [r3, #0]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005592:	7bfb      	ldrb	r3, [r7, #15]
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	211a      	movs	r1, #26
 8005598:	fb01 f303 	mul.w	r3, r1, r3
 800559c:	4413      	add	r3, r2
 800559e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80055a2:	881a      	ldrh	r2, [r3, #0]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	835a      	strh	r2, [r3, #26]
 80055a8:	e015      	b.n	80055d6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80055aa:	7bfb      	ldrb	r3, [r7, #15]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	211a      	movs	r1, #26
 80055b0:	fb01 f303 	mul.w	r3, r1, r3
 80055b4:	4413      	add	r3, r2
 80055b6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80055ba:	781a      	ldrb	r2, [r3, #0]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	211a      	movs	r1, #26
 80055c6:	fb01 f303 	mul.w	r3, r1, r3
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80055d0:	881a      	ldrh	r2, [r3, #0]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	7b9b      	ldrb	r3, [r3, #14]
 80055da:	4619      	mov	r1, r3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f001 fd8a 	bl	80070f6 <USBH_AllocPipe>
 80055e2:	4603      	mov	r3, r0
 80055e4:	461a      	mov	r2, r3
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	7bdb      	ldrb	r3, [r3, #15]
 80055ee:	4619      	mov	r1, r3
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f001 fd80 	bl	80070f6 <USBH_AllocPipe>
 80055f6:	4603      	mov	r3, r0
 80055f8:	461a      	mov	r2, r3
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	7b59      	ldrb	r1, [r3, #13]
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	7b98      	ldrb	r0, [r3, #14]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	8b12      	ldrh	r2, [r2, #24]
 8005616:	9202      	str	r2, [sp, #8]
 8005618:	2202      	movs	r2, #2
 800561a:	9201      	str	r2, [sp, #4]
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	4623      	mov	r3, r4
 8005620:	4602      	mov	r2, r0
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f001 fd38 	bl	8007098 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	7b19      	ldrb	r1, [r3, #12]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	7bd8      	ldrb	r0, [r3, #15]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	8b52      	ldrh	r2, [r2, #26]
 8005640:	9202      	str	r2, [sp, #8]
 8005642:	2202      	movs	r2, #2
 8005644:	9201      	str	r2, [sp, #4]
 8005646:	9300      	str	r3, [sp, #0]
 8005648:	4623      	mov	r3, r4
 800564a:	4602      	mov	r2, r0
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f001 fd23 	bl	8007098 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	7b5b      	ldrb	r3, [r3, #13]
 800565e:	2200      	movs	r2, #0
 8005660:	4619      	mov	r1, r3
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f002 f820 	bl	80076a8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	7b1b      	ldrb	r3, [r3, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	4619      	mov	r1, r3
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f002 f819 	bl	80076a8 <USBH_LL_SetToggle>

  return USBH_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	bd90      	pop	{r4, r7, pc}

08005680 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00e      	beq.n	80056b8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	4619      	mov	r1, r3
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f001 fd18 	bl	80070d6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	4619      	mov	r1, r3
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f001 fd43 	bl	8007138 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	7b1b      	ldrb	r3, [r3, #12]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00e      	beq.n	80056de <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	7b1b      	ldrb	r3, [r3, #12]
 80056c4:	4619      	mov	r1, r3
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f001 fd05 	bl	80070d6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	7b1b      	ldrb	r3, [r3, #12]
 80056d0:	4619      	mov	r1, r3
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f001 fd30 	bl	8007138 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	7b5b      	ldrb	r3, [r3, #13]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00e      	beq.n	8005704 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	7b5b      	ldrb	r3, [r3, #13]
 80056ea:	4619      	mov	r1, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f001 fcf2 	bl	80070d6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	7b5b      	ldrb	r3, [r3, #13]
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f001 fd1d 	bl	8007138 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00b      	beq.n	8005728 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	4618      	mov	r0, r3
 800571a:	f002 f87b 	bl	8007814 <free>
    phost->pActiveClass->pData = 0U;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005724:	2200      	movs	r2, #0
 8005726:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b084      	sub	sp, #16
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	3340      	adds	r3, #64	; 0x40
 8005748:	4619      	mov	r1, r3
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f8b1 	bl	80058b2 <GetLineCoding>
 8005750:	4603      	mov	r3, r0
 8005752:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005754:	7afb      	ldrb	r3, [r7, #11]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d105      	bne.n	8005766 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005760:	2102      	movs	r1, #2
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005766:	7afb      	ldrb	r3, [r7, #11]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005778:	2301      	movs	r3, #1
 800577a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800577c:	2300      	movs	r3, #0
 800577e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005790:	2b04      	cmp	r3, #4
 8005792:	d877      	bhi.n	8005884 <USBH_CDC_Process+0x114>
 8005794:	a201      	add	r2, pc, #4	; (adr r2, 800579c <USBH_CDC_Process+0x2c>)
 8005796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579a:	bf00      	nop
 800579c:	080057b1 	.word	0x080057b1
 80057a0:	080057b7 	.word	0x080057b7
 80057a4:	080057e7 	.word	0x080057e7
 80057a8:	0800585b 	.word	0x0800585b
 80057ac:	08005869 	.word	0x08005869
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	73fb      	strb	r3, [r7, #15]
      break;
 80057b4:	e06d      	b.n	8005892 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ba:	4619      	mov	r1, r3
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f897 	bl	80058f0 <SetLineCoding>
 80057c2:	4603      	mov	r3, r0
 80057c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80057c6:	7bbb      	ldrb	r3, [r7, #14]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d104      	bne.n	80057d6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80057d4:	e058      	b.n	8005888 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80057d6:	7bbb      	ldrb	r3, [r7, #14]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d055      	beq.n	8005888 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2204      	movs	r2, #4
 80057e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80057e4:	e050      	b.n	8005888 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	3340      	adds	r3, #64	; 0x40
 80057ea:	4619      	mov	r1, r3
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f860 	bl	80058b2 <GetLineCoding>
 80057f2:	4603      	mov	r3, r0
 80057f4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80057f6:	7bbb      	ldrb	r3, [r7, #14]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d126      	bne.n	800584a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800580e:	791b      	ldrb	r3, [r3, #4]
 8005810:	429a      	cmp	r2, r3
 8005812:	d13b      	bne.n	800588c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800581e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005820:	429a      	cmp	r2, r3
 8005822:	d133      	bne.n	800588c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800582e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005830:	429a      	cmp	r2, r3
 8005832:	d12b      	bne.n	800588c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800583c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800583e:	429a      	cmp	r2, r3
 8005840:	d124      	bne.n	800588c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f958 	bl	8005af8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005848:	e020      	b.n	800588c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800584a:	7bbb      	ldrb	r3, [r7, #14]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d01d      	beq.n	800588c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2204      	movs	r2, #4
 8005854:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005858:	e018      	b.n	800588c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f867 	bl	800592e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f8da 	bl	8005a1a <CDC_ProcessReception>
      break;
 8005866:	e014      	b.n	8005892 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005868:	2100      	movs	r1, #0
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 ffe3 	bl	8006836 <USBH_ClrFeature>
 8005870:	4603      	mov	r3, r0
 8005872:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005874:	7bbb      	ldrb	r3, [r7, #14]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10a      	bne.n	8005890 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005882:	e005      	b.n	8005890 <USBH_CDC_Process+0x120>

    default:
      break;
 8005884:	bf00      	nop
 8005886:	e004      	b.n	8005892 <USBH_CDC_Process+0x122>
      break;
 8005888:	bf00      	nop
 800588a:	e002      	b.n	8005892 <USBH_CDC_Process+0x122>
      break;
 800588c:	bf00      	nop
 800588e:	e000      	b.n	8005892 <USBH_CDC_Process+0x122>
      break;
 8005890:	bf00      	nop

  }

  return status;
 8005892:	7bfb      	ldrb	r3, [r7, #15]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b082      	sub	sp, #8
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	22a1      	movs	r2, #161	; 0xa1
 80058c0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2221      	movs	r2, #33	; 0x21
 80058c6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2207      	movs	r2, #7
 80058d8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2207      	movs	r2, #7
 80058de:	4619      	mov	r1, r3
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f001 f988 	bl	8006bf6 <USBH_CtlReq>
 80058e6:	4603      	mov	r3, r0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2221      	movs	r2, #33	; 0x21
 80058fe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2220      	movs	r2, #32
 8005904:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2207      	movs	r2, #7
 8005916:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2207      	movs	r2, #7
 800591c:	4619      	mov	r1, r3
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f001 f969 	bl	8006bf6 <USBH_CtlReq>
 8005924:	4603      	mov	r3, r0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b086      	sub	sp, #24
 8005932:	af02      	add	r7, sp, #8
 8005934:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005940:	2300      	movs	r3, #0
 8005942:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800594a:	2b01      	cmp	r3, #1
 800594c:	d002      	beq.n	8005954 <CDC_ProcessTransmission+0x26>
 800594e:	2b02      	cmp	r3, #2
 8005950:	d023      	beq.n	800599a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005952:	e05e      	b.n	8005a12 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	8b12      	ldrh	r2, [r2, #24]
 800595c:	4293      	cmp	r3, r2
 800595e:	d90b      	bls.n	8005978 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	69d9      	ldr	r1, [r3, #28]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8b1a      	ldrh	r2, [r3, #24]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	7b5b      	ldrb	r3, [r3, #13]
 800596c:	2001      	movs	r0, #1
 800596e:	9000      	str	r0, [sp, #0]
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f001 fb4e 	bl	8007012 <USBH_BulkSendData>
 8005976:	e00b      	b.n	8005990 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8005980:	b29a      	uxth	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	7b5b      	ldrb	r3, [r3, #13]
 8005986:	2001      	movs	r0, #1
 8005988:	9000      	str	r0, [sp, #0]
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f001 fb41 	bl	8007012 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005998:	e03b      	b.n	8005a12 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	7b5b      	ldrb	r3, [r3, #13]
 800599e:	4619      	mov	r1, r3
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f001 fe57 	bl	8007654 <USBH_LL_GetURBState>
 80059a6:	4603      	mov	r3, r0
 80059a8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80059aa:	7afb      	ldrb	r3, [r7, #11]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d128      	bne.n	8005a02 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	8b12      	ldrh	r2, [r2, #24]
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d90e      	bls.n	80059da <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	8b12      	ldrh	r2, [r2, #24]
 80059c4:	1a9a      	subs	r2, r3, r2
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	8b12      	ldrh	r2, [r2, #24]
 80059d2:	441a      	add	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	61da      	str	r2, [r3, #28]
 80059d8:	e002      	b.n	80059e0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d004      	beq.n	80059f2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80059f0:	e00e      	b.n	8005a10 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f868 	bl	8005ad0 <USBH_CDC_TransmitCallback>
      break;
 8005a00:	e006      	b.n	8005a10 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005a02:	7afb      	ldrb	r3, [r7, #11]
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d103      	bne.n	8005a10 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005a10:	bf00      	nop
  }
}
 8005a12:	bf00      	nop
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b086      	sub	sp, #24
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d002      	beq.n	8005a40 <CDC_ProcessReception+0x26>
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d00e      	beq.n	8005a5c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005a3e:	e043      	b.n	8005ac8 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	6a19      	ldr	r1, [r3, #32]
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	8b5a      	ldrh	r2, [r3, #26]
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	7b1b      	ldrb	r3, [r3, #12]
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f001 fb05 	bl	800705c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2204      	movs	r2, #4
 8005a56:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005a5a:	e035      	b.n	8005ac8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	7b1b      	ldrb	r3, [r3, #12]
 8005a60:	4619      	mov	r1, r3
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f001 fdf6 	bl	8007654 <USBH_LL_GetURBState>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005a6c:	7cfb      	ldrb	r3, [r7, #19]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d129      	bne.n	8005ac6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	7b1b      	ldrb	r3, [r3, #12]
 8005a76:	4619      	mov	r1, r3
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f001 fd59 	bl	8007530 <USBH_LL_GetLastXferSize>
 8005a7e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d016      	beq.n	8005ab8 <CDC_ProcessReception+0x9e>
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	8b5b      	ldrh	r3, [r3, #26]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d910      	bls.n	8005ab8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	1ad2      	subs	r2, r2, r3
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	6a1a      	ldr	r2, [r3, #32]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	441a      	add	r2, r3
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2203      	movs	r2, #3
 8005ab2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005ab6:	e006      	b.n	8005ac6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f80f 	bl	8005ae4 <USBH_CDC_ReceiveCallback>
      break;
 8005ac6:	bf00      	nop
  }
}
 8005ac8:	bf00      	nop
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	4613      	mov	r3, r2
 8005b18:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005b20:	2302      	movs	r3, #2
 8005b22:	e029      	b.n	8005b78 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	79fa      	ldrb	r2, [r7, #7]
 8005b28:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 f81f 	bl	8005b80 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f001 fc29 	bl	80073c8 <USBH_LL_Init>

  return USBH_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	e009      	b.n	8005ba6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	33e0      	adds	r3, #224	; 0xe0
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b0e      	cmp	r3, #14
 8005baa:	d9f2      	bls.n	8005b92 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005bac:	2300      	movs	r3, #0
 8005bae:	60fb      	str	r3, [r7, #12]
 8005bb0:	e009      	b.n	8005bc6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bcc:	d3f1      	bcc.n	8005bb2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2240      	movs	r2, #64	; 0x40
 8005bf2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005c32:	2300      	movs	r3, #0
 8005c34:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d016      	beq.n	8005c6a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10e      	bne.n	8005c64 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005c4c:	1c59      	adds	r1, r3, #1
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	33de      	adds	r3, #222	; 0xde
 8005c58:	6839      	ldr	r1, [r7, #0]
 8005c5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	73fb      	strb	r3, [r7, #15]
 8005c62:	e004      	b.n	8005c6e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005c64:	2302      	movs	r3, #2
 8005c66:	73fb      	strb	r3, [r7, #15]
 8005c68:	e001      	b.n	8005c6e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3714      	adds	r7, #20
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	460b      	mov	r3, r1
 8005c86:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005c92:	78fa      	ldrb	r2, [r7, #3]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d204      	bcs.n	8005ca2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	78fa      	ldrb	r2, [r7, #3]
 8005c9c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005ca0:	e001      	b.n	8005ca6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	4608      	mov	r0, r1
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	70fb      	strb	r3, [r7, #3]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	70bb      	strb	r3, [r7, #2]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005cdc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005cde:	e025      	b.n	8005d2c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005ce0:	7dfb      	ldrb	r3, [r7, #23]
 8005ce2:	221a      	movs	r2, #26
 8005ce4:	fb02 f303 	mul.w	r3, r2, r3
 8005ce8:	3308      	adds	r3, #8
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	4413      	add	r3, r2
 8005cee:	3302      	adds	r3, #2
 8005cf0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	795b      	ldrb	r3, [r3, #5]
 8005cf6:	78fa      	ldrb	r2, [r7, #3]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d002      	beq.n	8005d02 <USBH_FindInterface+0x4e>
 8005cfc:	78fb      	ldrb	r3, [r7, #3]
 8005cfe:	2bff      	cmp	r3, #255	; 0xff
 8005d00:	d111      	bne.n	8005d26 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005d06:	78ba      	ldrb	r2, [r7, #2]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d002      	beq.n	8005d12 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005d0c:	78bb      	ldrb	r3, [r7, #2]
 8005d0e:	2bff      	cmp	r3, #255	; 0xff
 8005d10:	d109      	bne.n	8005d26 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005d16:	787a      	ldrb	r2, [r7, #1]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d002      	beq.n	8005d22 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005d1c:	787b      	ldrb	r3, [r7, #1]
 8005d1e:	2bff      	cmp	r3, #255	; 0xff
 8005d20:	d101      	bne.n	8005d26 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005d22:	7dfb      	ldrb	r3, [r7, #23]
 8005d24:	e006      	b.n	8005d34 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005d26:	7dfb      	ldrb	r3, [r7, #23]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005d2c:	7dfb      	ldrb	r3, [r7, #23]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d9d6      	bls.n	8005ce0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005d32:	23ff      	movs	r3, #255	; 0xff
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	371c      	adds	r7, #28
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f001 fb79 	bl	8007440 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005d4e:	2101      	movs	r1, #1
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f001 fc92 	bl	800767a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3708      	adds	r7, #8
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b088      	sub	sp, #32
 8005d64:	af04      	add	r7, sp, #16
 8005d66:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005d68:	2302      	movs	r3, #2
 8005d6a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d102      	bne.n	8005d82 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2203      	movs	r2, #3
 8005d80:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b0b      	cmp	r3, #11
 8005d8a:	f200 81b3 	bhi.w	80060f4 <USBH_Process+0x394>
 8005d8e:	a201      	add	r2, pc, #4	; (adr r2, 8005d94 <USBH_Process+0x34>)
 8005d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d94:	08005dc5 	.word	0x08005dc5
 8005d98:	08005df7 	.word	0x08005df7
 8005d9c:	08005e5f 	.word	0x08005e5f
 8005da0:	0800608f 	.word	0x0800608f
 8005da4:	080060f5 	.word	0x080060f5
 8005da8:	08005f03 	.word	0x08005f03
 8005dac:	08006035 	.word	0x08006035
 8005db0:	08005f39 	.word	0x08005f39
 8005db4:	08005f59 	.word	0x08005f59
 8005db8:	08005f79 	.word	0x08005f79
 8005dbc:	08005fa7 	.word	0x08005fa7
 8005dc0:	08006077 	.word	0x08006077
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 8193 	beq.w	80060f8 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005dd8:	20c8      	movs	r0, #200	; 0xc8
 8005dda:	f001 fc95 	bl	8007708 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f001 fb8b 	bl	80074fa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005df4:	e180      	b.n	80060f8 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d107      	bne.n	8005e10 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005e0e:	e182      	b.n	8006116 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005e16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e1a:	d914      	bls.n	8005e46 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005e22:	3301      	adds	r3, #1
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005e32:	2b03      	cmp	r3, #3
 8005e34:	d903      	bls.n	8005e3e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	220d      	movs	r2, #13
 8005e3a:	701a      	strb	r2, [r3, #0]
      break;
 8005e3c:	e16b      	b.n	8006116 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	701a      	strb	r2, [r3, #0]
      break;
 8005e44:	e167      	b.n	8006116 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005e4c:	f103 020a 	add.w	r2, r3, #10
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005e56:	200a      	movs	r0, #10
 8005e58:	f001 fc56 	bl	8007708 <USBH_Delay>
      break;
 8005e5c:	e15b      	b.n	8006116 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d005      	beq.n	8005e74 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e6e:	2104      	movs	r1, #4
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005e74:	2064      	movs	r0, #100	; 0x64
 8005e76:	f001 fc47 	bl	8007708 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f001 fb16 	bl	80074ac <USBH_LL_GetSpeed>
 8005e80:	4603      	mov	r3, r0
 8005e82:	461a      	mov	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2205      	movs	r2, #5
 8005e8e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005e90:	2100      	movs	r1, #0
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f001 f92f 	bl	80070f6 <USBH_AllocPipe>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005ea0:	2180      	movs	r1, #128	; 0x80
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f001 f927 	bl	80070f6 <USBH_AllocPipe>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	461a      	mov	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	7919      	ldrb	r1, [r3, #4]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005ec4:	b292      	uxth	r2, r2
 8005ec6:	9202      	str	r2, [sp, #8]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	9201      	str	r2, [sp, #4]
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2280      	movs	r2, #128	; 0x80
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f001 f8e0 	bl	8007098 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	7959      	ldrb	r1, [r3, #5]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005eec:	b292      	uxth	r2, r2
 8005eee:	9202      	str	r2, [sp, #8]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	9201      	str	r2, [sp, #4]
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2200      	movs	r2, #0
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f001 f8cc 	bl	8007098 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005f00:	e109      	b.n	8006116 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f90c 	bl	8006120 <USBH_HandleEnum>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005f0c:	7bbb      	ldrb	r3, [r7, #14]
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f040 80f3 	bne.w	80060fc <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d103      	bne.n	8005f30 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2208      	movs	r2, #8
 8005f2c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005f2e:	e0e5      	b.n	80060fc <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2207      	movs	r2, #7
 8005f34:	701a      	strb	r2, [r3, #0]
      break;
 8005f36:	e0e1      	b.n	80060fc <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 80de 	beq.w	8006100 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2208      	movs	r2, #8
 8005f54:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005f56:	e0d3      	b.n	8006100 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	4619      	mov	r1, r3
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fc20 	bl	80067a8 <USBH_SetCfg>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f040 80ca 	bne.w	8006104 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2209      	movs	r2, #9
 8005f74:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005f76:	e0c5      	b.n	8006104 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8005f7e:	f003 0320 	and.w	r3, r3, #32
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00b      	beq.n	8005f9e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005f86:	2101      	movs	r1, #1
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 fc30 	bl	80067ee <USBH_SetFeature>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f040 80b9 	bne.w	8006108 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	220a      	movs	r2, #10
 8005f9a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005f9c:	e0b4      	b.n	8006108 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	220a      	movs	r2, #10
 8005fa2:	701a      	strb	r2, [r3, #0]
      break;
 8005fa4:	e0b0      	b.n	8006108 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 80ad 	beq.w	800610c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005fba:	2300      	movs	r3, #0
 8005fbc:	73fb      	strb	r3, [r7, #15]
 8005fbe:	e016      	b.n	8005fee <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005fc0:	7bfa      	ldrb	r2, [r7, #15]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	32de      	adds	r2, #222	; 0xde
 8005fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fca:	791a      	ldrb	r2, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d108      	bne.n	8005fe8 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005fd6:	7bfa      	ldrb	r2, [r7, #15]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	32de      	adds	r2, #222	; 0xde
 8005fdc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8005fe6:	e005      	b.n	8005ff4 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	3301      	adds	r3, #1
 8005fec:	73fb      	strb	r3, [r7, #15]
 8005fee:	7bfb      	ldrb	r3, [r7, #15]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0e5      	beq.n	8005fc0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d016      	beq.n	800602c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	4798      	blx	r3
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d109      	bne.n	8006024 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2206      	movs	r2, #6
 8006014:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800601c:	2103      	movs	r1, #3
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006022:	e073      	b.n	800610c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	220d      	movs	r2, #13
 8006028:	701a      	strb	r2, [r3, #0]
      break;
 800602a:	e06f      	b.n	800610c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	220d      	movs	r2, #13
 8006030:	701a      	strb	r2, [r3, #0]
      break;
 8006032:	e06b      	b.n	800610c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800603a:	2b00      	cmp	r3, #0
 800603c:	d017      	beq.n	800606e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	4798      	blx	r3
 800604a:	4603      	mov	r3, r0
 800604c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800604e:	7bbb      	ldrb	r3, [r7, #14]
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d103      	bne.n	800605e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	220b      	movs	r2, #11
 800605a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800605c:	e058      	b.n	8006110 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800605e:	7bbb      	ldrb	r3, [r7, #14]
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b02      	cmp	r3, #2
 8006064:	d154      	bne.n	8006110 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	220d      	movs	r2, #13
 800606a:	701a      	strb	r2, [r3, #0]
      break;
 800606c:	e050      	b.n	8006110 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	220d      	movs	r2, #13
 8006072:	701a      	strb	r2, [r3, #0]
      break;
 8006074:	e04c      	b.n	8006110 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800607c:	2b00      	cmp	r3, #0
 800607e:	d049      	beq.n	8006114 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	4798      	blx	r3
      }
      break;
 800608c:	e042      	b.n	8006114 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7ff fd72 	bl	8005b80 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d009      	beq.n	80060ba <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d005      	beq.n	80060d0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060ca:	2105      	movs	r1, #5
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d107      	bne.n	80060ec <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f7ff fe2b 	bl	8005d40 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80060ea:	e014      	b.n	8006116 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f001 f9a7 	bl	8007440 <USBH_LL_Start>
      break;
 80060f2:	e010      	b.n	8006116 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80060f4:	bf00      	nop
 80060f6:	e00e      	b.n	8006116 <USBH_Process+0x3b6>
      break;
 80060f8:	bf00      	nop
 80060fa:	e00c      	b.n	8006116 <USBH_Process+0x3b6>
      break;
 80060fc:	bf00      	nop
 80060fe:	e00a      	b.n	8006116 <USBH_Process+0x3b6>
    break;
 8006100:	bf00      	nop
 8006102:	e008      	b.n	8006116 <USBH_Process+0x3b6>
      break;
 8006104:	bf00      	nop
 8006106:	e006      	b.n	8006116 <USBH_Process+0x3b6>
      break;
 8006108:	bf00      	nop
 800610a:	e004      	b.n	8006116 <USBH_Process+0x3b6>
      break;
 800610c:	bf00      	nop
 800610e:	e002      	b.n	8006116 <USBH_Process+0x3b6>
      break;
 8006110:	bf00      	nop
 8006112:	e000      	b.n	8006116 <USBH_Process+0x3b6>
      break;
 8006114:	bf00      	nop
  }
  return USBH_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b088      	sub	sp, #32
 8006124:	af04      	add	r7, sp, #16
 8006126:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006128:	2301      	movs	r3, #1
 800612a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800612c:	2301      	movs	r3, #1
 800612e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	785b      	ldrb	r3, [r3, #1]
 8006134:	2b07      	cmp	r3, #7
 8006136:	f200 81c1 	bhi.w	80064bc <USBH_HandleEnum+0x39c>
 800613a:	a201      	add	r2, pc, #4	; (adr r2, 8006140 <USBH_HandleEnum+0x20>)
 800613c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006140:	08006161 	.word	0x08006161
 8006144:	0800621f 	.word	0x0800621f
 8006148:	08006289 	.word	0x08006289
 800614c:	08006317 	.word	0x08006317
 8006150:	08006381 	.word	0x08006381
 8006154:	080063f1 	.word	0x080063f1
 8006158:	08006437 	.word	0x08006437
 800615c:	0800647d 	.word	0x0800647d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006160:	2108      	movs	r1, #8
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 fa50 	bl	8006608 <USBH_Get_DevDesc>
 8006168:	4603      	mov	r3, r0
 800616a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800616c:	7bbb      	ldrb	r3, [r7, #14]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d130      	bne.n	80061d4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	7919      	ldrb	r1, [r3, #4]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006196:	b292      	uxth	r2, r2
 8006198:	9202      	str	r2, [sp, #8]
 800619a:	2200      	movs	r2, #0
 800619c:	9201      	str	r2, [sp, #4]
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	4603      	mov	r3, r0
 80061a2:	2280      	movs	r2, #128	; 0x80
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 ff77 	bl	8007098 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	7959      	ldrb	r1, [r3, #5]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80061be:	b292      	uxth	r2, r2
 80061c0:	9202      	str	r2, [sp, #8]
 80061c2:	2200      	movs	r2, #0
 80061c4:	9201      	str	r2, [sp, #4]
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	4603      	mov	r3, r0
 80061ca:	2200      	movs	r2, #0
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 ff63 	bl	8007098 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80061d2:	e175      	b.n	80064c0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80061d4:	7bbb      	ldrb	r3, [r7, #14]
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	f040 8172 	bne.w	80064c0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80061e2:	3301      	adds	r3, #1
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	d903      	bls.n	80061fe <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	220d      	movs	r2, #13
 80061fa:	701a      	strb	r2, [r3, #0]
      break;
 80061fc:	e160      	b.n	80064c0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	795b      	ldrb	r3, [r3, #5]
 8006202:	4619      	mov	r1, r3
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 ff97 	bl	8007138 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	791b      	ldrb	r3, [r3, #4]
 800620e:	4619      	mov	r1, r3
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 ff91 	bl	8007138 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	701a      	strb	r2, [r3, #0]
      break;
 800621c:	e150      	b.n	80064c0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800621e:	2112      	movs	r1, #18
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f9f1 	bl	8006608 <USBH_Get_DevDesc>
 8006226:	4603      	mov	r3, r0
 8006228:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800622a:	7bbb      	ldrb	r3, [r7, #14]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d103      	bne.n	8006238 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006236:	e145      	b.n	80064c4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006238:	7bbb      	ldrb	r3, [r7, #14]
 800623a:	2b03      	cmp	r3, #3
 800623c:	f040 8142 	bne.w	80064c4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006246:	3301      	adds	r3, #1
 8006248:	b2da      	uxtb	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006256:	2b03      	cmp	r3, #3
 8006258:	d903      	bls.n	8006262 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	220d      	movs	r2, #13
 800625e:	701a      	strb	r2, [r3, #0]
      break;
 8006260:	e130      	b.n	80064c4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	795b      	ldrb	r3, [r3, #5]
 8006266:	4619      	mov	r1, r3
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 ff65 	bl	8007138 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	791b      	ldrb	r3, [r3, #4]
 8006272:	4619      	mov	r1, r3
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 ff5f 	bl	8007138 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	701a      	strb	r2, [r3, #0]
      break;
 8006286:	e11d      	b.n	80064c4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006288:	2101      	movs	r1, #1
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fa68 	bl	8006760 <USBH_SetAddress>
 8006290:	4603      	mov	r3, r0
 8006292:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006294:	7bbb      	ldrb	r3, [r7, #14]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d132      	bne.n	8006300 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800629a:	2002      	movs	r0, #2
 800629c:	f001 fa34 	bl	8007708 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2203      	movs	r2, #3
 80062ac:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	7919      	ldrb	r1, [r3, #4]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80062c2:	b292      	uxth	r2, r2
 80062c4:	9202      	str	r2, [sp, #8]
 80062c6:	2200      	movs	r2, #0
 80062c8:	9201      	str	r2, [sp, #4]
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	4603      	mov	r3, r0
 80062ce:	2280      	movs	r2, #128	; 0x80
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fee1 	bl	8007098 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	7959      	ldrb	r1, [r3, #5]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80062ea:	b292      	uxth	r2, r2
 80062ec:	9202      	str	r2, [sp, #8]
 80062ee:	2200      	movs	r2, #0
 80062f0:	9201      	str	r2, [sp, #4]
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	4603      	mov	r3, r0
 80062f6:	2200      	movs	r2, #0
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fecd 	bl	8007098 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80062fe:	e0e3      	b.n	80064c8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006300:	7bbb      	ldrb	r3, [r7, #14]
 8006302:	2b03      	cmp	r3, #3
 8006304:	f040 80e0 	bne.w	80064c8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	220d      	movs	r2, #13
 800630c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	705a      	strb	r2, [r3, #1]
      break;
 8006314:	e0d8      	b.n	80064c8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006316:	2109      	movs	r1, #9
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f99d 	bl	8006658 <USBH_Get_CfgDesc>
 800631e:	4603      	mov	r3, r0
 8006320:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006322:	7bbb      	ldrb	r3, [r7, #14]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d103      	bne.n	8006330 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2204      	movs	r2, #4
 800632c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800632e:	e0cd      	b.n	80064cc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006330:	7bbb      	ldrb	r3, [r7, #14]
 8006332:	2b03      	cmp	r3, #3
 8006334:	f040 80ca 	bne.w	80064cc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800633e:	3301      	adds	r3, #1
 8006340:	b2da      	uxtb	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800634e:	2b03      	cmp	r3, #3
 8006350:	d903      	bls.n	800635a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	220d      	movs	r2, #13
 8006356:	701a      	strb	r2, [r3, #0]
      break;
 8006358:	e0b8      	b.n	80064cc <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	795b      	ldrb	r3, [r3, #5]
 800635e:	4619      	mov	r1, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fee9 	bl	8007138 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	791b      	ldrb	r3, [r3, #4]
 800636a:	4619      	mov	r1, r3
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 fee3 	bl	8007138 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	701a      	strb	r2, [r3, #0]
      break;
 800637e:	e0a5      	b.n	80064cc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006386:	4619      	mov	r1, r3
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f965 	bl	8006658 <USBH_Get_CfgDesc>
 800638e:	4603      	mov	r3, r0
 8006390:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006392:	7bbb      	ldrb	r3, [r7, #14]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d103      	bne.n	80063a0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2205      	movs	r2, #5
 800639c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800639e:	e097      	b.n	80064d0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80063a0:	7bbb      	ldrb	r3, [r7, #14]
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	f040 8094 	bne.w	80064d0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063ae:	3301      	adds	r3, #1
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063be:	2b03      	cmp	r3, #3
 80063c0:	d903      	bls.n	80063ca <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	220d      	movs	r2, #13
 80063c6:	701a      	strb	r2, [r3, #0]
      break;
 80063c8:	e082      	b.n	80064d0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	795b      	ldrb	r3, [r3, #5]
 80063ce:	4619      	mov	r1, r3
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 feb1 	bl	8007138 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	791b      	ldrb	r3, [r3, #4]
 80063da:	4619      	mov	r1, r3
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 feab 	bl	8007138 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	701a      	strb	r2, [r3, #0]
      break;
 80063ee:	e06f      	b.n	80064d0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d019      	beq.n	800642e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006406:	23ff      	movs	r3, #255	; 0xff
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f949 	bl	80066a0 <USBH_Get_StringDesc>
 800640e:	4603      	mov	r3, r0
 8006410:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006412:	7bbb      	ldrb	r3, [r7, #14]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d103      	bne.n	8006420 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2206      	movs	r2, #6
 800641c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800641e:	e059      	b.n	80064d4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006420:	7bbb      	ldrb	r3, [r7, #14]
 8006422:	2b03      	cmp	r3, #3
 8006424:	d156      	bne.n	80064d4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2206      	movs	r2, #6
 800642a:	705a      	strb	r2, [r3, #1]
      break;
 800642c:	e052      	b.n	80064d4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2206      	movs	r2, #6
 8006432:	705a      	strb	r2, [r3, #1]
      break;
 8006434:	e04e      	b.n	80064d4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800643c:	2b00      	cmp	r3, #0
 800643e:	d019      	beq.n	8006474 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800644c:	23ff      	movs	r3, #255	; 0xff
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f926 	bl	80066a0 <USBH_Get_StringDesc>
 8006454:	4603      	mov	r3, r0
 8006456:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006458:	7bbb      	ldrb	r3, [r7, #14]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d103      	bne.n	8006466 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2207      	movs	r2, #7
 8006462:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006464:	e038      	b.n	80064d8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006466:	7bbb      	ldrb	r3, [r7, #14]
 8006468:	2b03      	cmp	r3, #3
 800646a:	d135      	bne.n	80064d8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2207      	movs	r2, #7
 8006470:	705a      	strb	r2, [r3, #1]
      break;
 8006472:	e031      	b.n	80064d8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2207      	movs	r2, #7
 8006478:	705a      	strb	r2, [r3, #1]
      break;
 800647a:	e02d      	b.n	80064d8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006482:	2b00      	cmp	r3, #0
 8006484:	d017      	beq.n	80064b6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006492:	23ff      	movs	r3, #255	; 0xff
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f903 	bl	80066a0 <USBH_Get_StringDesc>
 800649a:	4603      	mov	r3, r0
 800649c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800649e:	7bbb      	ldrb	r3, [r7, #14]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d102      	bne.n	80064aa <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80064a8:	e018      	b.n	80064dc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064aa:	7bbb      	ldrb	r3, [r7, #14]
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	d115      	bne.n	80064dc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	73fb      	strb	r3, [r7, #15]
      break;
 80064b4:	e012      	b.n	80064dc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	73fb      	strb	r3, [r7, #15]
      break;
 80064ba:	e00f      	b.n	80064dc <USBH_HandleEnum+0x3bc>

    default:
      break;
 80064bc:	bf00      	nop
 80064be:	e00e      	b.n	80064de <USBH_HandleEnum+0x3be>
      break;
 80064c0:	bf00      	nop
 80064c2:	e00c      	b.n	80064de <USBH_HandleEnum+0x3be>
      break;
 80064c4:	bf00      	nop
 80064c6:	e00a      	b.n	80064de <USBH_HandleEnum+0x3be>
      break;
 80064c8:	bf00      	nop
 80064ca:	e008      	b.n	80064de <USBH_HandleEnum+0x3be>
      break;
 80064cc:	bf00      	nop
 80064ce:	e006      	b.n	80064de <USBH_HandleEnum+0x3be>
      break;
 80064d0:	bf00      	nop
 80064d2:	e004      	b.n	80064de <USBH_HandleEnum+0x3be>
      break;
 80064d4:	bf00      	nop
 80064d6:	e002      	b.n	80064de <USBH_HandleEnum+0x3be>
      break;
 80064d8:	bf00      	nop
 80064da:	e000      	b.n	80064de <USBH_HandleEnum+0x3be>
      break;
 80064dc:	bf00      	nop
  }
  return Status;
 80064de:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80064fa:	bf00      	nop
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b082      	sub	sp, #8
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f804 	bl	800652a <USBH_HandleSof>
}
 8006522:	bf00      	nop
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b082      	sub	sp, #8
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b0b      	cmp	r3, #11
 800653a:	d10a      	bne.n	8006552 <USBH_HandleSof+0x28>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006542:	2b00      	cmp	r3, #0
 8006544:	d005      	beq.n	8006552 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	4798      	blx	r3
  }
}
 8006552:	bf00      	nop
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800656a:	bf00      	nop
}
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006586:	bf00      	nop
}
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 ff48 	bl	8007476 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	791b      	ldrb	r3, [r3, #4]
 80065ea:	4619      	mov	r1, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fda3 	bl	8007138 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	795b      	ldrb	r3, [r3, #5]
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fd9d 	bl	8007138 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af02      	add	r7, sp, #8
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	460b      	mov	r3, r1
 8006612:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800661a:	78fb      	ldrb	r3, [r7, #3]
 800661c:	b29b      	uxth	r3, r3
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	4613      	mov	r3, r2
 8006622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006626:	2100      	movs	r1, #0
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f864 	bl	80066f6 <USBH_GetDescriptor>
 800662e:	4603      	mov	r3, r0
 8006630:	73fb      	strb	r3, [r7, #15]
 8006632:	7bfb      	ldrb	r3, [r7, #15]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10a      	bne.n	800664e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006644:	78fa      	ldrb	r2, [r7, #3]
 8006646:	b292      	uxth	r2, r2
 8006648:	4619      	mov	r1, r3
 800664a:	f000 f918 	bl	800687e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800664e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af02      	add	r7, sp, #8
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	460b      	mov	r3, r1
 8006662:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	331c      	adds	r3, #28
 8006668:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800666a:	887b      	ldrh	r3, [r7, #2]
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006674:	2100      	movs	r1, #0
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f83d 	bl	80066f6 <USBH_GetDescriptor>
 800667c:	4603      	mov	r3, r0
 800667e:	72fb      	strb	r3, [r7, #11]
 8006680:	7afb      	ldrb	r3, [r7, #11]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d107      	bne.n	8006696 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800668c:	887a      	ldrh	r2, [r7, #2]
 800668e:	68f9      	ldr	r1, [r7, #12]
 8006690:	4618      	mov	r0, r3
 8006692:	f000 f964 	bl	800695e <USBH_ParseCfgDesc>
  }

  return status;
 8006696:	7afb      	ldrb	r3, [r7, #11]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b088      	sub	sp, #32
 80066a4:	af02      	add	r7, sp, #8
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	607a      	str	r2, [r7, #4]
 80066aa:	461a      	mov	r2, r3
 80066ac:	460b      	mov	r3, r1
 80066ae:	72fb      	strb	r3, [r7, #11]
 80066b0:	4613      	mov	r3, r2
 80066b2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80066b4:	7afb      	ldrb	r3, [r7, #11]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80066bc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80066c4:	893b      	ldrh	r3, [r7, #8]
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	460b      	mov	r3, r1
 80066ca:	2100      	movs	r1, #0
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 f812 	bl	80066f6 <USBH_GetDescriptor>
 80066d2:	4603      	mov	r3, r0
 80066d4:	75fb      	strb	r3, [r7, #23]
 80066d6:	7dfb      	ldrb	r3, [r7, #23]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d107      	bne.n	80066ec <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80066e2:	893a      	ldrh	r2, [r7, #8]
 80066e4:	6879      	ldr	r1, [r7, #4]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 fa37 	bl	8006b5a <USBH_ParseStringDesc>
  }

  return status;
 80066ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3718      	adds	r7, #24
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b084      	sub	sp, #16
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	60f8      	str	r0, [r7, #12]
 80066fe:	607b      	str	r3, [r7, #4]
 8006700:	460b      	mov	r3, r1
 8006702:	72fb      	strb	r3, [r7, #11]
 8006704:	4613      	mov	r3, r2
 8006706:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	789b      	ldrb	r3, [r3, #2]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d11c      	bne.n	800674a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006710:	7afb      	ldrb	r3, [r7, #11]
 8006712:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006716:	b2da      	uxtb	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2206      	movs	r2, #6
 8006720:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	893a      	ldrh	r2, [r7, #8]
 8006726:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006728:	893b      	ldrh	r3, [r7, #8]
 800672a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800672e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006732:	d104      	bne.n	800673e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f240 4209 	movw	r2, #1033	; 0x409
 800673a:	829a      	strh	r2, [r3, #20]
 800673c:	e002      	b.n	8006744 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	8b3a      	ldrh	r2, [r7, #24]
 8006748:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800674a:	8b3b      	ldrh	r3, [r7, #24]
 800674c:	461a      	mov	r2, r3
 800674e:	6879      	ldr	r1, [r7, #4]
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 fa50 	bl	8006bf6 <USBH_CtlReq>
 8006756:	4603      	mov	r3, r0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	460b      	mov	r3, r1
 800676a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	789b      	ldrb	r3, [r3, #2]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d10f      	bne.n	8006794 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2205      	movs	r2, #5
 800677e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006780:	78fb      	ldrb	r3, [r7, #3]
 8006782:	b29a      	uxth	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006794:	2200      	movs	r2, #0
 8006796:	2100      	movs	r1, #0
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fa2c 	bl	8006bf6 <USBH_CtlReq>
 800679e:	4603      	mov	r3, r0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	789b      	ldrb	r3, [r3, #2]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d10e      	bne.n	80067da <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2209      	movs	r2, #9
 80067c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	887a      	ldrh	r2, [r7, #2]
 80067cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80067da:	2200      	movs	r2, #0
 80067dc:	2100      	movs	r1, #0
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fa09 	bl	8006bf6 <USBH_CtlReq>
 80067e4:	4603      	mov	r3, r0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b082      	sub	sp, #8
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	460b      	mov	r3, r1
 80067f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	789b      	ldrb	r3, [r3, #2]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d10f      	bne.n	8006822 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2203      	movs	r2, #3
 800680c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800680e:	78fb      	ldrb	r3, [r7, #3]
 8006810:	b29a      	uxth	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006822:	2200      	movs	r2, #0
 8006824:	2100      	movs	r1, #0
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f9e5 	bl	8006bf6 <USBH_CtlReq>
 800682c:	4603      	mov	r3, r0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	460b      	mov	r3, r1
 8006840:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	789b      	ldrb	r3, [r3, #2]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d10f      	bne.n	800686a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2202      	movs	r2, #2
 800684e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800685c:	78fb      	ldrb	r3, [r7, #3]
 800685e:	b29a      	uxth	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800686a:	2200      	movs	r2, #0
 800686c:	2100      	movs	r1, #0
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f9c1 	bl	8006bf6 <USBH_CtlReq>
 8006874:	4603      	mov	r3, r0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3708      	adds	r7, #8
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800687e:	b480      	push	{r7}
 8006880:	b085      	sub	sp, #20
 8006882:	af00      	add	r7, sp, #0
 8006884:	60f8      	str	r0, [r7, #12]
 8006886:	60b9      	str	r1, [r7, #8]
 8006888:	4613      	mov	r3, r2
 800688a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	781a      	ldrb	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	785a      	ldrb	r2, [r3, #1]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	3302      	adds	r3, #2
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	3303      	adds	r3, #3
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	021b      	lsls	r3, r3, #8
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	4313      	orrs	r3, r2
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	791a      	ldrb	r2, [r3, #4]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	795a      	ldrb	r2, [r3, #5]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	799a      	ldrb	r2, [r3, #6]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	79da      	ldrb	r2, [r3, #7]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80068d8:	88fb      	ldrh	r3, [r7, #6]
 80068da:	2b08      	cmp	r3, #8
 80068dc:	d939      	bls.n	8006952 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	3308      	adds	r3, #8
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	3309      	adds	r3, #9
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	021b      	lsls	r3, r3, #8
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	4313      	orrs	r3, r2
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	330a      	adds	r3, #10
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	b29a      	uxth	r2, r3
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	330b      	adds	r3, #11
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	b29b      	uxth	r3, r3
 800690a:	021b      	lsls	r3, r3, #8
 800690c:	b29b      	uxth	r3, r3
 800690e:	4313      	orrs	r3, r2
 8006910:	b29a      	uxth	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	330c      	adds	r3, #12
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	b29a      	uxth	r2, r3
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	330d      	adds	r3, #13
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	b29b      	uxth	r3, r3
 8006926:	021b      	lsls	r3, r3, #8
 8006928:	b29b      	uxth	r3, r3
 800692a:	4313      	orrs	r3, r2
 800692c:	b29a      	uxth	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	7b9a      	ldrb	r2, [r3, #14]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	7bda      	ldrb	r2, [r3, #15]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	7c1a      	ldrb	r2, [r3, #16]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	7c5a      	ldrb	r2, [r3, #17]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	745a      	strb	r2, [r3, #17]
  }
}
 8006952:	bf00      	nop
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b08a      	sub	sp, #40	; 0x28
 8006962:	af00      	add	r7, sp, #0
 8006964:	60f8      	str	r0, [r7, #12]
 8006966:	60b9      	str	r1, [r7, #8]
 8006968:	4613      	mov	r3, r2
 800696a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006970:	2300      	movs	r3, #0
 8006972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	781a      	ldrb	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	785a      	ldrb	r2, [r3, #1]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	3302      	adds	r3, #2
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	b29a      	uxth	r2, r3
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	3303      	adds	r3, #3
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	b29b      	uxth	r3, r3
 80069a0:	021b      	lsls	r3, r3, #8
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	4313      	orrs	r3, r2
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	791a      	ldrb	r2, [r3, #4]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	795a      	ldrb	r2, [r3, #5]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	799a      	ldrb	r2, [r3, #6]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	79da      	ldrb	r2, [r3, #7]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	7a1a      	ldrb	r2, [r3, #8]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80069d4:	88fb      	ldrh	r3, [r7, #6]
 80069d6:	2b09      	cmp	r3, #9
 80069d8:	d95f      	bls.n	8006a9a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80069da:	2309      	movs	r3, #9
 80069dc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80069de:	2300      	movs	r3, #0
 80069e0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80069e2:	e051      	b.n	8006a88 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80069e4:	f107 0316 	add.w	r3, r7, #22
 80069e8:	4619      	mov	r1, r3
 80069ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069ec:	f000 f8e8 	bl	8006bc0 <USBH_GetNextDesc>
 80069f0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	785b      	ldrb	r3, [r3, #1]
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	d146      	bne.n	8006a88 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80069fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069fe:	221a      	movs	r2, #26
 8006a00:	fb02 f303 	mul.w	r3, r2, r3
 8006a04:	3308      	adds	r3, #8
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	4413      	add	r3, r2
 8006a0a:	3302      	adds	r3, #2
 8006a0c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006a0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a10:	69f8      	ldr	r0, [r7, #28]
 8006a12:	f000 f846 	bl	8006aa2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006a20:	e022      	b.n	8006a68 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006a22:	f107 0316 	add.w	r3, r7, #22
 8006a26:	4619      	mov	r1, r3
 8006a28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a2a:	f000 f8c9 	bl	8006bc0 <USBH_GetNextDesc>
 8006a2e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	785b      	ldrb	r3, [r3, #1]
 8006a34:	2b05      	cmp	r3, #5
 8006a36:	d117      	bne.n	8006a68 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006a38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a3c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006a40:	3201      	adds	r2, #1
 8006a42:	00d2      	lsls	r2, r2, #3
 8006a44:	211a      	movs	r1, #26
 8006a46:	fb01 f303 	mul.w	r3, r1, r3
 8006a4a:	4413      	add	r3, r2
 8006a4c:	3308      	adds	r3, #8
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	4413      	add	r3, r2
 8006a52:	3304      	adds	r3, #4
 8006a54:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006a56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a58:	69b8      	ldr	r0, [r7, #24]
 8006a5a:	f000 f851 	bl	8006b00 <USBH_ParseEPDesc>
            ep_ix++;
 8006a5e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006a62:	3301      	adds	r3, #1
 8006a64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	791b      	ldrb	r3, [r3, #4]
 8006a6c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d204      	bcs.n	8006a7e <USBH_ParseCfgDesc+0x120>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	885a      	ldrh	r2, [r3, #2]
 8006a78:	8afb      	ldrh	r3, [r7, #22]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d8d1      	bhi.n	8006a22 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006a7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a82:	3301      	adds	r3, #1
 8006a84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006a88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d804      	bhi.n	8006a9a <USBH_ParseCfgDesc+0x13c>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	885a      	ldrh	r2, [r3, #2]
 8006a94:	8afb      	ldrh	r3, [r7, #22]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d8a4      	bhi.n	80069e4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006a9a:	bf00      	nop
 8006a9c:	3728      	adds	r7, #40	; 0x28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b083      	sub	sp, #12
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781a      	ldrb	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	785a      	ldrb	r2, [r3, #1]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	789a      	ldrb	r2, [r3, #2]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	78da      	ldrb	r2, [r3, #3]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	791a      	ldrb	r2, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	795a      	ldrb	r2, [r3, #5]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	799a      	ldrb	r2, [r3, #6]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	79da      	ldrb	r2, [r3, #7]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	7a1a      	ldrb	r2, [r3, #8]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	721a      	strb	r2, [r3, #8]
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	781a      	ldrb	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	785a      	ldrb	r2, [r3, #1]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	789a      	ldrb	r2, [r3, #2]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	78da      	ldrb	r2, [r3, #3]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	3305      	adds	r3, #5
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	021b      	lsls	r3, r3, #8
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	799a      	ldrb	r2, [r3, #6]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	719a      	strb	r2, [r3, #6]
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b087      	sub	sp, #28
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	60f8      	str	r0, [r7, #12]
 8006b62:	60b9      	str	r1, [r7, #8]
 8006b64:	4613      	mov	r3, r2
 8006b66:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	2b03      	cmp	r3, #3
 8006b70:	d120      	bne.n	8006bb4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	1e9a      	subs	r2, r3, #2
 8006b78:	88fb      	ldrh	r3, [r7, #6]
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	bf28      	it	cs
 8006b7e:	4613      	movcs	r3, r2
 8006b80:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3302      	adds	r3, #2
 8006b86:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006b88:	2300      	movs	r3, #0
 8006b8a:	82fb      	strh	r3, [r7, #22]
 8006b8c:	e00b      	b.n	8006ba6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006b8e:	8afb      	ldrh	r3, [r7, #22]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	4413      	add	r3, r2
 8006b94:	781a      	ldrb	r2, [r3, #0]
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006ba0:	8afb      	ldrh	r3, [r7, #22]
 8006ba2:	3302      	adds	r3, #2
 8006ba4:	82fb      	strh	r3, [r7, #22]
 8006ba6:	8afa      	ldrh	r2, [r7, #22]
 8006ba8:	8abb      	ldrh	r3, [r7, #20]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d3ef      	bcc.n	8006b8e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	701a      	strb	r2, [r3, #0]
  }
}
 8006bb4:	bf00      	nop
 8006bb6:	371c      	adds	r7, #28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	881a      	ldrh	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	4413      	add	r3, r2
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4413      	add	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006be8:	68fb      	ldr	r3, [r7, #12]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b086      	sub	sp, #24
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	60f8      	str	r0, [r7, #12]
 8006bfe:	60b9      	str	r1, [r7, #8]
 8006c00:	4613      	mov	r3, r2
 8006c02:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006c04:	2301      	movs	r3, #1
 8006c06:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	789b      	ldrb	r3, [r3, #2]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d002      	beq.n	8006c16 <USBH_CtlReq+0x20>
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d00f      	beq.n	8006c34 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006c14:	e027      	b.n	8006c66 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	88fa      	ldrh	r2, [r7, #6]
 8006c20:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2201      	movs	r2, #1
 8006c26:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	75fb      	strb	r3, [r7, #23]
      break;
 8006c32:	e018      	b.n	8006c66 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 f81b 	bl	8006c70 <USBH_HandleControl>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006c3e:	7dfb      	ldrb	r3, [r7, #23]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d002      	beq.n	8006c4a <USBH_CtlReq+0x54>
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
 8006c46:	2b03      	cmp	r3, #3
 8006c48:	d106      	bne.n	8006c58 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	761a      	strb	r2, [r3, #24]
      break;
 8006c56:	e005      	b.n	8006c64 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d102      	bne.n	8006c64 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2201      	movs	r2, #1
 8006c62:	709a      	strb	r2, [r3, #2]
      break;
 8006c64:	bf00      	nop
  }
  return status;
 8006c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3718      	adds	r7, #24
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af02      	add	r7, sp, #8
 8006c76:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	7e1b      	ldrb	r3, [r3, #24]
 8006c84:	3b01      	subs	r3, #1
 8006c86:	2b0a      	cmp	r3, #10
 8006c88:	f200 8156 	bhi.w	8006f38 <USBH_HandleControl+0x2c8>
 8006c8c:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <USBH_HandleControl+0x24>)
 8006c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c92:	bf00      	nop
 8006c94:	08006cc1 	.word	0x08006cc1
 8006c98:	08006cdb 	.word	0x08006cdb
 8006c9c:	08006d45 	.word	0x08006d45
 8006ca0:	08006d6b 	.word	0x08006d6b
 8006ca4:	08006da3 	.word	0x08006da3
 8006ca8:	08006dcd 	.word	0x08006dcd
 8006cac:	08006e1f 	.word	0x08006e1f
 8006cb0:	08006e41 	.word	0x08006e41
 8006cb4:	08006e7d 	.word	0x08006e7d
 8006cb8:	08006ea3 	.word	0x08006ea3
 8006cbc:	08006ee1 	.word	0x08006ee1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f103 0110 	add.w	r1, r3, #16
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	795b      	ldrb	r3, [r3, #5]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f943 	bl	8006f58 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	761a      	strb	r2, [r3, #24]
      break;
 8006cd8:	e139      	b.n	8006f4e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	795b      	ldrb	r3, [r3, #5]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fcb7 	bl	8007654 <USBH_LL_GetURBState>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006cea:	7bbb      	ldrb	r3, [r7, #14]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d11e      	bne.n	8006d2e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	7c1b      	ldrb	r3, [r3, #16]
 8006cf4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006cf8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	8adb      	ldrh	r3, [r3, #22]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00a      	beq.n	8006d18 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006d02:	7b7b      	ldrb	r3, [r7, #13]
 8006d04:	2b80      	cmp	r3, #128	; 0x80
 8006d06:	d103      	bne.n	8006d10 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2203      	movs	r2, #3
 8006d0c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006d0e:	e115      	b.n	8006f3c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2205      	movs	r2, #5
 8006d14:	761a      	strb	r2, [r3, #24]
      break;
 8006d16:	e111      	b.n	8006f3c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006d18:	7b7b      	ldrb	r3, [r7, #13]
 8006d1a:	2b80      	cmp	r3, #128	; 0x80
 8006d1c:	d103      	bne.n	8006d26 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2209      	movs	r2, #9
 8006d22:	761a      	strb	r2, [r3, #24]
      break;
 8006d24:	e10a      	b.n	8006f3c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2207      	movs	r2, #7
 8006d2a:	761a      	strb	r2, [r3, #24]
      break;
 8006d2c:	e106      	b.n	8006f3c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006d2e:	7bbb      	ldrb	r3, [r7, #14]
 8006d30:	2b04      	cmp	r3, #4
 8006d32:	d003      	beq.n	8006d3c <USBH_HandleControl+0xcc>
 8006d34:	7bbb      	ldrb	r3, [r7, #14]
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	f040 8100 	bne.w	8006f3c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	220b      	movs	r2, #11
 8006d40:	761a      	strb	r2, [r3, #24]
      break;
 8006d42:	e0fb      	b.n	8006f3c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6899      	ldr	r1, [r3, #8]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	899a      	ldrh	r2, [r3, #12]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	791b      	ldrb	r3, [r3, #4]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f93a 	bl	8006fd6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2204      	movs	r2, #4
 8006d66:	761a      	strb	r2, [r3, #24]
      break;
 8006d68:	e0f1      	b.n	8006f4e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	791b      	ldrb	r3, [r3, #4]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fc6f 	bl	8007654 <USBH_LL_GetURBState>
 8006d76:	4603      	mov	r3, r0
 8006d78:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006d7a:	7bbb      	ldrb	r3, [r7, #14]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d102      	bne.n	8006d86 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2209      	movs	r2, #9
 8006d84:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006d86:	7bbb      	ldrb	r3, [r7, #14]
 8006d88:	2b05      	cmp	r3, #5
 8006d8a:	d102      	bne.n	8006d92 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006d90:	e0d6      	b.n	8006f40 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006d92:	7bbb      	ldrb	r3, [r7, #14]
 8006d94:	2b04      	cmp	r3, #4
 8006d96:	f040 80d3 	bne.w	8006f40 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	220b      	movs	r2, #11
 8006d9e:	761a      	strb	r2, [r3, #24]
      break;
 8006da0:	e0ce      	b.n	8006f40 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6899      	ldr	r1, [r3, #8]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	899a      	ldrh	r2, [r3, #12]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	795b      	ldrb	r3, [r3, #5]
 8006dae:	2001      	movs	r0, #1
 8006db0:	9000      	str	r0, [sp, #0]
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f8ea 	bl	8006f8c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2206      	movs	r2, #6
 8006dc8:	761a      	strb	r2, [r3, #24]
      break;
 8006dca:	e0c0      	b.n	8006f4e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	795b      	ldrb	r3, [r3, #5]
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fc3e 	bl	8007654 <USBH_LL_GetURBState>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d103      	bne.n	8006dea <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2207      	movs	r2, #7
 8006de6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006de8:	e0ac      	b.n	8006f44 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006dea:	7bbb      	ldrb	r3, [r7, #14]
 8006dec:	2b05      	cmp	r3, #5
 8006dee:	d105      	bne.n	8006dfc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	220c      	movs	r2, #12
 8006df4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006df6:	2303      	movs	r3, #3
 8006df8:	73fb      	strb	r3, [r7, #15]
      break;
 8006dfa:	e0a3      	b.n	8006f44 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006dfc:	7bbb      	ldrb	r3, [r7, #14]
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d103      	bne.n	8006e0a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2205      	movs	r2, #5
 8006e06:	761a      	strb	r2, [r3, #24]
      break;
 8006e08:	e09c      	b.n	8006f44 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006e0a:	7bbb      	ldrb	r3, [r7, #14]
 8006e0c:	2b04      	cmp	r3, #4
 8006e0e:	f040 8099 	bne.w	8006f44 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	220b      	movs	r2, #11
 8006e16:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006e18:	2302      	movs	r3, #2
 8006e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e1c:	e092      	b.n	8006f44 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	791b      	ldrb	r3, [r3, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	2100      	movs	r1, #0
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f8d5 	bl	8006fd6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2208      	movs	r2, #8
 8006e3c:	761a      	strb	r2, [r3, #24]

      break;
 8006e3e:	e086      	b.n	8006f4e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	791b      	ldrb	r3, [r3, #4]
 8006e44:	4619      	mov	r1, r3
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fc04 	bl	8007654 <USBH_LL_GetURBState>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006e50:	7bbb      	ldrb	r3, [r7, #14]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d105      	bne.n	8006e62 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	220d      	movs	r2, #13
 8006e5a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006e60:	e072      	b.n	8006f48 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006e62:	7bbb      	ldrb	r3, [r7, #14]
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	d103      	bne.n	8006e70 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	220b      	movs	r2, #11
 8006e6c:	761a      	strb	r2, [r3, #24]
      break;
 8006e6e:	e06b      	b.n	8006f48 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006e70:	7bbb      	ldrb	r3, [r7, #14]
 8006e72:	2b05      	cmp	r3, #5
 8006e74:	d168      	bne.n	8006f48 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006e76:	2303      	movs	r3, #3
 8006e78:	73fb      	strb	r3, [r7, #15]
      break;
 8006e7a:	e065      	b.n	8006f48 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	795b      	ldrb	r3, [r3, #5]
 8006e80:	2201      	movs	r2, #1
 8006e82:	9200      	str	r2, [sp, #0]
 8006e84:	2200      	movs	r2, #0
 8006e86:	2100      	movs	r1, #0
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f87f 	bl	8006f8c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	220a      	movs	r2, #10
 8006e9e:	761a      	strb	r2, [r3, #24]
      break;
 8006ea0:	e055      	b.n	8006f4e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	795b      	ldrb	r3, [r3, #5]
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fbd3 	bl	8007654 <USBH_LL_GetURBState>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006eb2:	7bbb      	ldrb	r3, [r7, #14]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d105      	bne.n	8006ec4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	220d      	movs	r2, #13
 8006ec0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006ec2:	e043      	b.n	8006f4c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006ec4:	7bbb      	ldrb	r3, [r7, #14]
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d103      	bne.n	8006ed2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2209      	movs	r2, #9
 8006ece:	761a      	strb	r2, [r3, #24]
      break;
 8006ed0:	e03c      	b.n	8006f4c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006ed2:	7bbb      	ldrb	r3, [r7, #14]
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	d139      	bne.n	8006f4c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	220b      	movs	r2, #11
 8006edc:	761a      	strb	r2, [r3, #24]
      break;
 8006ede:	e035      	b.n	8006f4c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	7e5b      	ldrb	r3, [r3, #25]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	765a      	strb	r2, [r3, #25]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	7e5b      	ldrb	r3, [r3, #25]
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d806      	bhi.n	8006f02 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006f00:	e025      	b.n	8006f4e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f08:	2106      	movs	r1, #6
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	795b      	ldrb	r3, [r3, #5]
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f90c 	bl	8007138 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	791b      	ldrb	r3, [r3, #4]
 8006f24:	4619      	mov	r1, r3
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f906 	bl	8007138 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006f32:	2302      	movs	r3, #2
 8006f34:	73fb      	strb	r3, [r7, #15]
      break;
 8006f36:	e00a      	b.n	8006f4e <USBH_HandleControl+0x2de>

    default:
      break;
 8006f38:	bf00      	nop
 8006f3a:	e008      	b.n	8006f4e <USBH_HandleControl+0x2de>
      break;
 8006f3c:	bf00      	nop
 8006f3e:	e006      	b.n	8006f4e <USBH_HandleControl+0x2de>
      break;
 8006f40:	bf00      	nop
 8006f42:	e004      	b.n	8006f4e <USBH_HandleControl+0x2de>
      break;
 8006f44:	bf00      	nop
 8006f46:	e002      	b.n	8006f4e <USBH_HandleControl+0x2de>
      break;
 8006f48:	bf00      	nop
 8006f4a:	e000      	b.n	8006f4e <USBH_HandleControl+0x2de>
      break;
 8006f4c:	bf00      	nop
  }

  return status;
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b088      	sub	sp, #32
 8006f5c:	af04      	add	r7, sp, #16
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	4613      	mov	r3, r2
 8006f64:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006f66:	79f9      	ldrb	r1, [r7, #7]
 8006f68:	2300      	movs	r3, #0
 8006f6a:	9303      	str	r3, [sp, #12]
 8006f6c:	2308      	movs	r3, #8
 8006f6e:	9302      	str	r3, [sp, #8]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	9301      	str	r3, [sp, #4]
 8006f74:	2300      	movs	r3, #0
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	2300      	movs	r3, #0
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f000 fb38 	bl	80075f2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b088      	sub	sp, #32
 8006f90:	af04      	add	r7, sp, #16
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	4611      	mov	r1, r2
 8006f98:	461a      	mov	r2, r3
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	80fb      	strh	r3, [r7, #6]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d001      	beq.n	8006fb0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006fb0:	7979      	ldrb	r1, [r7, #5]
 8006fb2:	7e3b      	ldrb	r3, [r7, #24]
 8006fb4:	9303      	str	r3, [sp, #12]
 8006fb6:	88fb      	ldrh	r3, [r7, #6]
 8006fb8:	9302      	str	r3, [sp, #8]
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	9301      	str	r3, [sp, #4]
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f000 fb13 	bl	80075f2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b088      	sub	sp, #32
 8006fda:	af04      	add	r7, sp, #16
 8006fdc:	60f8      	str	r0, [r7, #12]
 8006fde:	60b9      	str	r1, [r7, #8]
 8006fe0:	4611      	mov	r1, r2
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	80fb      	strh	r3, [r7, #6]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006fec:	7979      	ldrb	r1, [r7, #5]
 8006fee:	2300      	movs	r3, #0
 8006ff0:	9303      	str	r3, [sp, #12]
 8006ff2:	88fb      	ldrh	r3, [r7, #6]
 8006ff4:	9302      	str	r3, [sp, #8]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	9301      	str	r3, [sp, #4]
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	2300      	movs	r3, #0
 8007000:	2201      	movs	r2, #1
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f000 faf5 	bl	80075f2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007008:	2300      	movs	r3, #0

}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b088      	sub	sp, #32
 8007016:	af04      	add	r7, sp, #16
 8007018:	60f8      	str	r0, [r7, #12]
 800701a:	60b9      	str	r1, [r7, #8]
 800701c:	4611      	mov	r1, r2
 800701e:	461a      	mov	r2, r3
 8007020:	460b      	mov	r3, r1
 8007022:	80fb      	strh	r3, [r7, #6]
 8007024:	4613      	mov	r3, r2
 8007026:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007032:	2300      	movs	r3, #0
 8007034:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007036:	7979      	ldrb	r1, [r7, #5]
 8007038:	7e3b      	ldrb	r3, [r7, #24]
 800703a:	9303      	str	r3, [sp, #12]
 800703c:	88fb      	ldrh	r3, [r7, #6]
 800703e:	9302      	str	r3, [sp, #8]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	9301      	str	r3, [sp, #4]
 8007044:	2301      	movs	r3, #1
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	2302      	movs	r3, #2
 800704a:	2200      	movs	r2, #0
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f000 fad0 	bl	80075f2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b088      	sub	sp, #32
 8007060:	af04      	add	r7, sp, #16
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	4611      	mov	r1, r2
 8007068:	461a      	mov	r2, r3
 800706a:	460b      	mov	r3, r1
 800706c:	80fb      	strh	r3, [r7, #6]
 800706e:	4613      	mov	r3, r2
 8007070:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007072:	7979      	ldrb	r1, [r7, #5]
 8007074:	2300      	movs	r3, #0
 8007076:	9303      	str	r3, [sp, #12]
 8007078:	88fb      	ldrh	r3, [r7, #6]
 800707a:	9302      	str	r3, [sp, #8]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	9301      	str	r3, [sp, #4]
 8007080:	2301      	movs	r3, #1
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	2302      	movs	r3, #2
 8007086:	2201      	movs	r2, #1
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 fab2 	bl	80075f2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af04      	add	r7, sp, #16
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	4608      	mov	r0, r1
 80070a2:	4611      	mov	r1, r2
 80070a4:	461a      	mov	r2, r3
 80070a6:	4603      	mov	r3, r0
 80070a8:	70fb      	strb	r3, [r7, #3]
 80070aa:	460b      	mov	r3, r1
 80070ac:	70bb      	strb	r3, [r7, #2]
 80070ae:	4613      	mov	r3, r2
 80070b0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80070b2:	7878      	ldrb	r0, [r7, #1]
 80070b4:	78ba      	ldrb	r2, [r7, #2]
 80070b6:	78f9      	ldrb	r1, [r7, #3]
 80070b8:	8b3b      	ldrh	r3, [r7, #24]
 80070ba:	9302      	str	r3, [sp, #8]
 80070bc:	7d3b      	ldrb	r3, [r7, #20]
 80070be:	9301      	str	r3, [sp, #4]
 80070c0:	7c3b      	ldrb	r3, [r7, #16]
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	4603      	mov	r3, r0
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fa45 	bl	8007556 <USBH_LL_OpenPipe>

  return USBH_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b082      	sub	sp, #8
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	460b      	mov	r3, r1
 80070e0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80070e2:	78fb      	ldrb	r3, [r7, #3]
 80070e4:	4619      	mov	r1, r3
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fa64 	bl	80075b4 <USBH_LL_ClosePipe>

  return USBH_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b084      	sub	sp, #16
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	460b      	mov	r3, r1
 8007100:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f836 	bl	8007174 <USBH_GetFreePipe>
 8007108:	4603      	mov	r3, r0
 800710a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800710c:	89fb      	ldrh	r3, [r7, #14]
 800710e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007112:	4293      	cmp	r3, r2
 8007114:	d00a      	beq.n	800712c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007116:	78fa      	ldrb	r2, [r7, #3]
 8007118:	89fb      	ldrh	r3, [r7, #14]
 800711a:	f003 030f 	and.w	r3, r3, #15
 800711e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007122:	6879      	ldr	r1, [r7, #4]
 8007124:	33e0      	adds	r3, #224	; 0xe0
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	440b      	add	r3, r1
 800712a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800712c:	89fb      	ldrh	r3, [r7, #14]
 800712e:	b2db      	uxtb	r3, r3
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	460b      	mov	r3, r1
 8007142:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007144:	78fb      	ldrb	r3, [r7, #3]
 8007146:	2b0a      	cmp	r3, #10
 8007148:	d80d      	bhi.n	8007166 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800714a:	78fb      	ldrb	r3, [r7, #3]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	33e0      	adds	r3, #224	; 0xe0
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	78fb      	ldrb	r3, [r7, #3]
 8007158:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800715c:	6879      	ldr	r1, [r7, #4]
 800715e:	33e0      	adds	r3, #224	; 0xe0
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	440b      	add	r3, r1
 8007164:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007180:	2300      	movs	r3, #0
 8007182:	73fb      	strb	r3, [r7, #15]
 8007184:	e00f      	b.n	80071a6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007186:	7bfb      	ldrb	r3, [r7, #15]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	33e0      	adds	r3, #224	; 0xe0
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4413      	add	r3, r2
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d102      	bne.n	80071a0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800719a:	7bfb      	ldrb	r3, [r7, #15]
 800719c:	b29b      	uxth	r3, r3
 800719e:	e007      	b.n	80071b0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80071a0:	7bfb      	ldrb	r3, [r7, #15]
 80071a2:	3301      	adds	r3, #1
 80071a4:	73fb      	strb	r3, [r7, #15]
 80071a6:	7bfb      	ldrb	r3, [r7, #15]
 80071a8:	2b0a      	cmp	r3, #10
 80071aa:	d9ec      	bls.n	8007186 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80071ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80071c0:	2201      	movs	r2, #1
 80071c2:	490e      	ldr	r1, [pc, #56]	; (80071fc <MX_USB_HOST_Init+0x40>)
 80071c4:	480e      	ldr	r0, [pc, #56]	; (8007200 <MX_USB_HOST_Init+0x44>)
 80071c6:	f7fe fca1 	bl	8005b0c <USBH_Init>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d001      	beq.n	80071d4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80071d0:	f7f9 fbf8 	bl	80009c4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80071d4:	490b      	ldr	r1, [pc, #44]	; (8007204 <MX_USB_HOST_Init+0x48>)
 80071d6:	480a      	ldr	r0, [pc, #40]	; (8007200 <MX_USB_HOST_Init+0x44>)
 80071d8:	f7fe fd26 	bl	8005c28 <USBH_RegisterClass>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80071e2:	f7f9 fbef 	bl	80009c4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80071e6:	4806      	ldr	r0, [pc, #24]	; (8007200 <MX_USB_HOST_Init+0x44>)
 80071e8:	f7fe fdaa 	bl	8005d40 <USBH_Start>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80071f2:	f7f9 fbe7 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80071f6:	bf00      	nop
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	0800721d 	.word	0x0800721d
 8007200:	20000150 	.word	0x20000150
 8007204:	2000000c 	.word	0x2000000c

08007208 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800720c:	4802      	ldr	r0, [pc, #8]	; (8007218 <MX_USB_HOST_Process+0x10>)
 800720e:	f7fe fda7 	bl	8005d60 <USBH_Process>
}
 8007212:	bf00      	nop
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20000150 	.word	0x20000150

0800721c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	460b      	mov	r3, r1
 8007226:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007228:	78fb      	ldrb	r3, [r7, #3]
 800722a:	3b01      	subs	r3, #1
 800722c:	2b04      	cmp	r3, #4
 800722e:	d819      	bhi.n	8007264 <USBH_UserProcess+0x48>
 8007230:	a201      	add	r2, pc, #4	; (adr r2, 8007238 <USBH_UserProcess+0x1c>)
 8007232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007236:	bf00      	nop
 8007238:	08007265 	.word	0x08007265
 800723c:	08007255 	.word	0x08007255
 8007240:	08007265 	.word	0x08007265
 8007244:	0800725d 	.word	0x0800725d
 8007248:	0800724d 	.word	0x0800724d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800724c:	4b09      	ldr	r3, [pc, #36]	; (8007274 <USBH_UserProcess+0x58>)
 800724e:	2203      	movs	r2, #3
 8007250:	701a      	strb	r2, [r3, #0]
  break;
 8007252:	e008      	b.n	8007266 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007254:	4b07      	ldr	r3, [pc, #28]	; (8007274 <USBH_UserProcess+0x58>)
 8007256:	2202      	movs	r2, #2
 8007258:	701a      	strb	r2, [r3, #0]
  break;
 800725a:	e004      	b.n	8007266 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800725c:	4b05      	ldr	r3, [pc, #20]	; (8007274 <USBH_UserProcess+0x58>)
 800725e:	2201      	movs	r2, #1
 8007260:	701a      	strb	r2, [r3, #0]
  break;
 8007262:	e000      	b.n	8007266 <USBH_UserProcess+0x4a>

  default:
  break;
 8007264:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007266:	bf00      	nop
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	200000b0 	.word	0x200000b0

08007278 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b08a      	sub	sp, #40	; 0x28
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007280:	f107 0314 	add.w	r3, r7, #20
 8007284:	2200      	movs	r2, #0
 8007286:	601a      	str	r2, [r3, #0]
 8007288:	605a      	str	r2, [r3, #4]
 800728a:	609a      	str	r2, [r3, #8]
 800728c:	60da      	str	r2, [r3, #12]
 800728e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007298:	d13a      	bne.n	8007310 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800729a:	2300      	movs	r3, #0
 800729c:	613b      	str	r3, [r7, #16]
 800729e:	4b1e      	ldr	r3, [pc, #120]	; (8007318 <HAL_HCD_MspInit+0xa0>)
 80072a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a2:	4a1d      	ldr	r2, [pc, #116]	; (8007318 <HAL_HCD_MspInit+0xa0>)
 80072a4:	f043 0301 	orr.w	r3, r3, #1
 80072a8:	6313      	str	r3, [r2, #48]	; 0x30
 80072aa:	4b1b      	ldr	r3, [pc, #108]	; (8007318 <HAL_HCD_MspInit+0xa0>)
 80072ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	613b      	str	r3, [r7, #16]
 80072b4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80072b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80072ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072bc:	2302      	movs	r3, #2
 80072be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072c0:	2300      	movs	r3, #0
 80072c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072c4:	2300      	movs	r3, #0
 80072c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80072c8:	230a      	movs	r3, #10
 80072ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072cc:	f107 0314 	add.w	r3, r7, #20
 80072d0:	4619      	mov	r1, r3
 80072d2:	4812      	ldr	r0, [pc, #72]	; (800731c <HAL_HCD_MspInit+0xa4>)
 80072d4:	f7f9 fe88 	bl	8000fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80072d8:	4b0f      	ldr	r3, [pc, #60]	; (8007318 <HAL_HCD_MspInit+0xa0>)
 80072da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072dc:	4a0e      	ldr	r2, [pc, #56]	; (8007318 <HAL_HCD_MspInit+0xa0>)
 80072de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072e2:	6353      	str	r3, [r2, #52]	; 0x34
 80072e4:	2300      	movs	r3, #0
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	4b0b      	ldr	r3, [pc, #44]	; (8007318 <HAL_HCD_MspInit+0xa0>)
 80072ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ec:	4a0a      	ldr	r2, [pc, #40]	; (8007318 <HAL_HCD_MspInit+0xa0>)
 80072ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072f2:	6453      	str	r3, [r2, #68]	; 0x44
 80072f4:	4b08      	ldr	r3, [pc, #32]	; (8007318 <HAL_HCD_MspInit+0xa0>)
 80072f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007300:	2200      	movs	r2, #0
 8007302:	2100      	movs	r1, #0
 8007304:	2043      	movs	r0, #67	; 0x43
 8007306:	f7f9 fe38 	bl	8000f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800730a:	2043      	movs	r0, #67	; 0x43
 800730c:	f7f9 fe51 	bl	8000fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007310:	bf00      	nop
 8007312:	3728      	adds	r7, #40	; 0x28
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	40023800 	.word	0x40023800
 800731c:	40020000 	.word	0x40020000

08007320 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800732e:	4618      	mov	r0, r3
 8007330:	f7ff f8e9 	bl	8006506 <USBH_LL_IncTimer>
}
 8007334:	bf00      	nop
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800734a:	4618      	mov	r0, r3
 800734c:	f7ff f921 	bl	8006592 <USBH_LL_Connect>
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007366:	4618      	mov	r0, r3
 8007368:	f7ff f92a 	bl	80065c0 <USBH_LL_Disconnect>
}
 800736c:	bf00      	nop
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	460b      	mov	r3, r1
 800737e:	70fb      	strb	r3, [r7, #3]
 8007380:	4613      	mov	r3, r2
 8007382:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800739e:	4618      	mov	r0, r3
 80073a0:	f7ff f8db 	bl	800655a <USBH_LL_PortEnabled>
}
 80073a4:	bf00      	nop
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7ff f8db 	bl	8006576 <USBH_LL_PortDisabled>
}
 80073c0:	bf00      	nop
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d12a      	bne.n	8007430 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80073da:	4a18      	ldr	r2, [pc, #96]	; (800743c <USBH_LL_Init+0x74>)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a15      	ldr	r2, [pc, #84]	; (800743c <USBH_LL_Init+0x74>)
 80073e6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80073ea:	4b14      	ldr	r3, [pc, #80]	; (800743c <USBH_LL_Init+0x74>)
 80073ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80073f0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80073f2:	4b12      	ldr	r3, [pc, #72]	; (800743c <USBH_LL_Init+0x74>)
 80073f4:	2208      	movs	r2, #8
 80073f6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80073f8:	4b10      	ldr	r3, [pc, #64]	; (800743c <USBH_LL_Init+0x74>)
 80073fa:	2201      	movs	r2, #1
 80073fc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80073fe:	4b0f      	ldr	r3, [pc, #60]	; (800743c <USBH_LL_Init+0x74>)
 8007400:	2200      	movs	r2, #0
 8007402:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007404:	4b0d      	ldr	r3, [pc, #52]	; (800743c <USBH_LL_Init+0x74>)
 8007406:	2202      	movs	r2, #2
 8007408:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800740a:	4b0c      	ldr	r3, [pc, #48]	; (800743c <USBH_LL_Init+0x74>)
 800740c:	2200      	movs	r2, #0
 800740e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007410:	480a      	ldr	r0, [pc, #40]	; (800743c <USBH_LL_Init+0x74>)
 8007412:	f7f9 ff9e 	bl	8001352 <HAL_HCD_Init>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d001      	beq.n	8007420 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800741c:	f7f9 fad2 	bl	80009c4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007420:	4806      	ldr	r0, [pc, #24]	; (800743c <USBH_LL_Init+0x74>)
 8007422:	f7fa fb82 	bl	8001b2a <HAL_HCD_GetCurrentFrame>
 8007426:	4603      	mov	r3, r0
 8007428:	4619      	mov	r1, r3
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f7ff f85c 	bl	80064e8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	20000528 	.word	0x20000528

08007440 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007448:	2300      	movs	r3, #0
 800744a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800744c:	2300      	movs	r3, #0
 800744e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007456:	4618      	mov	r0, r3
 8007458:	f7fa faf1 	bl	8001a3e <HAL_HCD_Start>
 800745c:	4603      	mov	r3, r0
 800745e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007460:	7bfb      	ldrb	r3, [r7, #15]
 8007462:	4618      	mov	r0, r3
 8007464:	f000 f95c 	bl	8007720 <USBH_Get_USB_Status>
 8007468:	4603      	mov	r3, r0
 800746a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800746c:	7bbb      	ldrb	r3, [r7, #14]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b084      	sub	sp, #16
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800748c:	4618      	mov	r0, r3
 800748e:	f7fa faf9 	bl	8001a84 <HAL_HCD_Stop>
 8007492:	4603      	mov	r3, r0
 8007494:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007496:	7bfb      	ldrb	r3, [r7, #15]
 8007498:	4618      	mov	r0, r3
 800749a:	f000 f941 	bl	8007720 <USBH_Get_USB_Status>
 800749e:	4603      	mov	r3, r0
 80074a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80074b4:	2301      	movs	r3, #1
 80074b6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80074be:	4618      	mov	r0, r3
 80074c0:	f7fa fb41 	bl	8001b46 <HAL_HCD_GetCurrentSpeed>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d00c      	beq.n	80074e4 <USBH_LL_GetSpeed+0x38>
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d80d      	bhi.n	80074ea <USBH_LL_GetSpeed+0x3e>
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d002      	beq.n	80074d8 <USBH_LL_GetSpeed+0x2c>
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d003      	beq.n	80074de <USBH_LL_GetSpeed+0x32>
 80074d6:	e008      	b.n	80074ea <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80074d8:	2300      	movs	r3, #0
 80074da:	73fb      	strb	r3, [r7, #15]
    break;
 80074dc:	e008      	b.n	80074f0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80074de:	2301      	movs	r3, #1
 80074e0:	73fb      	strb	r3, [r7, #15]
    break;
 80074e2:	e005      	b.n	80074f0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80074e4:	2302      	movs	r3, #2
 80074e6:	73fb      	strb	r3, [r7, #15]
    break;
 80074e8:	e002      	b.n	80074f0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80074ea:	2301      	movs	r3, #1
 80074ec:	73fb      	strb	r3, [r7, #15]
    break;
 80074ee:	bf00      	nop
  }
  return  speed;
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b084      	sub	sp, #16
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007510:	4618      	mov	r0, r3
 8007512:	f7fa fad4 	bl	8001abe <HAL_HCD_ResetPort>
 8007516:	4603      	mov	r3, r0
 8007518:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800751a:	7bfb      	ldrb	r3, [r7, #15]
 800751c:	4618      	mov	r0, r3
 800751e:	f000 f8ff 	bl	8007720 <USBH_Get_USB_Status>
 8007522:	4603      	mov	r3, r0
 8007524:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007526:	7bbb      	ldrb	r3, [r7, #14]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	460b      	mov	r3, r1
 800753a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007542:	78fa      	ldrb	r2, [r7, #3]
 8007544:	4611      	mov	r1, r2
 8007546:	4618      	mov	r0, r3
 8007548:	f7fa fadb 	bl	8001b02 <HAL_HCD_HC_GetXferCount>
 800754c:	4603      	mov	r3, r0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007556:	b590      	push	{r4, r7, lr}
 8007558:	b089      	sub	sp, #36	; 0x24
 800755a:	af04      	add	r7, sp, #16
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	4608      	mov	r0, r1
 8007560:	4611      	mov	r1, r2
 8007562:	461a      	mov	r2, r3
 8007564:	4603      	mov	r3, r0
 8007566:	70fb      	strb	r3, [r7, #3]
 8007568:	460b      	mov	r3, r1
 800756a:	70bb      	strb	r3, [r7, #2]
 800756c:	4613      	mov	r3, r2
 800756e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007570:	2300      	movs	r3, #0
 8007572:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800757e:	787c      	ldrb	r4, [r7, #1]
 8007580:	78ba      	ldrb	r2, [r7, #2]
 8007582:	78f9      	ldrb	r1, [r7, #3]
 8007584:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007586:	9302      	str	r3, [sp, #8]
 8007588:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800758c:	9301      	str	r3, [sp, #4]
 800758e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	4623      	mov	r3, r4
 8007596:	f7f9 ff3e 	bl	8001416 <HAL_HCD_HC_Init>
 800759a:	4603      	mov	r3, r0
 800759c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800759e:	7bfb      	ldrb	r3, [r7, #15]
 80075a0:	4618      	mov	r0, r3
 80075a2:	f000 f8bd 	bl	8007720 <USBH_Get_USB_Status>
 80075a6:	4603      	mov	r3, r0
 80075a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd90      	pop	{r4, r7, pc}

080075b4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	460b      	mov	r3, r1
 80075be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075c0:	2300      	movs	r3, #0
 80075c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80075c4:	2300      	movs	r3, #0
 80075c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80075ce:	78fa      	ldrb	r2, [r7, #3]
 80075d0:	4611      	mov	r1, r2
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7f9 ffae 	bl	8001534 <HAL_HCD_HC_Halt>
 80075d8:	4603      	mov	r3, r0
 80075da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 f89e 	bl	8007720 <USBH_Get_USB_Status>
 80075e4:	4603      	mov	r3, r0
 80075e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80075f2:	b590      	push	{r4, r7, lr}
 80075f4:	b089      	sub	sp, #36	; 0x24
 80075f6:	af04      	add	r7, sp, #16
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	4608      	mov	r0, r1
 80075fc:	4611      	mov	r1, r2
 80075fe:	461a      	mov	r2, r3
 8007600:	4603      	mov	r3, r0
 8007602:	70fb      	strb	r3, [r7, #3]
 8007604:	460b      	mov	r3, r1
 8007606:	70bb      	strb	r3, [r7, #2]
 8007608:	4613      	mov	r3, r2
 800760a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800760c:	2300      	movs	r3, #0
 800760e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007610:	2300      	movs	r3, #0
 8007612:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800761a:	787c      	ldrb	r4, [r7, #1]
 800761c:	78ba      	ldrb	r2, [r7, #2]
 800761e:	78f9      	ldrb	r1, [r7, #3]
 8007620:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007624:	9303      	str	r3, [sp, #12]
 8007626:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007628:	9302      	str	r3, [sp, #8]
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	9301      	str	r3, [sp, #4]
 800762e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	4623      	mov	r3, r4
 8007636:	f7f9 ffa1 	bl	800157c <HAL_HCD_HC_SubmitRequest>
 800763a:	4603      	mov	r3, r0
 800763c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800763e:	7bfb      	ldrb	r3, [r7, #15]
 8007640:	4618      	mov	r0, r3
 8007642:	f000 f86d 	bl	8007720 <USBH_Get_USB_Status>
 8007646:	4603      	mov	r3, r0
 8007648:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800764a:	7bbb      	ldrb	r3, [r7, #14]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3714      	adds	r7, #20
 8007650:	46bd      	mov	sp, r7
 8007652:	bd90      	pop	{r4, r7, pc}

08007654 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	460b      	mov	r3, r1
 800765e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007666:	78fa      	ldrb	r2, [r7, #3]
 8007668:	4611      	mov	r1, r2
 800766a:	4618      	mov	r0, r3
 800766c:	f7fa fa35 	bl	8001ada <HAL_HCD_HC_GetURBState>
 8007670:	4603      	mov	r3, r0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b082      	sub	sp, #8
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	460b      	mov	r3, r1
 8007684:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800768c:	2b01      	cmp	r3, #1
 800768e:	d103      	bne.n	8007698 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007690:	78fb      	ldrb	r3, [r7, #3]
 8007692:	4618      	mov	r0, r3
 8007694:	f000 f870 	bl	8007778 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007698:	20c8      	movs	r0, #200	; 0xc8
 800769a:	f7f9 fb6f 	bl	8000d7c <HAL_Delay>
  return USBH_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	460b      	mov	r3, r1
 80076b2:	70fb      	strb	r3, [r7, #3]
 80076b4:	4613      	mov	r3, r2
 80076b6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80076be:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80076c0:	78fb      	ldrb	r3, [r7, #3]
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	212c      	movs	r1, #44	; 0x2c
 80076c6:	fb01 f303 	mul.w	r3, r1, r3
 80076ca:	4413      	add	r3, r2
 80076cc:	333b      	adds	r3, #59	; 0x3b
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d009      	beq.n	80076e8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80076d4:	78fb      	ldrb	r3, [r7, #3]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	212c      	movs	r1, #44	; 0x2c
 80076da:	fb01 f303 	mul.w	r3, r1, r3
 80076de:	4413      	add	r3, r2
 80076e0:	3354      	adds	r3, #84	; 0x54
 80076e2:	78ba      	ldrb	r2, [r7, #2]
 80076e4:	701a      	strb	r2, [r3, #0]
 80076e6:	e008      	b.n	80076fa <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80076e8:	78fb      	ldrb	r3, [r7, #3]
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	212c      	movs	r1, #44	; 0x2c
 80076ee:	fb01 f303 	mul.w	r3, r1, r3
 80076f2:	4413      	add	r3, r2
 80076f4:	3355      	adds	r3, #85	; 0x55
 80076f6:	78ba      	ldrb	r2, [r7, #2]
 80076f8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f7f9 fb33 	bl	8000d7c <HAL_Delay>
}
 8007716:	bf00      	nop
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	4603      	mov	r3, r0
 8007728:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800772e:	79fb      	ldrb	r3, [r7, #7]
 8007730:	2b03      	cmp	r3, #3
 8007732:	d817      	bhi.n	8007764 <USBH_Get_USB_Status+0x44>
 8007734:	a201      	add	r2, pc, #4	; (adr r2, 800773c <USBH_Get_USB_Status+0x1c>)
 8007736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773a:	bf00      	nop
 800773c:	0800774d 	.word	0x0800774d
 8007740:	08007753 	.word	0x08007753
 8007744:	08007759 	.word	0x08007759
 8007748:	0800775f 	.word	0x0800775f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	73fb      	strb	r3, [r7, #15]
    break;
 8007750:	e00b      	b.n	800776a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007752:	2302      	movs	r3, #2
 8007754:	73fb      	strb	r3, [r7, #15]
    break;
 8007756:	e008      	b.n	800776a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007758:	2301      	movs	r3, #1
 800775a:	73fb      	strb	r3, [r7, #15]
    break;
 800775c:	e005      	b.n	800776a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800775e:	2302      	movs	r3, #2
 8007760:	73fb      	strb	r3, [r7, #15]
    break;
 8007762:	e002      	b.n	800776a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007764:	2302      	movs	r3, #2
 8007766:	73fb      	strb	r3, [r7, #15]
    break;
 8007768:	bf00      	nop
  }
  return usb_status;
 800776a:	7bfb      	ldrb	r3, [r7, #15]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3714      	adds	r7, #20
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	4603      	mov	r3, r0
 8007780:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007782:	79fb      	ldrb	r3, [r7, #7]
 8007784:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007786:	79fb      	ldrb	r3, [r7, #7]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d102      	bne.n	8007792 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800778c:	2301      	movs	r3, #1
 800778e:	73fb      	strb	r3, [r7, #15]
 8007790:	e001      	b.n	8007796 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8007792:	2300      	movs	r3, #0
 8007794:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007796:	7bfb      	ldrb	r3, [r7, #15]
 8007798:	461a      	mov	r2, r3
 800779a:	2101      	movs	r1, #1
 800779c:	4803      	ldr	r0, [pc, #12]	; (80077ac <MX_DriverVbusFS+0x34>)
 800779e:	f7f9 fdbf 	bl	8001320 <HAL_GPIO_WritePin>
}
 80077a2:	bf00      	nop
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	40020800 	.word	0x40020800

080077b0 <__errno>:
 80077b0:	4b01      	ldr	r3, [pc, #4]	; (80077b8 <__errno+0x8>)
 80077b2:	6818      	ldr	r0, [r3, #0]
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	2000002c 	.word	0x2000002c

080077bc <__libc_init_array>:
 80077bc:	b570      	push	{r4, r5, r6, lr}
 80077be:	4d0d      	ldr	r5, [pc, #52]	; (80077f4 <__libc_init_array+0x38>)
 80077c0:	4c0d      	ldr	r4, [pc, #52]	; (80077f8 <__libc_init_array+0x3c>)
 80077c2:	1b64      	subs	r4, r4, r5
 80077c4:	10a4      	asrs	r4, r4, #2
 80077c6:	2600      	movs	r6, #0
 80077c8:	42a6      	cmp	r6, r4
 80077ca:	d109      	bne.n	80077e0 <__libc_init_array+0x24>
 80077cc:	4d0b      	ldr	r5, [pc, #44]	; (80077fc <__libc_init_array+0x40>)
 80077ce:	4c0c      	ldr	r4, [pc, #48]	; (8007800 <__libc_init_array+0x44>)
 80077d0:	f000 f8f8 	bl	80079c4 <_init>
 80077d4:	1b64      	subs	r4, r4, r5
 80077d6:	10a4      	asrs	r4, r4, #2
 80077d8:	2600      	movs	r6, #0
 80077da:	42a6      	cmp	r6, r4
 80077dc:	d105      	bne.n	80077ea <__libc_init_array+0x2e>
 80077de:	bd70      	pop	{r4, r5, r6, pc}
 80077e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80077e4:	4798      	blx	r3
 80077e6:	3601      	adds	r6, #1
 80077e8:	e7ee      	b.n	80077c8 <__libc_init_array+0xc>
 80077ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80077ee:	4798      	blx	r3
 80077f0:	3601      	adds	r6, #1
 80077f2:	e7f2      	b.n	80077da <__libc_init_array+0x1e>
 80077f4:	080079f8 	.word	0x080079f8
 80077f8:	080079f8 	.word	0x080079f8
 80077fc:	080079f8 	.word	0x080079f8
 8007800:	080079fc 	.word	0x080079fc

08007804 <malloc>:
 8007804:	4b02      	ldr	r3, [pc, #8]	; (8007810 <malloc+0xc>)
 8007806:	4601      	mov	r1, r0
 8007808:	6818      	ldr	r0, [r3, #0]
 800780a:	f000 b863 	b.w	80078d4 <_malloc_r>
 800780e:	bf00      	nop
 8007810:	2000002c 	.word	0x2000002c

08007814 <free>:
 8007814:	4b02      	ldr	r3, [pc, #8]	; (8007820 <free+0xc>)
 8007816:	4601      	mov	r1, r0
 8007818:	6818      	ldr	r0, [r3, #0]
 800781a:	f000 b80b 	b.w	8007834 <_free_r>
 800781e:	bf00      	nop
 8007820:	2000002c 	.word	0x2000002c

08007824 <memset>:
 8007824:	4402      	add	r2, r0
 8007826:	4603      	mov	r3, r0
 8007828:	4293      	cmp	r3, r2
 800782a:	d100      	bne.n	800782e <memset+0xa>
 800782c:	4770      	bx	lr
 800782e:	f803 1b01 	strb.w	r1, [r3], #1
 8007832:	e7f9      	b.n	8007828 <memset+0x4>

08007834 <_free_r>:
 8007834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007836:	2900      	cmp	r1, #0
 8007838:	d048      	beq.n	80078cc <_free_r+0x98>
 800783a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800783e:	9001      	str	r0, [sp, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	f1a1 0404 	sub.w	r4, r1, #4
 8007846:	bfb8      	it	lt
 8007848:	18e4      	addlt	r4, r4, r3
 800784a:	f000 f8ad 	bl	80079a8 <__malloc_lock>
 800784e:	4a20      	ldr	r2, [pc, #128]	; (80078d0 <_free_r+0x9c>)
 8007850:	9801      	ldr	r0, [sp, #4]
 8007852:	6813      	ldr	r3, [r2, #0]
 8007854:	4615      	mov	r5, r2
 8007856:	b933      	cbnz	r3, 8007866 <_free_r+0x32>
 8007858:	6063      	str	r3, [r4, #4]
 800785a:	6014      	str	r4, [r2, #0]
 800785c:	b003      	add	sp, #12
 800785e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007862:	f000 b8a7 	b.w	80079b4 <__malloc_unlock>
 8007866:	42a3      	cmp	r3, r4
 8007868:	d90b      	bls.n	8007882 <_free_r+0x4e>
 800786a:	6821      	ldr	r1, [r4, #0]
 800786c:	1862      	adds	r2, r4, r1
 800786e:	4293      	cmp	r3, r2
 8007870:	bf04      	itt	eq
 8007872:	681a      	ldreq	r2, [r3, #0]
 8007874:	685b      	ldreq	r3, [r3, #4]
 8007876:	6063      	str	r3, [r4, #4]
 8007878:	bf04      	itt	eq
 800787a:	1852      	addeq	r2, r2, r1
 800787c:	6022      	streq	r2, [r4, #0]
 800787e:	602c      	str	r4, [r5, #0]
 8007880:	e7ec      	b.n	800785c <_free_r+0x28>
 8007882:	461a      	mov	r2, r3
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	b10b      	cbz	r3, 800788c <_free_r+0x58>
 8007888:	42a3      	cmp	r3, r4
 800788a:	d9fa      	bls.n	8007882 <_free_r+0x4e>
 800788c:	6811      	ldr	r1, [r2, #0]
 800788e:	1855      	adds	r5, r2, r1
 8007890:	42a5      	cmp	r5, r4
 8007892:	d10b      	bne.n	80078ac <_free_r+0x78>
 8007894:	6824      	ldr	r4, [r4, #0]
 8007896:	4421      	add	r1, r4
 8007898:	1854      	adds	r4, r2, r1
 800789a:	42a3      	cmp	r3, r4
 800789c:	6011      	str	r1, [r2, #0]
 800789e:	d1dd      	bne.n	800785c <_free_r+0x28>
 80078a0:	681c      	ldr	r4, [r3, #0]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	6053      	str	r3, [r2, #4]
 80078a6:	4421      	add	r1, r4
 80078a8:	6011      	str	r1, [r2, #0]
 80078aa:	e7d7      	b.n	800785c <_free_r+0x28>
 80078ac:	d902      	bls.n	80078b4 <_free_r+0x80>
 80078ae:	230c      	movs	r3, #12
 80078b0:	6003      	str	r3, [r0, #0]
 80078b2:	e7d3      	b.n	800785c <_free_r+0x28>
 80078b4:	6825      	ldr	r5, [r4, #0]
 80078b6:	1961      	adds	r1, r4, r5
 80078b8:	428b      	cmp	r3, r1
 80078ba:	bf04      	itt	eq
 80078bc:	6819      	ldreq	r1, [r3, #0]
 80078be:	685b      	ldreq	r3, [r3, #4]
 80078c0:	6063      	str	r3, [r4, #4]
 80078c2:	bf04      	itt	eq
 80078c4:	1949      	addeq	r1, r1, r5
 80078c6:	6021      	streq	r1, [r4, #0]
 80078c8:	6054      	str	r4, [r2, #4]
 80078ca:	e7c7      	b.n	800785c <_free_r+0x28>
 80078cc:	b003      	add	sp, #12
 80078ce:	bd30      	pop	{r4, r5, pc}
 80078d0:	200000b4 	.word	0x200000b4

080078d4 <_malloc_r>:
 80078d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d6:	1ccd      	adds	r5, r1, #3
 80078d8:	f025 0503 	bic.w	r5, r5, #3
 80078dc:	3508      	adds	r5, #8
 80078de:	2d0c      	cmp	r5, #12
 80078e0:	bf38      	it	cc
 80078e2:	250c      	movcc	r5, #12
 80078e4:	2d00      	cmp	r5, #0
 80078e6:	4606      	mov	r6, r0
 80078e8:	db01      	blt.n	80078ee <_malloc_r+0x1a>
 80078ea:	42a9      	cmp	r1, r5
 80078ec:	d903      	bls.n	80078f6 <_malloc_r+0x22>
 80078ee:	230c      	movs	r3, #12
 80078f0:	6033      	str	r3, [r6, #0]
 80078f2:	2000      	movs	r0, #0
 80078f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078f6:	f000 f857 	bl	80079a8 <__malloc_lock>
 80078fa:	4921      	ldr	r1, [pc, #132]	; (8007980 <_malloc_r+0xac>)
 80078fc:	680a      	ldr	r2, [r1, #0]
 80078fe:	4614      	mov	r4, r2
 8007900:	b99c      	cbnz	r4, 800792a <_malloc_r+0x56>
 8007902:	4f20      	ldr	r7, [pc, #128]	; (8007984 <_malloc_r+0xb0>)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	b923      	cbnz	r3, 8007912 <_malloc_r+0x3e>
 8007908:	4621      	mov	r1, r4
 800790a:	4630      	mov	r0, r6
 800790c:	f000 f83c 	bl	8007988 <_sbrk_r>
 8007910:	6038      	str	r0, [r7, #0]
 8007912:	4629      	mov	r1, r5
 8007914:	4630      	mov	r0, r6
 8007916:	f000 f837 	bl	8007988 <_sbrk_r>
 800791a:	1c43      	adds	r3, r0, #1
 800791c:	d123      	bne.n	8007966 <_malloc_r+0x92>
 800791e:	230c      	movs	r3, #12
 8007920:	6033      	str	r3, [r6, #0]
 8007922:	4630      	mov	r0, r6
 8007924:	f000 f846 	bl	80079b4 <__malloc_unlock>
 8007928:	e7e3      	b.n	80078f2 <_malloc_r+0x1e>
 800792a:	6823      	ldr	r3, [r4, #0]
 800792c:	1b5b      	subs	r3, r3, r5
 800792e:	d417      	bmi.n	8007960 <_malloc_r+0x8c>
 8007930:	2b0b      	cmp	r3, #11
 8007932:	d903      	bls.n	800793c <_malloc_r+0x68>
 8007934:	6023      	str	r3, [r4, #0]
 8007936:	441c      	add	r4, r3
 8007938:	6025      	str	r5, [r4, #0]
 800793a:	e004      	b.n	8007946 <_malloc_r+0x72>
 800793c:	6863      	ldr	r3, [r4, #4]
 800793e:	42a2      	cmp	r2, r4
 8007940:	bf0c      	ite	eq
 8007942:	600b      	streq	r3, [r1, #0]
 8007944:	6053      	strne	r3, [r2, #4]
 8007946:	4630      	mov	r0, r6
 8007948:	f000 f834 	bl	80079b4 <__malloc_unlock>
 800794c:	f104 000b 	add.w	r0, r4, #11
 8007950:	1d23      	adds	r3, r4, #4
 8007952:	f020 0007 	bic.w	r0, r0, #7
 8007956:	1ac2      	subs	r2, r0, r3
 8007958:	d0cc      	beq.n	80078f4 <_malloc_r+0x20>
 800795a:	1a1b      	subs	r3, r3, r0
 800795c:	50a3      	str	r3, [r4, r2]
 800795e:	e7c9      	b.n	80078f4 <_malloc_r+0x20>
 8007960:	4622      	mov	r2, r4
 8007962:	6864      	ldr	r4, [r4, #4]
 8007964:	e7cc      	b.n	8007900 <_malloc_r+0x2c>
 8007966:	1cc4      	adds	r4, r0, #3
 8007968:	f024 0403 	bic.w	r4, r4, #3
 800796c:	42a0      	cmp	r0, r4
 800796e:	d0e3      	beq.n	8007938 <_malloc_r+0x64>
 8007970:	1a21      	subs	r1, r4, r0
 8007972:	4630      	mov	r0, r6
 8007974:	f000 f808 	bl	8007988 <_sbrk_r>
 8007978:	3001      	adds	r0, #1
 800797a:	d1dd      	bne.n	8007938 <_malloc_r+0x64>
 800797c:	e7cf      	b.n	800791e <_malloc_r+0x4a>
 800797e:	bf00      	nop
 8007980:	200000b4 	.word	0x200000b4
 8007984:	200000b8 	.word	0x200000b8

08007988 <_sbrk_r>:
 8007988:	b538      	push	{r3, r4, r5, lr}
 800798a:	4d06      	ldr	r5, [pc, #24]	; (80079a4 <_sbrk_r+0x1c>)
 800798c:	2300      	movs	r3, #0
 800798e:	4604      	mov	r4, r0
 8007990:	4608      	mov	r0, r1
 8007992:	602b      	str	r3, [r5, #0]
 8007994:	f7f9 f90e 	bl	8000bb4 <_sbrk>
 8007998:	1c43      	adds	r3, r0, #1
 800799a:	d102      	bne.n	80079a2 <_sbrk_r+0x1a>
 800799c:	682b      	ldr	r3, [r5, #0]
 800799e:	b103      	cbz	r3, 80079a2 <_sbrk_r+0x1a>
 80079a0:	6023      	str	r3, [r4, #0]
 80079a2:	bd38      	pop	{r3, r4, r5, pc}
 80079a4:	2000082c 	.word	0x2000082c

080079a8 <__malloc_lock>:
 80079a8:	4801      	ldr	r0, [pc, #4]	; (80079b0 <__malloc_lock+0x8>)
 80079aa:	f000 b809 	b.w	80079c0 <__retarget_lock_acquire_recursive>
 80079ae:	bf00      	nop
 80079b0:	20000834 	.word	0x20000834

080079b4 <__malloc_unlock>:
 80079b4:	4801      	ldr	r0, [pc, #4]	; (80079bc <__malloc_unlock+0x8>)
 80079b6:	f000 b804 	b.w	80079c2 <__retarget_lock_release_recursive>
 80079ba:	bf00      	nop
 80079bc:	20000834 	.word	0x20000834

080079c0 <__retarget_lock_acquire_recursive>:
 80079c0:	4770      	bx	lr

080079c2 <__retarget_lock_release_recursive>:
 80079c2:	4770      	bx	lr

080079c4 <_init>:
 80079c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c6:	bf00      	nop
 80079c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ca:	bc08      	pop	{r3}
 80079cc:	469e      	mov	lr, r3
 80079ce:	4770      	bx	lr

080079d0 <_fini>:
 80079d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d2:	bf00      	nop
 80079d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079d6:	bc08      	pop	{r3}
 80079d8:	469e      	mov	lr, r3
 80079da:	4770      	bx	lr
